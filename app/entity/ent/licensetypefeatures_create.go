// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"cambridge-hit.com/gin-base/activateserver/app/entity/ent/licensetype"
	"cambridge-hit.com/gin-base/activateserver/app/entity/ent/licensetypefeatures"
	"cambridge-hit.com/gin-base/activateserver/app/entity/ent/productfeature"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// LicenseTypeFeaturesCreate is the builder for creating a LicenseTypeFeatures entity.
type LicenseTypeFeaturesCreate struct {
	config
	mutation *LicenseTypeFeaturesMutation
	hooks    []Hook
}

// SetLicenseTypeID sets the "license_type_id" field.
func (ltfc *LicenseTypeFeaturesCreate) SetLicenseTypeID(i int) *LicenseTypeFeaturesCreate {
	ltfc.mutation.SetLicenseTypeID(i)
	return ltfc
}

// SetFeatureID sets the "feature_id" field.
func (ltfc *LicenseTypeFeaturesCreate) SetFeatureID(i int) *LicenseTypeFeaturesCreate {
	ltfc.mutation.SetFeatureID(i)
	return ltfc
}

// SetCreatedAt sets the "created_at" field.
func (ltfc *LicenseTypeFeaturesCreate) SetCreatedAt(t time.Time) *LicenseTypeFeaturesCreate {
	ltfc.mutation.SetCreatedAt(t)
	return ltfc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ltfc *LicenseTypeFeaturesCreate) SetNillableCreatedAt(t *time.Time) *LicenseTypeFeaturesCreate {
	if t != nil {
		ltfc.SetCreatedAt(*t)
	}
	return ltfc
}

// SetID sets the "id" field.
func (ltfc *LicenseTypeFeaturesCreate) SetID(i int) *LicenseTypeFeaturesCreate {
	ltfc.mutation.SetID(i)
	return ltfc
}

// SetLicenseType sets the "license_type" edge to the LicenseType entity.
func (ltfc *LicenseTypeFeaturesCreate) SetLicenseType(l *LicenseType) *LicenseTypeFeaturesCreate {
	return ltfc.SetLicenseTypeID(l.ID)
}

// SetFeature sets the "feature" edge to the ProductFeature entity.
func (ltfc *LicenseTypeFeaturesCreate) SetFeature(p *ProductFeature) *LicenseTypeFeaturesCreate {
	return ltfc.SetFeatureID(p.ID)
}

// Mutation returns the LicenseTypeFeaturesMutation object of the builder.
func (ltfc *LicenseTypeFeaturesCreate) Mutation() *LicenseTypeFeaturesMutation {
	return ltfc.mutation
}

// Save creates the LicenseTypeFeatures in the database.
func (ltfc *LicenseTypeFeaturesCreate) Save(ctx context.Context) (*LicenseTypeFeatures, error) {
	ltfc.defaults()
	return withHooks(ctx, ltfc.sqlSave, ltfc.mutation, ltfc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ltfc *LicenseTypeFeaturesCreate) SaveX(ctx context.Context) *LicenseTypeFeatures {
	v, err := ltfc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ltfc *LicenseTypeFeaturesCreate) Exec(ctx context.Context) error {
	_, err := ltfc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ltfc *LicenseTypeFeaturesCreate) ExecX(ctx context.Context) {
	if err := ltfc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ltfc *LicenseTypeFeaturesCreate) defaults() {
	if _, ok := ltfc.mutation.CreatedAt(); !ok {
		v := licensetypefeatures.DefaultCreatedAt()
		ltfc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ltfc *LicenseTypeFeaturesCreate) check() error {
	if _, ok := ltfc.mutation.LicenseTypeID(); !ok {
		return &ValidationError{Name: "license_type_id", err: errors.New(`ent: missing required field "LicenseTypeFeatures.license_type_id"`)}
	}
	if _, ok := ltfc.mutation.FeatureID(); !ok {
		return &ValidationError{Name: "feature_id", err: errors.New(`ent: missing required field "LicenseTypeFeatures.feature_id"`)}
	}
	if _, ok := ltfc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "LicenseTypeFeatures.created_at"`)}
	}
	if v, ok := ltfc.mutation.ID(); ok {
		if err := licensetypefeatures.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "LicenseTypeFeatures.id": %w`, err)}
		}
	}
	if _, ok := ltfc.mutation.LicenseTypeID(); !ok {
		return &ValidationError{Name: "license_type", err: errors.New(`ent: missing required edge "LicenseTypeFeatures.license_type"`)}
	}
	if _, ok := ltfc.mutation.FeatureID(); !ok {
		return &ValidationError{Name: "feature", err: errors.New(`ent: missing required edge "LicenseTypeFeatures.feature"`)}
	}
	return nil
}

func (ltfc *LicenseTypeFeaturesCreate) sqlSave(ctx context.Context) (*LicenseTypeFeatures, error) {
	if err := ltfc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ltfc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ltfc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	ltfc.mutation.id = &_node.ID
	ltfc.mutation.done = true
	return _node, nil
}

func (ltfc *LicenseTypeFeaturesCreate) createSpec() (*LicenseTypeFeatures, *sqlgraph.CreateSpec) {
	var (
		_node = &LicenseTypeFeatures{config: ltfc.config}
		_spec = sqlgraph.NewCreateSpec(licensetypefeatures.Table, sqlgraph.NewFieldSpec(licensetypefeatures.FieldID, field.TypeInt))
	)
	if id, ok := ltfc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ltfc.mutation.CreatedAt(); ok {
		_spec.SetField(licensetypefeatures.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := ltfc.mutation.LicenseTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   licensetypefeatures.LicenseTypeTable,
			Columns: []string{licensetypefeatures.LicenseTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(licensetype.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.LicenseTypeID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ltfc.mutation.FeatureIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   licensetypefeatures.FeatureTable,
			Columns: []string{licensetypefeatures.FeatureColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productfeature.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.FeatureID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// LicenseTypeFeaturesCreateBulk is the builder for creating many LicenseTypeFeatures entities in bulk.
type LicenseTypeFeaturesCreateBulk struct {
	config
	err      error
	builders []*LicenseTypeFeaturesCreate
}

// Save creates the LicenseTypeFeatures entities in the database.
func (ltfcb *LicenseTypeFeaturesCreateBulk) Save(ctx context.Context) ([]*LicenseTypeFeatures, error) {
	if ltfcb.err != nil {
		return nil, ltfcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ltfcb.builders))
	nodes := make([]*LicenseTypeFeatures, len(ltfcb.builders))
	mutators := make([]Mutator, len(ltfcb.builders))
	for i := range ltfcb.builders {
		func(i int, root context.Context) {
			builder := ltfcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*LicenseTypeFeaturesMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ltfcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ltfcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ltfcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ltfcb *LicenseTypeFeaturesCreateBulk) SaveX(ctx context.Context) []*LicenseTypeFeatures {
	v, err := ltfcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ltfcb *LicenseTypeFeaturesCreateBulk) Exec(ctx context.Context) error {
	_, err := ltfcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ltfcb *LicenseTypeFeaturesCreateBulk) ExecX(ctx context.Context) {
	if err := ltfcb.Exec(ctx); err != nil {
		panic(err)
	}
}
