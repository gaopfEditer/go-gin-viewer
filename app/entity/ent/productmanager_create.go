// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"cambridge-hit.com/gin-base/activateserver/app/entity/ent/product"
	"cambridge-hit.com/gin-base/activateserver/app/entity/ent/productmanager"
	"cambridge-hit.com/gin-base/activateserver/app/entity/ent/user"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ProductManagerCreate is the builder for creating a ProductManager entity.
type ProductManagerCreate struct {
	config
	mutation *ProductManagerMutation
	hooks    []Hook
}

// SetRole sets the "role" field.
func (pmc *ProductManagerCreate) SetRole(pr productmanager.Role) *ProductManagerCreate {
	pmc.mutation.SetRole(pr)
	return pmc
}

// SetUserID sets the "user_id" field.
func (pmc *ProductManagerCreate) SetUserID(i int) *ProductManagerCreate {
	pmc.mutation.SetUserID(i)
	return pmc
}

// SetProductID sets the "product_id" field.
func (pmc *ProductManagerCreate) SetProductID(i int) *ProductManagerCreate {
	pmc.mutation.SetProductID(i)
	return pmc
}

// SetPermissions sets the "permissions" field.
func (pmc *ProductManagerCreate) SetPermissions(pr productmanager.Permissions) *ProductManagerCreate {
	pmc.mutation.SetPermissions(pr)
	return pmc
}

// SetNillablePermissions sets the "permissions" field if the given value is not nil.
func (pmc *ProductManagerCreate) SetNillablePermissions(pr *productmanager.Permissions) *ProductManagerCreate {
	if pr != nil {
		pmc.SetPermissions(*pr)
	}
	return pmc
}

// SetRemark sets the "remark" field.
func (pmc *ProductManagerCreate) SetRemark(s string) *ProductManagerCreate {
	pmc.mutation.SetRemark(s)
	return pmc
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (pmc *ProductManagerCreate) SetNillableRemark(s *string) *ProductManagerCreate {
	if s != nil {
		pmc.SetRemark(*s)
	}
	return pmc
}

// SetCreatedAt sets the "created_at" field.
func (pmc *ProductManagerCreate) SetCreatedAt(t time.Time) *ProductManagerCreate {
	pmc.mutation.SetCreatedAt(t)
	return pmc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pmc *ProductManagerCreate) SetNillableCreatedAt(t *time.Time) *ProductManagerCreate {
	if t != nil {
		pmc.SetCreatedAt(*t)
	}
	return pmc
}

// SetUpdatedAt sets the "updated_at" field.
func (pmc *ProductManagerCreate) SetUpdatedAt(t time.Time) *ProductManagerCreate {
	pmc.mutation.SetUpdatedAt(t)
	return pmc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pmc *ProductManagerCreate) SetNillableUpdatedAt(t *time.Time) *ProductManagerCreate {
	if t != nil {
		pmc.SetUpdatedAt(*t)
	}
	return pmc
}

// SetID sets the "id" field.
func (pmc *ProductManagerCreate) SetID(i int) *ProductManagerCreate {
	pmc.mutation.SetID(i)
	return pmc
}

// SetUser sets the "user" edge to the User entity.
func (pmc *ProductManagerCreate) SetUser(u *User) *ProductManagerCreate {
	return pmc.SetUserID(u.ID)
}

// SetProduct sets the "product" edge to the Product entity.
func (pmc *ProductManagerCreate) SetProduct(p *Product) *ProductManagerCreate {
	return pmc.SetProductID(p.ID)
}

// Mutation returns the ProductManagerMutation object of the builder.
func (pmc *ProductManagerCreate) Mutation() *ProductManagerMutation {
	return pmc.mutation
}

// Save creates the ProductManager in the database.
func (pmc *ProductManagerCreate) Save(ctx context.Context) (*ProductManager, error) {
	pmc.defaults()
	return withHooks(ctx, pmc.sqlSave, pmc.mutation, pmc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pmc *ProductManagerCreate) SaveX(ctx context.Context) *ProductManager {
	v, err := pmc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pmc *ProductManagerCreate) Exec(ctx context.Context) error {
	_, err := pmc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pmc *ProductManagerCreate) ExecX(ctx context.Context) {
	if err := pmc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pmc *ProductManagerCreate) defaults() {
	if _, ok := pmc.mutation.Permissions(); !ok {
		v := productmanager.DefaultPermissions
		pmc.mutation.SetPermissions(v)
	}
	if _, ok := pmc.mutation.CreatedAt(); !ok {
		v := productmanager.DefaultCreatedAt()
		pmc.mutation.SetCreatedAt(v)
	}
	if _, ok := pmc.mutation.UpdatedAt(); !ok {
		v := productmanager.DefaultUpdatedAt()
		pmc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pmc *ProductManagerCreate) check() error {
	if _, ok := pmc.mutation.Role(); !ok {
		return &ValidationError{Name: "role", err: errors.New(`ent: missing required field "ProductManager.role"`)}
	}
	if v, ok := pmc.mutation.Role(); ok {
		if err := productmanager.RoleValidator(v); err != nil {
			return &ValidationError{Name: "role", err: fmt.Errorf(`ent: validator failed for field "ProductManager.role": %w`, err)}
		}
	}
	if _, ok := pmc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "ProductManager.user_id"`)}
	}
	if _, ok := pmc.mutation.ProductID(); !ok {
		return &ValidationError{Name: "product_id", err: errors.New(`ent: missing required field "ProductManager.product_id"`)}
	}
	if v, ok := pmc.mutation.Permissions(); ok {
		if err := productmanager.PermissionsValidator(v); err != nil {
			return &ValidationError{Name: "permissions", err: fmt.Errorf(`ent: validator failed for field "ProductManager.permissions": %w`, err)}
		}
	}
	if _, ok := pmc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "ProductManager.created_at"`)}
	}
	if _, ok := pmc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "ProductManager.updated_at"`)}
	}
	if v, ok := pmc.mutation.ID(); ok {
		if err := productmanager.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "ProductManager.id": %w`, err)}
		}
	}
	if _, ok := pmc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "ProductManager.user"`)}
	}
	if _, ok := pmc.mutation.ProductID(); !ok {
		return &ValidationError{Name: "product", err: errors.New(`ent: missing required edge "ProductManager.product"`)}
	}
	return nil
}

func (pmc *ProductManagerCreate) sqlSave(ctx context.Context) (*ProductManager, error) {
	if err := pmc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pmc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pmc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	pmc.mutation.id = &_node.ID
	pmc.mutation.done = true
	return _node, nil
}

func (pmc *ProductManagerCreate) createSpec() (*ProductManager, *sqlgraph.CreateSpec) {
	var (
		_node = &ProductManager{config: pmc.config}
		_spec = sqlgraph.NewCreateSpec(productmanager.Table, sqlgraph.NewFieldSpec(productmanager.FieldID, field.TypeInt))
	)
	if id, ok := pmc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := pmc.mutation.Role(); ok {
		_spec.SetField(productmanager.FieldRole, field.TypeEnum, value)
		_node.Role = value
	}
	if value, ok := pmc.mutation.Permissions(); ok {
		_spec.SetField(productmanager.FieldPermissions, field.TypeEnum, value)
		_node.Permissions = value
	}
	if value, ok := pmc.mutation.Remark(); ok {
		_spec.SetField(productmanager.FieldRemark, field.TypeString, value)
		_node.Remark = value
	}
	if value, ok := pmc.mutation.CreatedAt(); ok {
		_spec.SetField(productmanager.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := pmc.mutation.UpdatedAt(); ok {
		_spec.SetField(productmanager.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := pmc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productmanager.UserTable,
			Columns: []string{productmanager.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pmc.mutation.ProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productmanager.ProductTable,
			Columns: []string{productmanager.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ProductID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ProductManagerCreateBulk is the builder for creating many ProductManager entities in bulk.
type ProductManagerCreateBulk struct {
	config
	err      error
	builders []*ProductManagerCreate
}

// Save creates the ProductManager entities in the database.
func (pmcb *ProductManagerCreateBulk) Save(ctx context.Context) ([]*ProductManager, error) {
	if pmcb.err != nil {
		return nil, pmcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pmcb.builders))
	nodes := make([]*ProductManager, len(pmcb.builders))
	mutators := make([]Mutator, len(pmcb.builders))
	for i := range pmcb.builders {
		func(i int, root context.Context) {
			builder := pmcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProductManagerMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pmcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pmcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pmcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pmcb *ProductManagerCreateBulk) SaveX(ctx context.Context) []*ProductManager {
	v, err := pmcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pmcb *ProductManagerCreateBulk) Exec(ctx context.Context) error {
	_, err := pmcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pmcb *ProductManagerCreateBulk) ExecX(ctx context.Context) {
	if err := pmcb.Exec(ctx); err != nil {
		panic(err)
	}
}
