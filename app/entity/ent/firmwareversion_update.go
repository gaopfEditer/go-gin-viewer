// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"cambridge-hit.com/gin-base/activateserver/app/entity/ent/firmwareversion"
	"cambridge-hit.com/gin-base/activateserver/app/entity/ent/predicate"
	"cambridge-hit.com/gin-base/activateserver/app/entity/ent/product"
	"cambridge-hit.com/gin-base/activateserver/app/entity/ent/softwareversion"
	"cambridge-hit.com/gin-base/activateserver/app/entity/ent/user"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// FirmwareVersionUpdate is the builder for updating FirmwareVersion entities.
type FirmwareVersionUpdate struct {
	config
	hooks    []Hook
	mutation *FirmwareVersionMutation
}

// Where appends a list predicates to the FirmwareVersionUpdate builder.
func (fvu *FirmwareVersionUpdate) Where(ps ...predicate.FirmwareVersion) *FirmwareVersionUpdate {
	fvu.mutation.Where(ps...)
	return fvu
}

// SetProductID sets the "product_id" field.
func (fvu *FirmwareVersionUpdate) SetProductID(i int) *FirmwareVersionUpdate {
	fvu.mutation.SetProductID(i)
	return fvu
}

// SetVersion sets the "version" field.
func (fvu *FirmwareVersionUpdate) SetVersion(s string) *FirmwareVersionUpdate {
	fvu.mutation.SetVersion(s)
	return fvu
}

// SetReleaseDate sets the "release_date" field.
func (fvu *FirmwareVersionUpdate) SetReleaseDate(t time.Time) *FirmwareVersionUpdate {
	fvu.mutation.SetReleaseDate(t)
	return fvu
}

// SetNillableReleaseDate sets the "release_date" field if the given value is not nil.
func (fvu *FirmwareVersionUpdate) SetNillableReleaseDate(t *time.Time) *FirmwareVersionUpdate {
	if t != nil {
		fvu.SetReleaseDate(*t)
	}
	return fvu
}

// SetRemark sets the "remark" field.
func (fvu *FirmwareVersionUpdate) SetRemark(s string) *FirmwareVersionUpdate {
	fvu.mutation.SetRemark(s)
	return fvu
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (fvu *FirmwareVersionUpdate) SetNillableRemark(s *string) *FirmwareVersionUpdate {
	if s != nil {
		fvu.SetRemark(*s)
	}
	return fvu
}

// ClearRemark clears the value of the "remark" field.
func (fvu *FirmwareVersionUpdate) ClearRemark() *FirmwareVersionUpdate {
	fvu.mutation.ClearRemark()
	return fvu
}

// SetCreatedBy sets the "created_by" field.
func (fvu *FirmwareVersionUpdate) SetCreatedBy(i int) *FirmwareVersionUpdate {
	fvu.mutation.SetCreatedBy(i)
	return fvu
}

// SetCreatedAt sets the "created_at" field.
func (fvu *FirmwareVersionUpdate) SetCreatedAt(t time.Time) *FirmwareVersionUpdate {
	fvu.mutation.SetCreatedAt(t)
	return fvu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (fvu *FirmwareVersionUpdate) SetNillableCreatedAt(t *time.Time) *FirmwareVersionUpdate {
	if t != nil {
		fvu.SetCreatedAt(*t)
	}
	return fvu
}

// SetUpdatedAt sets the "updated_at" field.
func (fvu *FirmwareVersionUpdate) SetUpdatedAt(t time.Time) *FirmwareVersionUpdate {
	fvu.mutation.SetUpdatedAt(t)
	return fvu
}

// AddSoftwareVersionIDs adds the "software_versions" edge to the SoftwareVersion entity by IDs.
func (fvu *FirmwareVersionUpdate) AddSoftwareVersionIDs(ids ...int) *FirmwareVersionUpdate {
	fvu.mutation.AddSoftwareVersionIDs(ids...)
	return fvu
}

// AddSoftwareVersions adds the "software_versions" edges to the SoftwareVersion entity.
func (fvu *FirmwareVersionUpdate) AddSoftwareVersions(s ...*SoftwareVersion) *FirmwareVersionUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return fvu.AddSoftwareVersionIDs(ids...)
}

// SetProduct sets the "product" edge to the Product entity.
func (fvu *FirmwareVersionUpdate) SetProduct(p *Product) *FirmwareVersionUpdate {
	return fvu.SetProductID(p.ID)
}

// SetCreatorID sets the "creator" edge to the User entity by ID.
func (fvu *FirmwareVersionUpdate) SetCreatorID(id int) *FirmwareVersionUpdate {
	fvu.mutation.SetCreatorID(id)
	return fvu
}

// SetCreator sets the "creator" edge to the User entity.
func (fvu *FirmwareVersionUpdate) SetCreator(u *User) *FirmwareVersionUpdate {
	return fvu.SetCreatorID(u.ID)
}

// Mutation returns the FirmwareVersionMutation object of the builder.
func (fvu *FirmwareVersionUpdate) Mutation() *FirmwareVersionMutation {
	return fvu.mutation
}

// ClearSoftwareVersions clears all "software_versions" edges to the SoftwareVersion entity.
func (fvu *FirmwareVersionUpdate) ClearSoftwareVersions() *FirmwareVersionUpdate {
	fvu.mutation.ClearSoftwareVersions()
	return fvu
}

// RemoveSoftwareVersionIDs removes the "software_versions" edge to SoftwareVersion entities by IDs.
func (fvu *FirmwareVersionUpdate) RemoveSoftwareVersionIDs(ids ...int) *FirmwareVersionUpdate {
	fvu.mutation.RemoveSoftwareVersionIDs(ids...)
	return fvu
}

// RemoveSoftwareVersions removes "software_versions" edges to SoftwareVersion entities.
func (fvu *FirmwareVersionUpdate) RemoveSoftwareVersions(s ...*SoftwareVersion) *FirmwareVersionUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return fvu.RemoveSoftwareVersionIDs(ids...)
}

// ClearProduct clears the "product" edge to the Product entity.
func (fvu *FirmwareVersionUpdate) ClearProduct() *FirmwareVersionUpdate {
	fvu.mutation.ClearProduct()
	return fvu
}

// ClearCreator clears the "creator" edge to the User entity.
func (fvu *FirmwareVersionUpdate) ClearCreator() *FirmwareVersionUpdate {
	fvu.mutation.ClearCreator()
	return fvu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fvu *FirmwareVersionUpdate) Save(ctx context.Context) (int, error) {
	fvu.defaults()
	return withHooks(ctx, fvu.sqlSave, fvu.mutation, fvu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fvu *FirmwareVersionUpdate) SaveX(ctx context.Context) int {
	affected, err := fvu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fvu *FirmwareVersionUpdate) Exec(ctx context.Context) error {
	_, err := fvu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fvu *FirmwareVersionUpdate) ExecX(ctx context.Context) {
	if err := fvu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fvu *FirmwareVersionUpdate) defaults() {
	if _, ok := fvu.mutation.UpdatedAt(); !ok {
		v := firmwareversion.UpdateDefaultUpdatedAt()
		fvu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fvu *FirmwareVersionUpdate) check() error {
	if v, ok := fvu.mutation.Version(); ok {
		if err := firmwareversion.VersionValidator(v); err != nil {
			return &ValidationError{Name: "version", err: fmt.Errorf(`ent: validator failed for field "FirmwareVersion.version": %w`, err)}
		}
	}
	if _, ok := fvu.mutation.ProductID(); fvu.mutation.ProductCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "FirmwareVersion.product"`)
	}
	if _, ok := fvu.mutation.CreatorID(); fvu.mutation.CreatorCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "FirmwareVersion.creator"`)
	}
	return nil
}

func (fvu *FirmwareVersionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := fvu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(firmwareversion.Table, firmwareversion.Columns, sqlgraph.NewFieldSpec(firmwareversion.FieldID, field.TypeInt))
	if ps := fvu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fvu.mutation.Version(); ok {
		_spec.SetField(firmwareversion.FieldVersion, field.TypeString, value)
	}
	if value, ok := fvu.mutation.ReleaseDate(); ok {
		_spec.SetField(firmwareversion.FieldReleaseDate, field.TypeTime, value)
	}
	if value, ok := fvu.mutation.Remark(); ok {
		_spec.SetField(firmwareversion.FieldRemark, field.TypeString, value)
	}
	if fvu.mutation.RemarkCleared() {
		_spec.ClearField(firmwareversion.FieldRemark, field.TypeString)
	}
	if value, ok := fvu.mutation.CreatedAt(); ok {
		_spec.SetField(firmwareversion.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := fvu.mutation.UpdatedAt(); ok {
		_spec.SetField(firmwareversion.FieldUpdatedAt, field.TypeTime, value)
	}
	if fvu.mutation.SoftwareVersionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   firmwareversion.SoftwareVersionsTable,
			Columns: firmwareversion.SoftwareVersionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(softwareversion.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fvu.mutation.RemovedSoftwareVersionsIDs(); len(nodes) > 0 && !fvu.mutation.SoftwareVersionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   firmwareversion.SoftwareVersionsTable,
			Columns: firmwareversion.SoftwareVersionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(softwareversion.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fvu.mutation.SoftwareVersionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   firmwareversion.SoftwareVersionsTable,
			Columns: firmwareversion.SoftwareVersionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(softwareversion.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fvu.mutation.ProductCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   firmwareversion.ProductTable,
			Columns: []string{firmwareversion.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fvu.mutation.ProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   firmwareversion.ProductTable,
			Columns: []string{firmwareversion.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fvu.mutation.CreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   firmwareversion.CreatorTable,
			Columns: []string{firmwareversion.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fvu.mutation.CreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   firmwareversion.CreatorTable,
			Columns: []string{firmwareversion.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, fvu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{firmwareversion.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	fvu.mutation.done = true
	return n, nil
}

// FirmwareVersionUpdateOne is the builder for updating a single FirmwareVersion entity.
type FirmwareVersionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *FirmwareVersionMutation
}

// SetProductID sets the "product_id" field.
func (fvuo *FirmwareVersionUpdateOne) SetProductID(i int) *FirmwareVersionUpdateOne {
	fvuo.mutation.SetProductID(i)
	return fvuo
}

// SetVersion sets the "version" field.
func (fvuo *FirmwareVersionUpdateOne) SetVersion(s string) *FirmwareVersionUpdateOne {
	fvuo.mutation.SetVersion(s)
	return fvuo
}

// SetReleaseDate sets the "release_date" field.
func (fvuo *FirmwareVersionUpdateOne) SetReleaseDate(t time.Time) *FirmwareVersionUpdateOne {
	fvuo.mutation.SetReleaseDate(t)
	return fvuo
}

// SetNillableReleaseDate sets the "release_date" field if the given value is not nil.
func (fvuo *FirmwareVersionUpdateOne) SetNillableReleaseDate(t *time.Time) *FirmwareVersionUpdateOne {
	if t != nil {
		fvuo.SetReleaseDate(*t)
	}
	return fvuo
}

// SetRemark sets the "remark" field.
func (fvuo *FirmwareVersionUpdateOne) SetRemark(s string) *FirmwareVersionUpdateOne {
	fvuo.mutation.SetRemark(s)
	return fvuo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (fvuo *FirmwareVersionUpdateOne) SetNillableRemark(s *string) *FirmwareVersionUpdateOne {
	if s != nil {
		fvuo.SetRemark(*s)
	}
	return fvuo
}

// ClearRemark clears the value of the "remark" field.
func (fvuo *FirmwareVersionUpdateOne) ClearRemark() *FirmwareVersionUpdateOne {
	fvuo.mutation.ClearRemark()
	return fvuo
}

// SetCreatedBy sets the "created_by" field.
func (fvuo *FirmwareVersionUpdateOne) SetCreatedBy(i int) *FirmwareVersionUpdateOne {
	fvuo.mutation.SetCreatedBy(i)
	return fvuo
}

// SetCreatedAt sets the "created_at" field.
func (fvuo *FirmwareVersionUpdateOne) SetCreatedAt(t time.Time) *FirmwareVersionUpdateOne {
	fvuo.mutation.SetCreatedAt(t)
	return fvuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (fvuo *FirmwareVersionUpdateOne) SetNillableCreatedAt(t *time.Time) *FirmwareVersionUpdateOne {
	if t != nil {
		fvuo.SetCreatedAt(*t)
	}
	return fvuo
}

// SetUpdatedAt sets the "updated_at" field.
func (fvuo *FirmwareVersionUpdateOne) SetUpdatedAt(t time.Time) *FirmwareVersionUpdateOne {
	fvuo.mutation.SetUpdatedAt(t)
	return fvuo
}

// AddSoftwareVersionIDs adds the "software_versions" edge to the SoftwareVersion entity by IDs.
func (fvuo *FirmwareVersionUpdateOne) AddSoftwareVersionIDs(ids ...int) *FirmwareVersionUpdateOne {
	fvuo.mutation.AddSoftwareVersionIDs(ids...)
	return fvuo
}

// AddSoftwareVersions adds the "software_versions" edges to the SoftwareVersion entity.
func (fvuo *FirmwareVersionUpdateOne) AddSoftwareVersions(s ...*SoftwareVersion) *FirmwareVersionUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return fvuo.AddSoftwareVersionIDs(ids...)
}

// SetProduct sets the "product" edge to the Product entity.
func (fvuo *FirmwareVersionUpdateOne) SetProduct(p *Product) *FirmwareVersionUpdateOne {
	return fvuo.SetProductID(p.ID)
}

// SetCreatorID sets the "creator" edge to the User entity by ID.
func (fvuo *FirmwareVersionUpdateOne) SetCreatorID(id int) *FirmwareVersionUpdateOne {
	fvuo.mutation.SetCreatorID(id)
	return fvuo
}

// SetCreator sets the "creator" edge to the User entity.
func (fvuo *FirmwareVersionUpdateOne) SetCreator(u *User) *FirmwareVersionUpdateOne {
	return fvuo.SetCreatorID(u.ID)
}

// Mutation returns the FirmwareVersionMutation object of the builder.
func (fvuo *FirmwareVersionUpdateOne) Mutation() *FirmwareVersionMutation {
	return fvuo.mutation
}

// ClearSoftwareVersions clears all "software_versions" edges to the SoftwareVersion entity.
func (fvuo *FirmwareVersionUpdateOne) ClearSoftwareVersions() *FirmwareVersionUpdateOne {
	fvuo.mutation.ClearSoftwareVersions()
	return fvuo
}

// RemoveSoftwareVersionIDs removes the "software_versions" edge to SoftwareVersion entities by IDs.
func (fvuo *FirmwareVersionUpdateOne) RemoveSoftwareVersionIDs(ids ...int) *FirmwareVersionUpdateOne {
	fvuo.mutation.RemoveSoftwareVersionIDs(ids...)
	return fvuo
}

// RemoveSoftwareVersions removes "software_versions" edges to SoftwareVersion entities.
func (fvuo *FirmwareVersionUpdateOne) RemoveSoftwareVersions(s ...*SoftwareVersion) *FirmwareVersionUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return fvuo.RemoveSoftwareVersionIDs(ids...)
}

// ClearProduct clears the "product" edge to the Product entity.
func (fvuo *FirmwareVersionUpdateOne) ClearProduct() *FirmwareVersionUpdateOne {
	fvuo.mutation.ClearProduct()
	return fvuo
}

// ClearCreator clears the "creator" edge to the User entity.
func (fvuo *FirmwareVersionUpdateOne) ClearCreator() *FirmwareVersionUpdateOne {
	fvuo.mutation.ClearCreator()
	return fvuo
}

// Where appends a list predicates to the FirmwareVersionUpdate builder.
func (fvuo *FirmwareVersionUpdateOne) Where(ps ...predicate.FirmwareVersion) *FirmwareVersionUpdateOne {
	fvuo.mutation.Where(ps...)
	return fvuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (fvuo *FirmwareVersionUpdateOne) Select(field string, fields ...string) *FirmwareVersionUpdateOne {
	fvuo.fields = append([]string{field}, fields...)
	return fvuo
}

// Save executes the query and returns the updated FirmwareVersion entity.
func (fvuo *FirmwareVersionUpdateOne) Save(ctx context.Context) (*FirmwareVersion, error) {
	fvuo.defaults()
	return withHooks(ctx, fvuo.sqlSave, fvuo.mutation, fvuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fvuo *FirmwareVersionUpdateOne) SaveX(ctx context.Context) *FirmwareVersion {
	node, err := fvuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fvuo *FirmwareVersionUpdateOne) Exec(ctx context.Context) error {
	_, err := fvuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fvuo *FirmwareVersionUpdateOne) ExecX(ctx context.Context) {
	if err := fvuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fvuo *FirmwareVersionUpdateOne) defaults() {
	if _, ok := fvuo.mutation.UpdatedAt(); !ok {
		v := firmwareversion.UpdateDefaultUpdatedAt()
		fvuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fvuo *FirmwareVersionUpdateOne) check() error {
	if v, ok := fvuo.mutation.Version(); ok {
		if err := firmwareversion.VersionValidator(v); err != nil {
			return &ValidationError{Name: "version", err: fmt.Errorf(`ent: validator failed for field "FirmwareVersion.version": %w`, err)}
		}
	}
	if _, ok := fvuo.mutation.ProductID(); fvuo.mutation.ProductCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "FirmwareVersion.product"`)
	}
	if _, ok := fvuo.mutation.CreatorID(); fvuo.mutation.CreatorCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "FirmwareVersion.creator"`)
	}
	return nil
}

func (fvuo *FirmwareVersionUpdateOne) sqlSave(ctx context.Context) (_node *FirmwareVersion, err error) {
	if err := fvuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(firmwareversion.Table, firmwareversion.Columns, sqlgraph.NewFieldSpec(firmwareversion.FieldID, field.TypeInt))
	id, ok := fvuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "FirmwareVersion.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := fvuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, firmwareversion.FieldID)
		for _, f := range fields {
			if !firmwareversion.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != firmwareversion.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := fvuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fvuo.mutation.Version(); ok {
		_spec.SetField(firmwareversion.FieldVersion, field.TypeString, value)
	}
	if value, ok := fvuo.mutation.ReleaseDate(); ok {
		_spec.SetField(firmwareversion.FieldReleaseDate, field.TypeTime, value)
	}
	if value, ok := fvuo.mutation.Remark(); ok {
		_spec.SetField(firmwareversion.FieldRemark, field.TypeString, value)
	}
	if fvuo.mutation.RemarkCleared() {
		_spec.ClearField(firmwareversion.FieldRemark, field.TypeString)
	}
	if value, ok := fvuo.mutation.CreatedAt(); ok {
		_spec.SetField(firmwareversion.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := fvuo.mutation.UpdatedAt(); ok {
		_spec.SetField(firmwareversion.FieldUpdatedAt, field.TypeTime, value)
	}
	if fvuo.mutation.SoftwareVersionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   firmwareversion.SoftwareVersionsTable,
			Columns: firmwareversion.SoftwareVersionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(softwareversion.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fvuo.mutation.RemovedSoftwareVersionsIDs(); len(nodes) > 0 && !fvuo.mutation.SoftwareVersionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   firmwareversion.SoftwareVersionsTable,
			Columns: firmwareversion.SoftwareVersionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(softwareversion.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fvuo.mutation.SoftwareVersionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   firmwareversion.SoftwareVersionsTable,
			Columns: firmwareversion.SoftwareVersionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(softwareversion.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fvuo.mutation.ProductCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   firmwareversion.ProductTable,
			Columns: []string{firmwareversion.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fvuo.mutation.ProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   firmwareversion.ProductTable,
			Columns: []string{firmwareversion.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fvuo.mutation.CreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   firmwareversion.CreatorTable,
			Columns: []string{firmwareversion.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fvuo.mutation.CreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   firmwareversion.CreatorTable,
			Columns: []string{firmwareversion.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &FirmwareVersion{config: fvuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fvuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{firmwareversion.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	fvuo.mutation.done = true
	return _node, nil
}
