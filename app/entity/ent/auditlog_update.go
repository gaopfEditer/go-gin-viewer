// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"cambridge-hit.com/gin-base/activateserver/app/entity/ent/auditlog"
	"cambridge-hit.com/gin-base/activateserver/app/entity/ent/predicate"
	"cambridge-hit.com/gin-base/activateserver/app/entity/ent/product"
	"cambridge-hit.com/gin-base/activateserver/app/entity/ent/user"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AuditLogUpdate is the builder for updating AuditLog entities.
type AuditLogUpdate struct {
	config
	hooks    []Hook
	mutation *AuditLogMutation
}

// Where appends a list predicates to the AuditLogUpdate builder.
func (alu *AuditLogUpdate) Where(ps ...predicate.AuditLog) *AuditLogUpdate {
	alu.mutation.Where(ps...)
	return alu
}

// SetOperatorID sets the "operator_id" field.
func (alu *AuditLogUpdate) SetOperatorID(i int) *AuditLogUpdate {
	alu.mutation.SetOperatorID(i)
	return alu
}

// SetModule sets the "module" field.
func (alu *AuditLogUpdate) SetModule(s string) *AuditLogUpdate {
	alu.mutation.SetModule(s)
	return alu
}

// SetActionType sets the "action_type" field.
func (alu *AuditLogUpdate) SetActionType(s string) *AuditLogUpdate {
	alu.mutation.SetActionType(s)
	return alu
}

// SetProductID sets the "product_id" field.
func (alu *AuditLogUpdate) SetProductID(i int) *AuditLogUpdate {
	alu.mutation.SetProductID(i)
	return alu
}

// SetNillableProductID sets the "product_id" field if the given value is not nil.
func (alu *AuditLogUpdate) SetNillableProductID(i *int) *AuditLogUpdate {
	if i != nil {
		alu.SetProductID(*i)
	}
	return alu
}

// ClearProductID clears the value of the "product_id" field.
func (alu *AuditLogUpdate) ClearProductID() *AuditLogUpdate {
	alu.mutation.ClearProductID()
	return alu
}

// SetDetails sets the "details" field.
func (alu *AuditLogUpdate) SetDetails(s string) *AuditLogUpdate {
	alu.mutation.SetDetails(s)
	return alu
}

// SetNillableDetails sets the "details" field if the given value is not nil.
func (alu *AuditLogUpdate) SetNillableDetails(s *string) *AuditLogUpdate {
	if s != nil {
		alu.SetDetails(*s)
	}
	return alu
}

// ClearDetails clears the value of the "details" field.
func (alu *AuditLogUpdate) ClearDetails() *AuditLogUpdate {
	alu.mutation.ClearDetails()
	return alu
}

// SetIPAddress sets the "ip_address" field.
func (alu *AuditLogUpdate) SetIPAddress(s string) *AuditLogUpdate {
	alu.mutation.SetIPAddress(s)
	return alu
}

// SetNillableIPAddress sets the "ip_address" field if the given value is not nil.
func (alu *AuditLogUpdate) SetNillableIPAddress(s *string) *AuditLogUpdate {
	if s != nil {
		alu.SetIPAddress(*s)
	}
	return alu
}

// ClearIPAddress clears the value of the "ip_address" field.
func (alu *AuditLogUpdate) ClearIPAddress() *AuditLogUpdate {
	alu.mutation.ClearIPAddress()
	return alu
}

// SetOperator sets the "operator" edge to the User entity.
func (alu *AuditLogUpdate) SetOperator(u *User) *AuditLogUpdate {
	return alu.SetOperatorID(u.ID)
}

// SetProduct sets the "product" edge to the Product entity.
func (alu *AuditLogUpdate) SetProduct(p *Product) *AuditLogUpdate {
	return alu.SetProductID(p.ID)
}

// Mutation returns the AuditLogMutation object of the builder.
func (alu *AuditLogUpdate) Mutation() *AuditLogMutation {
	return alu.mutation
}

// ClearOperator clears the "operator" edge to the User entity.
func (alu *AuditLogUpdate) ClearOperator() *AuditLogUpdate {
	alu.mutation.ClearOperator()
	return alu
}

// ClearProduct clears the "product" edge to the Product entity.
func (alu *AuditLogUpdate) ClearProduct() *AuditLogUpdate {
	alu.mutation.ClearProduct()
	return alu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (alu *AuditLogUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, alu.sqlSave, alu.mutation, alu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (alu *AuditLogUpdate) SaveX(ctx context.Context) int {
	affected, err := alu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (alu *AuditLogUpdate) Exec(ctx context.Context) error {
	_, err := alu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (alu *AuditLogUpdate) ExecX(ctx context.Context) {
	if err := alu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (alu *AuditLogUpdate) check() error {
	if v, ok := alu.mutation.Module(); ok {
		if err := auditlog.ModuleValidator(v); err != nil {
			return &ValidationError{Name: "module", err: fmt.Errorf(`ent: validator failed for field "AuditLog.module": %w`, err)}
		}
	}
	if v, ok := alu.mutation.ActionType(); ok {
		if err := auditlog.ActionTypeValidator(v); err != nil {
			return &ValidationError{Name: "action_type", err: fmt.Errorf(`ent: validator failed for field "AuditLog.action_type": %w`, err)}
		}
	}
	if _, ok := alu.mutation.OperatorID(); alu.mutation.OperatorCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "AuditLog.operator"`)
	}
	return nil
}

func (alu *AuditLogUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := alu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(auditlog.Table, auditlog.Columns, sqlgraph.NewFieldSpec(auditlog.FieldID, field.TypeInt))
	if ps := alu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := alu.mutation.Module(); ok {
		_spec.SetField(auditlog.FieldModule, field.TypeString, value)
	}
	if value, ok := alu.mutation.ActionType(); ok {
		_spec.SetField(auditlog.FieldActionType, field.TypeString, value)
	}
	if value, ok := alu.mutation.Details(); ok {
		_spec.SetField(auditlog.FieldDetails, field.TypeString, value)
	}
	if alu.mutation.DetailsCleared() {
		_spec.ClearField(auditlog.FieldDetails, field.TypeString)
	}
	if value, ok := alu.mutation.IPAddress(); ok {
		_spec.SetField(auditlog.FieldIPAddress, field.TypeString, value)
	}
	if alu.mutation.IPAddressCleared() {
		_spec.ClearField(auditlog.FieldIPAddress, field.TypeString)
	}
	if alu.mutation.OperatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   auditlog.OperatorTable,
			Columns: []string{auditlog.OperatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := alu.mutation.OperatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   auditlog.OperatorTable,
			Columns: []string{auditlog.OperatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if alu.mutation.ProductCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   auditlog.ProductTable,
			Columns: []string{auditlog.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := alu.mutation.ProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   auditlog.ProductTable,
			Columns: []string{auditlog.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, alu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{auditlog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	alu.mutation.done = true
	return n, nil
}

// AuditLogUpdateOne is the builder for updating a single AuditLog entity.
type AuditLogUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AuditLogMutation
}

// SetOperatorID sets the "operator_id" field.
func (aluo *AuditLogUpdateOne) SetOperatorID(i int) *AuditLogUpdateOne {
	aluo.mutation.SetOperatorID(i)
	return aluo
}

// SetModule sets the "module" field.
func (aluo *AuditLogUpdateOne) SetModule(s string) *AuditLogUpdateOne {
	aluo.mutation.SetModule(s)
	return aluo
}

// SetActionType sets the "action_type" field.
func (aluo *AuditLogUpdateOne) SetActionType(s string) *AuditLogUpdateOne {
	aluo.mutation.SetActionType(s)
	return aluo
}

// SetProductID sets the "product_id" field.
func (aluo *AuditLogUpdateOne) SetProductID(i int) *AuditLogUpdateOne {
	aluo.mutation.SetProductID(i)
	return aluo
}

// SetNillableProductID sets the "product_id" field if the given value is not nil.
func (aluo *AuditLogUpdateOne) SetNillableProductID(i *int) *AuditLogUpdateOne {
	if i != nil {
		aluo.SetProductID(*i)
	}
	return aluo
}

// ClearProductID clears the value of the "product_id" field.
func (aluo *AuditLogUpdateOne) ClearProductID() *AuditLogUpdateOne {
	aluo.mutation.ClearProductID()
	return aluo
}

// SetDetails sets the "details" field.
func (aluo *AuditLogUpdateOne) SetDetails(s string) *AuditLogUpdateOne {
	aluo.mutation.SetDetails(s)
	return aluo
}

// SetNillableDetails sets the "details" field if the given value is not nil.
func (aluo *AuditLogUpdateOne) SetNillableDetails(s *string) *AuditLogUpdateOne {
	if s != nil {
		aluo.SetDetails(*s)
	}
	return aluo
}

// ClearDetails clears the value of the "details" field.
func (aluo *AuditLogUpdateOne) ClearDetails() *AuditLogUpdateOne {
	aluo.mutation.ClearDetails()
	return aluo
}

// SetIPAddress sets the "ip_address" field.
func (aluo *AuditLogUpdateOne) SetIPAddress(s string) *AuditLogUpdateOne {
	aluo.mutation.SetIPAddress(s)
	return aluo
}

// SetNillableIPAddress sets the "ip_address" field if the given value is not nil.
func (aluo *AuditLogUpdateOne) SetNillableIPAddress(s *string) *AuditLogUpdateOne {
	if s != nil {
		aluo.SetIPAddress(*s)
	}
	return aluo
}

// ClearIPAddress clears the value of the "ip_address" field.
func (aluo *AuditLogUpdateOne) ClearIPAddress() *AuditLogUpdateOne {
	aluo.mutation.ClearIPAddress()
	return aluo
}

// SetOperator sets the "operator" edge to the User entity.
func (aluo *AuditLogUpdateOne) SetOperator(u *User) *AuditLogUpdateOne {
	return aluo.SetOperatorID(u.ID)
}

// SetProduct sets the "product" edge to the Product entity.
func (aluo *AuditLogUpdateOne) SetProduct(p *Product) *AuditLogUpdateOne {
	return aluo.SetProductID(p.ID)
}

// Mutation returns the AuditLogMutation object of the builder.
func (aluo *AuditLogUpdateOne) Mutation() *AuditLogMutation {
	return aluo.mutation
}

// ClearOperator clears the "operator" edge to the User entity.
func (aluo *AuditLogUpdateOne) ClearOperator() *AuditLogUpdateOne {
	aluo.mutation.ClearOperator()
	return aluo
}

// ClearProduct clears the "product" edge to the Product entity.
func (aluo *AuditLogUpdateOne) ClearProduct() *AuditLogUpdateOne {
	aluo.mutation.ClearProduct()
	return aluo
}

// Where appends a list predicates to the AuditLogUpdate builder.
func (aluo *AuditLogUpdateOne) Where(ps ...predicate.AuditLog) *AuditLogUpdateOne {
	aluo.mutation.Where(ps...)
	return aluo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (aluo *AuditLogUpdateOne) Select(field string, fields ...string) *AuditLogUpdateOne {
	aluo.fields = append([]string{field}, fields...)
	return aluo
}

// Save executes the query and returns the updated AuditLog entity.
func (aluo *AuditLogUpdateOne) Save(ctx context.Context) (*AuditLog, error) {
	return withHooks(ctx, aluo.sqlSave, aluo.mutation, aluo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (aluo *AuditLogUpdateOne) SaveX(ctx context.Context) *AuditLog {
	node, err := aluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (aluo *AuditLogUpdateOne) Exec(ctx context.Context) error {
	_, err := aluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aluo *AuditLogUpdateOne) ExecX(ctx context.Context) {
	if err := aluo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (aluo *AuditLogUpdateOne) check() error {
	if v, ok := aluo.mutation.Module(); ok {
		if err := auditlog.ModuleValidator(v); err != nil {
			return &ValidationError{Name: "module", err: fmt.Errorf(`ent: validator failed for field "AuditLog.module": %w`, err)}
		}
	}
	if v, ok := aluo.mutation.ActionType(); ok {
		if err := auditlog.ActionTypeValidator(v); err != nil {
			return &ValidationError{Name: "action_type", err: fmt.Errorf(`ent: validator failed for field "AuditLog.action_type": %w`, err)}
		}
	}
	if _, ok := aluo.mutation.OperatorID(); aluo.mutation.OperatorCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "AuditLog.operator"`)
	}
	return nil
}

func (aluo *AuditLogUpdateOne) sqlSave(ctx context.Context) (_node *AuditLog, err error) {
	if err := aluo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(auditlog.Table, auditlog.Columns, sqlgraph.NewFieldSpec(auditlog.FieldID, field.TypeInt))
	id, ok := aluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AuditLog.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := aluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, auditlog.FieldID)
		for _, f := range fields {
			if !auditlog.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != auditlog.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := aluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aluo.mutation.Module(); ok {
		_spec.SetField(auditlog.FieldModule, field.TypeString, value)
	}
	if value, ok := aluo.mutation.ActionType(); ok {
		_spec.SetField(auditlog.FieldActionType, field.TypeString, value)
	}
	if value, ok := aluo.mutation.Details(); ok {
		_spec.SetField(auditlog.FieldDetails, field.TypeString, value)
	}
	if aluo.mutation.DetailsCleared() {
		_spec.ClearField(auditlog.FieldDetails, field.TypeString)
	}
	if value, ok := aluo.mutation.IPAddress(); ok {
		_spec.SetField(auditlog.FieldIPAddress, field.TypeString, value)
	}
	if aluo.mutation.IPAddressCleared() {
		_spec.ClearField(auditlog.FieldIPAddress, field.TypeString)
	}
	if aluo.mutation.OperatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   auditlog.OperatorTable,
			Columns: []string{auditlog.OperatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aluo.mutation.OperatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   auditlog.OperatorTable,
			Columns: []string{auditlog.OperatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if aluo.mutation.ProductCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   auditlog.ProductTable,
			Columns: []string{auditlog.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aluo.mutation.ProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   auditlog.ProductTable,
			Columns: []string{auditlog.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &AuditLog{config: aluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, aluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{auditlog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	aluo.mutation.done = true
	return _node, nil
}
