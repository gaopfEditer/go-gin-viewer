// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"cambridge-hit.com/gin-base/activateserver/app/entity/ent/licensetype"
	"cambridge-hit.com/gin-base/activateserver/app/entity/ent/licensetypefeatures"
	"cambridge-hit.com/gin-base/activateserver/app/entity/ent/productfeature"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// LicenseTypeFeatures is the model entity for the LicenseTypeFeatures schema.
type LicenseTypeFeatures struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// 许可证类型ID
	LicenseTypeID int `json:"license_type_id,omitempty"`
	// 功能ID
	FeatureID int `json:"feature_id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the LicenseTypeFeaturesQuery when eager-loading is set.
	Edges        LicenseTypeFeaturesEdges `json:"edges"`
	selectValues sql.SelectValues
}

// LicenseTypeFeaturesEdges holds the relations/edges for other nodes in the graph.
type LicenseTypeFeaturesEdges struct {
	// LicenseType holds the value of the license_type edge.
	LicenseType *LicenseType `json:"license_type,omitempty"`
	// Feature holds the value of the feature edge.
	Feature *ProductFeature `json:"feature,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// LicenseTypeOrErr returns the LicenseType value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e LicenseTypeFeaturesEdges) LicenseTypeOrErr() (*LicenseType, error) {
	if e.loadedTypes[0] {
		if e.LicenseType == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: licensetype.Label}
		}
		return e.LicenseType, nil
	}
	return nil, &NotLoadedError{edge: "license_type"}
}

// FeatureOrErr returns the Feature value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e LicenseTypeFeaturesEdges) FeatureOrErr() (*ProductFeature, error) {
	if e.loadedTypes[1] {
		if e.Feature == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: productfeature.Label}
		}
		return e.Feature, nil
	}
	return nil, &NotLoadedError{edge: "feature"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*LicenseTypeFeatures) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case licensetypefeatures.FieldID, licensetypefeatures.FieldLicenseTypeID, licensetypefeatures.FieldFeatureID:
			values[i] = new(sql.NullInt64)
		case licensetypefeatures.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the LicenseTypeFeatures fields.
func (ltf *LicenseTypeFeatures) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case licensetypefeatures.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ltf.ID = int(value.Int64)
		case licensetypefeatures.FieldLicenseTypeID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field license_type_id", values[i])
			} else if value.Valid {
				ltf.LicenseTypeID = int(value.Int64)
			}
		case licensetypefeatures.FieldFeatureID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field feature_id", values[i])
			} else if value.Valid {
				ltf.FeatureID = int(value.Int64)
			}
		case licensetypefeatures.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ltf.CreatedAt = value.Time
			}
		default:
			ltf.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the LicenseTypeFeatures.
// This includes values selected through modifiers, order, etc.
func (ltf *LicenseTypeFeatures) Value(name string) (ent.Value, error) {
	return ltf.selectValues.Get(name)
}

// QueryLicenseType queries the "license_type" edge of the LicenseTypeFeatures entity.
func (ltf *LicenseTypeFeatures) QueryLicenseType() *LicenseTypeQuery {
	return NewLicenseTypeFeaturesClient(ltf.config).QueryLicenseType(ltf)
}

// QueryFeature queries the "feature" edge of the LicenseTypeFeatures entity.
func (ltf *LicenseTypeFeatures) QueryFeature() *ProductFeatureQuery {
	return NewLicenseTypeFeaturesClient(ltf.config).QueryFeature(ltf)
}

// Update returns a builder for updating this LicenseTypeFeatures.
// Note that you need to call LicenseTypeFeatures.Unwrap() before calling this method if this LicenseTypeFeatures
// was returned from a transaction, and the transaction was committed or rolled back.
func (ltf *LicenseTypeFeatures) Update() *LicenseTypeFeaturesUpdateOne {
	return NewLicenseTypeFeaturesClient(ltf.config).UpdateOne(ltf)
}

// Unwrap unwraps the LicenseTypeFeatures entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ltf *LicenseTypeFeatures) Unwrap() *LicenseTypeFeatures {
	_tx, ok := ltf.config.driver.(*txDriver)
	if !ok {
		panic("ent: LicenseTypeFeatures is not a transactional entity")
	}
	ltf.config.driver = _tx.drv
	return ltf
}

// String implements the fmt.Stringer.
func (ltf *LicenseTypeFeatures) String() string {
	var builder strings.Builder
	builder.WriteString("LicenseTypeFeatures(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ltf.ID))
	builder.WriteString("license_type_id=")
	builder.WriteString(fmt.Sprintf("%v", ltf.LicenseTypeID))
	builder.WriteString(", ")
	builder.WriteString("feature_id=")
	builder.WriteString(fmt.Sprintf("%v", ltf.FeatureID))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(ltf.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// LicenseTypeFeaturesSlice is a parsable slice of LicenseTypeFeatures.
type LicenseTypeFeaturesSlice []*LicenseTypeFeatures
