// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"cambridge-hit.com/gin-base/activateserver/app/entity/ent/product"
	"cambridge-hit.com/gin-base/activateserver/app/entity/ent/productfeature"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// ProductFeature is the model entity for the ProductFeature schema.
type ProductFeature struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// 功能名称
	FeatureName string `json:"feature_name,omitempty"`
	// 功能编码
	FeatureCode string `json:"feature_code,omitempty"`
	// 所属产品ID
	ProductID int `json:"product_id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ProductFeatureQuery when eager-loading is set.
	Edges        ProductFeatureEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ProductFeatureEdges holds the relations/edges for other nodes in the graph.
type ProductFeatureEdges struct {
	// Product holds the value of the product edge.
	Product *Product `json:"product,omitempty"`
	// LicenseTypes holds the value of the license_types edge.
	LicenseTypes []*LicenseType `json:"license_types,omitempty"`
	// SoftwareVersions holds the value of the software_versions edge.
	SoftwareVersions []*SoftwareVersion `json:"software_versions,omitempty"`
	// LicenseTypeFeatures holds the value of the license_type_features edge.
	LicenseTypeFeatures []*LicenseTypeFeatures `json:"license_type_features,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// ProductOrErr returns the Product value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProductFeatureEdges) ProductOrErr() (*Product, error) {
	if e.loadedTypes[0] {
		if e.Product == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: product.Label}
		}
		return e.Product, nil
	}
	return nil, &NotLoadedError{edge: "product"}
}

// LicenseTypesOrErr returns the LicenseTypes value or an error if the edge
// was not loaded in eager-loading.
func (e ProductFeatureEdges) LicenseTypesOrErr() ([]*LicenseType, error) {
	if e.loadedTypes[1] {
		return e.LicenseTypes, nil
	}
	return nil, &NotLoadedError{edge: "license_types"}
}

// SoftwareVersionsOrErr returns the SoftwareVersions value or an error if the edge
// was not loaded in eager-loading.
func (e ProductFeatureEdges) SoftwareVersionsOrErr() ([]*SoftwareVersion, error) {
	if e.loadedTypes[2] {
		return e.SoftwareVersions, nil
	}
	return nil, &NotLoadedError{edge: "software_versions"}
}

// LicenseTypeFeaturesOrErr returns the LicenseTypeFeatures value or an error if the edge
// was not loaded in eager-loading.
func (e ProductFeatureEdges) LicenseTypeFeaturesOrErr() ([]*LicenseTypeFeatures, error) {
	if e.loadedTypes[3] {
		return e.LicenseTypeFeatures, nil
	}
	return nil, &NotLoadedError{edge: "license_type_features"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ProductFeature) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case productfeature.FieldID, productfeature.FieldProductID:
			values[i] = new(sql.NullInt64)
		case productfeature.FieldFeatureName, productfeature.FieldFeatureCode:
			values[i] = new(sql.NullString)
		case productfeature.FieldCreatedAt, productfeature.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ProductFeature fields.
func (pf *ProductFeature) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case productfeature.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pf.ID = int(value.Int64)
		case productfeature.FieldFeatureName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field feature_name", values[i])
			} else if value.Valid {
				pf.FeatureName = value.String
			}
		case productfeature.FieldFeatureCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field feature_code", values[i])
			} else if value.Valid {
				pf.FeatureCode = value.String
			}
		case productfeature.FieldProductID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field product_id", values[i])
			} else if value.Valid {
				pf.ProductID = int(value.Int64)
			}
		case productfeature.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pf.CreatedAt = value.Time
			}
		case productfeature.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				pf.UpdatedAt = value.Time
			}
		default:
			pf.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ProductFeature.
// This includes values selected through modifiers, order, etc.
func (pf *ProductFeature) Value(name string) (ent.Value, error) {
	return pf.selectValues.Get(name)
}

// QueryProduct queries the "product" edge of the ProductFeature entity.
func (pf *ProductFeature) QueryProduct() *ProductQuery {
	return NewProductFeatureClient(pf.config).QueryProduct(pf)
}

// QueryLicenseTypes queries the "license_types" edge of the ProductFeature entity.
func (pf *ProductFeature) QueryLicenseTypes() *LicenseTypeQuery {
	return NewProductFeatureClient(pf.config).QueryLicenseTypes(pf)
}

// QuerySoftwareVersions queries the "software_versions" edge of the ProductFeature entity.
func (pf *ProductFeature) QuerySoftwareVersions() *SoftwareVersionQuery {
	return NewProductFeatureClient(pf.config).QuerySoftwareVersions(pf)
}

// QueryLicenseTypeFeatures queries the "license_type_features" edge of the ProductFeature entity.
func (pf *ProductFeature) QueryLicenseTypeFeatures() *LicenseTypeFeaturesQuery {
	return NewProductFeatureClient(pf.config).QueryLicenseTypeFeatures(pf)
}

// Update returns a builder for updating this ProductFeature.
// Note that you need to call ProductFeature.Unwrap() before calling this method if this ProductFeature
// was returned from a transaction, and the transaction was committed or rolled back.
func (pf *ProductFeature) Update() *ProductFeatureUpdateOne {
	return NewProductFeatureClient(pf.config).UpdateOne(pf)
}

// Unwrap unwraps the ProductFeature entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pf *ProductFeature) Unwrap() *ProductFeature {
	_tx, ok := pf.config.driver.(*txDriver)
	if !ok {
		panic("ent: ProductFeature is not a transactional entity")
	}
	pf.config.driver = _tx.drv
	return pf
}

// String implements the fmt.Stringer.
func (pf *ProductFeature) String() string {
	var builder strings.Builder
	builder.WriteString("ProductFeature(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pf.ID))
	builder.WriteString("feature_name=")
	builder.WriteString(pf.FeatureName)
	builder.WriteString(", ")
	builder.WriteString("feature_code=")
	builder.WriteString(pf.FeatureCode)
	builder.WriteString(", ")
	builder.WriteString("product_id=")
	builder.WriteString(fmt.Sprintf("%v", pf.ProductID))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(pf.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(pf.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// ProductFeatures is a parsable slice of ProductFeature.
type ProductFeatures []*ProductFeature
