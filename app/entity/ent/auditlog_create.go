// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"cambridge-hit.com/gin-base/activateserver/app/entity/ent/auditlog"
	"cambridge-hit.com/gin-base/activateserver/app/entity/ent/product"
	"cambridge-hit.com/gin-base/activateserver/app/entity/ent/user"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AuditLogCreate is the builder for creating a AuditLog entity.
type AuditLogCreate struct {
	config
	mutation *AuditLogMutation
	hooks    []Hook
}

// SetOperatorID sets the "operator_id" field.
func (alc *AuditLogCreate) SetOperatorID(i int) *AuditLogCreate {
	alc.mutation.SetOperatorID(i)
	return alc
}

// SetModule sets the "module" field.
func (alc *AuditLogCreate) SetModule(s string) *AuditLogCreate {
	alc.mutation.SetModule(s)
	return alc
}

// SetActionType sets the "action_type" field.
func (alc *AuditLogCreate) SetActionType(s string) *AuditLogCreate {
	alc.mutation.SetActionType(s)
	return alc
}

// SetProductID sets the "product_id" field.
func (alc *AuditLogCreate) SetProductID(i int) *AuditLogCreate {
	alc.mutation.SetProductID(i)
	return alc
}

// SetNillableProductID sets the "product_id" field if the given value is not nil.
func (alc *AuditLogCreate) SetNillableProductID(i *int) *AuditLogCreate {
	if i != nil {
		alc.SetProductID(*i)
	}
	return alc
}

// SetDetails sets the "details" field.
func (alc *AuditLogCreate) SetDetails(s string) *AuditLogCreate {
	alc.mutation.SetDetails(s)
	return alc
}

// SetNillableDetails sets the "details" field if the given value is not nil.
func (alc *AuditLogCreate) SetNillableDetails(s *string) *AuditLogCreate {
	if s != nil {
		alc.SetDetails(*s)
	}
	return alc
}

// SetIPAddress sets the "ip_address" field.
func (alc *AuditLogCreate) SetIPAddress(s string) *AuditLogCreate {
	alc.mutation.SetIPAddress(s)
	return alc
}

// SetNillableIPAddress sets the "ip_address" field if the given value is not nil.
func (alc *AuditLogCreate) SetNillableIPAddress(s *string) *AuditLogCreate {
	if s != nil {
		alc.SetIPAddress(*s)
	}
	return alc
}

// SetCreatedAt sets the "created_at" field.
func (alc *AuditLogCreate) SetCreatedAt(t time.Time) *AuditLogCreate {
	alc.mutation.SetCreatedAt(t)
	return alc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (alc *AuditLogCreate) SetNillableCreatedAt(t *time.Time) *AuditLogCreate {
	if t != nil {
		alc.SetCreatedAt(*t)
	}
	return alc
}

// SetID sets the "id" field.
func (alc *AuditLogCreate) SetID(i int) *AuditLogCreate {
	alc.mutation.SetID(i)
	return alc
}

// SetOperator sets the "operator" edge to the User entity.
func (alc *AuditLogCreate) SetOperator(u *User) *AuditLogCreate {
	return alc.SetOperatorID(u.ID)
}

// SetProduct sets the "product" edge to the Product entity.
func (alc *AuditLogCreate) SetProduct(p *Product) *AuditLogCreate {
	return alc.SetProductID(p.ID)
}

// Mutation returns the AuditLogMutation object of the builder.
func (alc *AuditLogCreate) Mutation() *AuditLogMutation {
	return alc.mutation
}

// Save creates the AuditLog in the database.
func (alc *AuditLogCreate) Save(ctx context.Context) (*AuditLog, error) {
	alc.defaults()
	return withHooks(ctx, alc.sqlSave, alc.mutation, alc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (alc *AuditLogCreate) SaveX(ctx context.Context) *AuditLog {
	v, err := alc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (alc *AuditLogCreate) Exec(ctx context.Context) error {
	_, err := alc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (alc *AuditLogCreate) ExecX(ctx context.Context) {
	if err := alc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (alc *AuditLogCreate) defaults() {
	if _, ok := alc.mutation.CreatedAt(); !ok {
		v := auditlog.DefaultCreatedAt()
		alc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (alc *AuditLogCreate) check() error {
	if _, ok := alc.mutation.OperatorID(); !ok {
		return &ValidationError{Name: "operator_id", err: errors.New(`ent: missing required field "AuditLog.operator_id"`)}
	}
	if _, ok := alc.mutation.Module(); !ok {
		return &ValidationError{Name: "module", err: errors.New(`ent: missing required field "AuditLog.module"`)}
	}
	if v, ok := alc.mutation.Module(); ok {
		if err := auditlog.ModuleValidator(v); err != nil {
			return &ValidationError{Name: "module", err: fmt.Errorf(`ent: validator failed for field "AuditLog.module": %w`, err)}
		}
	}
	if _, ok := alc.mutation.ActionType(); !ok {
		return &ValidationError{Name: "action_type", err: errors.New(`ent: missing required field "AuditLog.action_type"`)}
	}
	if v, ok := alc.mutation.ActionType(); ok {
		if err := auditlog.ActionTypeValidator(v); err != nil {
			return &ValidationError{Name: "action_type", err: fmt.Errorf(`ent: validator failed for field "AuditLog.action_type": %w`, err)}
		}
	}
	if _, ok := alc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "AuditLog.created_at"`)}
	}
	if v, ok := alc.mutation.ID(); ok {
		if err := auditlog.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "AuditLog.id": %w`, err)}
		}
	}
	if _, ok := alc.mutation.OperatorID(); !ok {
		return &ValidationError{Name: "operator", err: errors.New(`ent: missing required edge "AuditLog.operator"`)}
	}
	return nil
}

func (alc *AuditLogCreate) sqlSave(ctx context.Context) (*AuditLog, error) {
	if err := alc.check(); err != nil {
		return nil, err
	}
	_node, _spec := alc.createSpec()
	if err := sqlgraph.CreateNode(ctx, alc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	alc.mutation.id = &_node.ID
	alc.mutation.done = true
	return _node, nil
}

func (alc *AuditLogCreate) createSpec() (*AuditLog, *sqlgraph.CreateSpec) {
	var (
		_node = &AuditLog{config: alc.config}
		_spec = sqlgraph.NewCreateSpec(auditlog.Table, sqlgraph.NewFieldSpec(auditlog.FieldID, field.TypeInt))
	)
	if id, ok := alc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := alc.mutation.Module(); ok {
		_spec.SetField(auditlog.FieldModule, field.TypeString, value)
		_node.Module = value
	}
	if value, ok := alc.mutation.ActionType(); ok {
		_spec.SetField(auditlog.FieldActionType, field.TypeString, value)
		_node.ActionType = value
	}
	if value, ok := alc.mutation.Details(); ok {
		_spec.SetField(auditlog.FieldDetails, field.TypeString, value)
		_node.Details = value
	}
	if value, ok := alc.mutation.IPAddress(); ok {
		_spec.SetField(auditlog.FieldIPAddress, field.TypeString, value)
		_node.IPAddress = value
	}
	if value, ok := alc.mutation.CreatedAt(); ok {
		_spec.SetField(auditlog.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := alc.mutation.OperatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   auditlog.OperatorTable,
			Columns: []string{auditlog.OperatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OperatorID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := alc.mutation.ProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   auditlog.ProductTable,
			Columns: []string{auditlog.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ProductID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// AuditLogCreateBulk is the builder for creating many AuditLog entities in bulk.
type AuditLogCreateBulk struct {
	config
	err      error
	builders []*AuditLogCreate
}

// Save creates the AuditLog entities in the database.
func (alcb *AuditLogCreateBulk) Save(ctx context.Context) ([]*AuditLog, error) {
	if alcb.err != nil {
		return nil, alcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(alcb.builders))
	nodes := make([]*AuditLog, len(alcb.builders))
	mutators := make([]Mutator, len(alcb.builders))
	for i := range alcb.builders {
		func(i int, root context.Context) {
			builder := alcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AuditLogMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, alcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, alcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, alcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (alcb *AuditLogCreateBulk) SaveX(ctx context.Context) []*AuditLog {
	v, err := alcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (alcb *AuditLogCreateBulk) Exec(ctx context.Context) error {
	_, err := alcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (alcb *AuditLogCreateBulk) ExecX(ctx context.Context) {
	if err := alcb.Exec(ctx); err != nil {
		panic(err)
	}
}
