// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"cambridge-hit.com/gin-base/activateserver/app/entity/ent/licensetype"
	"cambridge-hit.com/gin-base/activateserver/app/entity/ent/licensetypefeatures"
	"cambridge-hit.com/gin-base/activateserver/app/entity/ent/predicate"
	"cambridge-hit.com/gin-base/activateserver/app/entity/ent/productfeature"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// LicenseTypeFeaturesUpdate is the builder for updating LicenseTypeFeatures entities.
type LicenseTypeFeaturesUpdate struct {
	config
	hooks    []Hook
	mutation *LicenseTypeFeaturesMutation
}

// Where appends a list predicates to the LicenseTypeFeaturesUpdate builder.
func (ltfu *LicenseTypeFeaturesUpdate) Where(ps ...predicate.LicenseTypeFeatures) *LicenseTypeFeaturesUpdate {
	ltfu.mutation.Where(ps...)
	return ltfu
}

// SetLicenseTypeID sets the "license_type_id" field.
func (ltfu *LicenseTypeFeaturesUpdate) SetLicenseTypeID(i int) *LicenseTypeFeaturesUpdate {
	ltfu.mutation.SetLicenseTypeID(i)
	return ltfu
}

// SetFeatureID sets the "feature_id" field.
func (ltfu *LicenseTypeFeaturesUpdate) SetFeatureID(i int) *LicenseTypeFeaturesUpdate {
	ltfu.mutation.SetFeatureID(i)
	return ltfu
}

// SetLicenseType sets the "license_type" edge to the LicenseType entity.
func (ltfu *LicenseTypeFeaturesUpdate) SetLicenseType(l *LicenseType) *LicenseTypeFeaturesUpdate {
	return ltfu.SetLicenseTypeID(l.ID)
}

// SetFeature sets the "feature" edge to the ProductFeature entity.
func (ltfu *LicenseTypeFeaturesUpdate) SetFeature(p *ProductFeature) *LicenseTypeFeaturesUpdate {
	return ltfu.SetFeatureID(p.ID)
}

// Mutation returns the LicenseTypeFeaturesMutation object of the builder.
func (ltfu *LicenseTypeFeaturesUpdate) Mutation() *LicenseTypeFeaturesMutation {
	return ltfu.mutation
}

// ClearLicenseType clears the "license_type" edge to the LicenseType entity.
func (ltfu *LicenseTypeFeaturesUpdate) ClearLicenseType() *LicenseTypeFeaturesUpdate {
	ltfu.mutation.ClearLicenseType()
	return ltfu
}

// ClearFeature clears the "feature" edge to the ProductFeature entity.
func (ltfu *LicenseTypeFeaturesUpdate) ClearFeature() *LicenseTypeFeaturesUpdate {
	ltfu.mutation.ClearFeature()
	return ltfu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ltfu *LicenseTypeFeaturesUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ltfu.sqlSave, ltfu.mutation, ltfu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ltfu *LicenseTypeFeaturesUpdate) SaveX(ctx context.Context) int {
	affected, err := ltfu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ltfu *LicenseTypeFeaturesUpdate) Exec(ctx context.Context) error {
	_, err := ltfu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ltfu *LicenseTypeFeaturesUpdate) ExecX(ctx context.Context) {
	if err := ltfu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ltfu *LicenseTypeFeaturesUpdate) check() error {
	if _, ok := ltfu.mutation.LicenseTypeID(); ltfu.mutation.LicenseTypeCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "LicenseTypeFeatures.license_type"`)
	}
	if _, ok := ltfu.mutation.FeatureID(); ltfu.mutation.FeatureCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "LicenseTypeFeatures.feature"`)
	}
	return nil
}

func (ltfu *LicenseTypeFeaturesUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ltfu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(licensetypefeatures.Table, licensetypefeatures.Columns, sqlgraph.NewFieldSpec(licensetypefeatures.FieldID, field.TypeInt))
	if ps := ltfu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if ltfu.mutation.LicenseTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   licensetypefeatures.LicenseTypeTable,
			Columns: []string{licensetypefeatures.LicenseTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(licensetype.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ltfu.mutation.LicenseTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   licensetypefeatures.LicenseTypeTable,
			Columns: []string{licensetypefeatures.LicenseTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(licensetype.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ltfu.mutation.FeatureCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   licensetypefeatures.FeatureTable,
			Columns: []string{licensetypefeatures.FeatureColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productfeature.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ltfu.mutation.FeatureIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   licensetypefeatures.FeatureTable,
			Columns: []string{licensetypefeatures.FeatureColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productfeature.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ltfu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{licensetypefeatures.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ltfu.mutation.done = true
	return n, nil
}

// LicenseTypeFeaturesUpdateOne is the builder for updating a single LicenseTypeFeatures entity.
type LicenseTypeFeaturesUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *LicenseTypeFeaturesMutation
}

// SetLicenseTypeID sets the "license_type_id" field.
func (ltfuo *LicenseTypeFeaturesUpdateOne) SetLicenseTypeID(i int) *LicenseTypeFeaturesUpdateOne {
	ltfuo.mutation.SetLicenseTypeID(i)
	return ltfuo
}

// SetFeatureID sets the "feature_id" field.
func (ltfuo *LicenseTypeFeaturesUpdateOne) SetFeatureID(i int) *LicenseTypeFeaturesUpdateOne {
	ltfuo.mutation.SetFeatureID(i)
	return ltfuo
}

// SetLicenseType sets the "license_type" edge to the LicenseType entity.
func (ltfuo *LicenseTypeFeaturesUpdateOne) SetLicenseType(l *LicenseType) *LicenseTypeFeaturesUpdateOne {
	return ltfuo.SetLicenseTypeID(l.ID)
}

// SetFeature sets the "feature" edge to the ProductFeature entity.
func (ltfuo *LicenseTypeFeaturesUpdateOne) SetFeature(p *ProductFeature) *LicenseTypeFeaturesUpdateOne {
	return ltfuo.SetFeatureID(p.ID)
}

// Mutation returns the LicenseTypeFeaturesMutation object of the builder.
func (ltfuo *LicenseTypeFeaturesUpdateOne) Mutation() *LicenseTypeFeaturesMutation {
	return ltfuo.mutation
}

// ClearLicenseType clears the "license_type" edge to the LicenseType entity.
func (ltfuo *LicenseTypeFeaturesUpdateOne) ClearLicenseType() *LicenseTypeFeaturesUpdateOne {
	ltfuo.mutation.ClearLicenseType()
	return ltfuo
}

// ClearFeature clears the "feature" edge to the ProductFeature entity.
func (ltfuo *LicenseTypeFeaturesUpdateOne) ClearFeature() *LicenseTypeFeaturesUpdateOne {
	ltfuo.mutation.ClearFeature()
	return ltfuo
}

// Where appends a list predicates to the LicenseTypeFeaturesUpdate builder.
func (ltfuo *LicenseTypeFeaturesUpdateOne) Where(ps ...predicate.LicenseTypeFeatures) *LicenseTypeFeaturesUpdateOne {
	ltfuo.mutation.Where(ps...)
	return ltfuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ltfuo *LicenseTypeFeaturesUpdateOne) Select(field string, fields ...string) *LicenseTypeFeaturesUpdateOne {
	ltfuo.fields = append([]string{field}, fields...)
	return ltfuo
}

// Save executes the query and returns the updated LicenseTypeFeatures entity.
func (ltfuo *LicenseTypeFeaturesUpdateOne) Save(ctx context.Context) (*LicenseTypeFeatures, error) {
	return withHooks(ctx, ltfuo.sqlSave, ltfuo.mutation, ltfuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ltfuo *LicenseTypeFeaturesUpdateOne) SaveX(ctx context.Context) *LicenseTypeFeatures {
	node, err := ltfuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ltfuo *LicenseTypeFeaturesUpdateOne) Exec(ctx context.Context) error {
	_, err := ltfuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ltfuo *LicenseTypeFeaturesUpdateOne) ExecX(ctx context.Context) {
	if err := ltfuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ltfuo *LicenseTypeFeaturesUpdateOne) check() error {
	if _, ok := ltfuo.mutation.LicenseTypeID(); ltfuo.mutation.LicenseTypeCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "LicenseTypeFeatures.license_type"`)
	}
	if _, ok := ltfuo.mutation.FeatureID(); ltfuo.mutation.FeatureCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "LicenseTypeFeatures.feature"`)
	}
	return nil
}

func (ltfuo *LicenseTypeFeaturesUpdateOne) sqlSave(ctx context.Context) (_node *LicenseTypeFeatures, err error) {
	if err := ltfuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(licensetypefeatures.Table, licensetypefeatures.Columns, sqlgraph.NewFieldSpec(licensetypefeatures.FieldID, field.TypeInt))
	id, ok := ltfuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "LicenseTypeFeatures.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ltfuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, licensetypefeatures.FieldID)
		for _, f := range fields {
			if !licensetypefeatures.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != licensetypefeatures.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ltfuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if ltfuo.mutation.LicenseTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   licensetypefeatures.LicenseTypeTable,
			Columns: []string{licensetypefeatures.LicenseTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(licensetype.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ltfuo.mutation.LicenseTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   licensetypefeatures.LicenseTypeTable,
			Columns: []string{licensetypefeatures.LicenseTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(licensetype.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ltfuo.mutation.FeatureCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   licensetypefeatures.FeatureTable,
			Columns: []string{licensetypefeatures.FeatureColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productfeature.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ltfuo.mutation.FeatureIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   licensetypefeatures.FeatureTable,
			Columns: []string{licensetypefeatures.FeatureColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productfeature.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &LicenseTypeFeatures{config: ltfuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ltfuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{licensetypefeatures.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ltfuo.mutation.done = true
	return _node, nil
}
