// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"cambridge-hit.com/gin-base/activateserver/app/entity/ent/firmwareversion"
	"cambridge-hit.com/gin-base/activateserver/app/entity/ent/predicate"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// FirmwareVersionDelete is the builder for deleting a FirmwareVersion entity.
type FirmwareVersionDelete struct {
	config
	hooks    []Hook
	mutation *FirmwareVersionMutation
}

// Where appends a list predicates to the FirmwareVersionDelete builder.
func (fvd *FirmwareVersionDelete) Where(ps ...predicate.FirmwareVersion) *FirmwareVersionDelete {
	fvd.mutation.Where(ps...)
	return fvd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (fvd *FirmwareVersionDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, fvd.sqlExec, fvd.mutation, fvd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (fvd *FirmwareVersionDelete) ExecX(ctx context.Context) int {
	n, err := fvd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (fvd *FirmwareVersionDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(firmwareversion.Table, sqlgraph.NewFieldSpec(firmwareversion.FieldID, field.TypeInt))
	if ps := fvd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, fvd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	fvd.mutation.done = true
	return affected, err
}

// FirmwareVersionDeleteOne is the builder for deleting a single FirmwareVersion entity.
type FirmwareVersionDeleteOne struct {
	fvd *FirmwareVersionDelete
}

// Where appends a list predicates to the FirmwareVersionDelete builder.
func (fvdo *FirmwareVersionDeleteOne) Where(ps ...predicate.FirmwareVersion) *FirmwareVersionDeleteOne {
	fvdo.fvd.mutation.Where(ps...)
	return fvdo
}

// Exec executes the deletion query.
func (fvdo *FirmwareVersionDeleteOne) Exec(ctx context.Context) error {
	n, err := fvdo.fvd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{firmwareversion.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (fvdo *FirmwareVersionDeleteOne) ExecX(ctx context.Context) {
	if err := fvdo.Exec(ctx); err != nil {
		panic(err)
	}
}
