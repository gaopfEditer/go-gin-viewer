// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"cambridge-hit.com/gin-base/activateserver/app/entity/ent/device"
	"cambridge-hit.com/gin-base/activateserver/app/entity/ent/licensetype"
	"cambridge-hit.com/gin-base/activateserver/app/entity/ent/licensetypefeatures"
	"cambridge-hit.com/gin-base/activateserver/app/entity/ent/product"
	"cambridge-hit.com/gin-base/activateserver/app/entity/ent/productfeature"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// LicenseTypeCreate is the builder for creating a LicenseType entity.
type LicenseTypeCreate struct {
	config
	mutation *LicenseTypeMutation
	hooks    []Hook
}

// SetTypeName sets the "type_name" field.
func (ltc *LicenseTypeCreate) SetTypeName(s string) *LicenseTypeCreate {
	ltc.mutation.SetTypeName(s)
	return ltc
}

// SetLicenseType sets the "license_type" field.
func (ltc *LicenseTypeCreate) SetLicenseType(s string) *LicenseTypeCreate {
	ltc.mutation.SetLicenseType(s)
	return ltc
}

// SetProductID sets the "product_id" field.
func (ltc *LicenseTypeCreate) SetProductID(i int) *LicenseTypeCreate {
	ltc.mutation.SetProductID(i)
	return ltc
}

// SetCreatedAt sets the "created_at" field.
func (ltc *LicenseTypeCreate) SetCreatedAt(t time.Time) *LicenseTypeCreate {
	ltc.mutation.SetCreatedAt(t)
	return ltc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ltc *LicenseTypeCreate) SetNillableCreatedAt(t *time.Time) *LicenseTypeCreate {
	if t != nil {
		ltc.SetCreatedAt(*t)
	}
	return ltc
}

// SetUpdatedAt sets the "updated_at" field.
func (ltc *LicenseTypeCreate) SetUpdatedAt(t time.Time) *LicenseTypeCreate {
	ltc.mutation.SetUpdatedAt(t)
	return ltc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ltc *LicenseTypeCreate) SetNillableUpdatedAt(t *time.Time) *LicenseTypeCreate {
	if t != nil {
		ltc.SetUpdatedAt(*t)
	}
	return ltc
}

// SetID sets the "id" field.
func (ltc *LicenseTypeCreate) SetID(i int) *LicenseTypeCreate {
	ltc.mutation.SetID(i)
	return ltc
}

// SetProduct sets the "product" edge to the Product entity.
func (ltc *LicenseTypeCreate) SetProduct(p *Product) *LicenseTypeCreate {
	return ltc.SetProductID(p.ID)
}

// AddFeatureIDs adds the "features" edge to the ProductFeature entity by IDs.
func (ltc *LicenseTypeCreate) AddFeatureIDs(ids ...int) *LicenseTypeCreate {
	ltc.mutation.AddFeatureIDs(ids...)
	return ltc
}

// AddFeatures adds the "features" edges to the ProductFeature entity.
func (ltc *LicenseTypeCreate) AddFeatures(p ...*ProductFeature) *LicenseTypeCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ltc.AddFeatureIDs(ids...)
}

// AddDeviceIDs adds the "devices" edge to the Device entity by IDs.
func (ltc *LicenseTypeCreate) AddDeviceIDs(ids ...int) *LicenseTypeCreate {
	ltc.mutation.AddDeviceIDs(ids...)
	return ltc
}

// AddDevices adds the "devices" edges to the Device entity.
func (ltc *LicenseTypeCreate) AddDevices(d ...*Device) *LicenseTypeCreate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return ltc.AddDeviceIDs(ids...)
}

// AddLicenseTypeFeatureIDs adds the "license_type_features" edge to the LicenseTypeFeatures entity by IDs.
func (ltc *LicenseTypeCreate) AddLicenseTypeFeatureIDs(ids ...int) *LicenseTypeCreate {
	ltc.mutation.AddLicenseTypeFeatureIDs(ids...)
	return ltc
}

// AddLicenseTypeFeatures adds the "license_type_features" edges to the LicenseTypeFeatures entity.
func (ltc *LicenseTypeCreate) AddLicenseTypeFeatures(l ...*LicenseTypeFeatures) *LicenseTypeCreate {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return ltc.AddLicenseTypeFeatureIDs(ids...)
}

// Mutation returns the LicenseTypeMutation object of the builder.
func (ltc *LicenseTypeCreate) Mutation() *LicenseTypeMutation {
	return ltc.mutation
}

// Save creates the LicenseType in the database.
func (ltc *LicenseTypeCreate) Save(ctx context.Context) (*LicenseType, error) {
	ltc.defaults()
	return withHooks(ctx, ltc.sqlSave, ltc.mutation, ltc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ltc *LicenseTypeCreate) SaveX(ctx context.Context) *LicenseType {
	v, err := ltc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ltc *LicenseTypeCreate) Exec(ctx context.Context) error {
	_, err := ltc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ltc *LicenseTypeCreate) ExecX(ctx context.Context) {
	if err := ltc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ltc *LicenseTypeCreate) defaults() {
	if _, ok := ltc.mutation.CreatedAt(); !ok {
		v := licensetype.DefaultCreatedAt()
		ltc.mutation.SetCreatedAt(v)
	}
	if _, ok := ltc.mutation.UpdatedAt(); !ok {
		v := licensetype.DefaultUpdatedAt()
		ltc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ltc *LicenseTypeCreate) check() error {
	if _, ok := ltc.mutation.TypeName(); !ok {
		return &ValidationError{Name: "type_name", err: errors.New(`ent: missing required field "LicenseType.type_name"`)}
	}
	if v, ok := ltc.mutation.TypeName(); ok {
		if err := licensetype.TypeNameValidator(v); err != nil {
			return &ValidationError{Name: "type_name", err: fmt.Errorf(`ent: validator failed for field "LicenseType.type_name": %w`, err)}
		}
	}
	if _, ok := ltc.mutation.LicenseType(); !ok {
		return &ValidationError{Name: "license_type", err: errors.New(`ent: missing required field "LicenseType.license_type"`)}
	}
	if v, ok := ltc.mutation.LicenseType(); ok {
		if err := licensetype.LicenseTypeValidator(v); err != nil {
			return &ValidationError{Name: "license_type", err: fmt.Errorf(`ent: validator failed for field "LicenseType.license_type": %w`, err)}
		}
	}
	if _, ok := ltc.mutation.ProductID(); !ok {
		return &ValidationError{Name: "product_id", err: errors.New(`ent: missing required field "LicenseType.product_id"`)}
	}
	if _, ok := ltc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "LicenseType.created_at"`)}
	}
	if _, ok := ltc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "LicenseType.updated_at"`)}
	}
	if v, ok := ltc.mutation.ID(); ok {
		if err := licensetype.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "LicenseType.id": %w`, err)}
		}
	}
	if _, ok := ltc.mutation.ProductID(); !ok {
		return &ValidationError{Name: "product", err: errors.New(`ent: missing required edge "LicenseType.product"`)}
	}
	return nil
}

func (ltc *LicenseTypeCreate) sqlSave(ctx context.Context) (*LicenseType, error) {
	if err := ltc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ltc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ltc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	ltc.mutation.id = &_node.ID
	ltc.mutation.done = true
	return _node, nil
}

func (ltc *LicenseTypeCreate) createSpec() (*LicenseType, *sqlgraph.CreateSpec) {
	var (
		_node = &LicenseType{config: ltc.config}
		_spec = sqlgraph.NewCreateSpec(licensetype.Table, sqlgraph.NewFieldSpec(licensetype.FieldID, field.TypeInt))
	)
	if id, ok := ltc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ltc.mutation.TypeName(); ok {
		_spec.SetField(licensetype.FieldTypeName, field.TypeString, value)
		_node.TypeName = value
	}
	if value, ok := ltc.mutation.LicenseType(); ok {
		_spec.SetField(licensetype.FieldLicenseType, field.TypeString, value)
		_node.LicenseType = value
	}
	if value, ok := ltc.mutation.CreatedAt(); ok {
		_spec.SetField(licensetype.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ltc.mutation.UpdatedAt(); ok {
		_spec.SetField(licensetype.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := ltc.mutation.ProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   licensetype.ProductTable,
			Columns: []string{licensetype.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ProductID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ltc.mutation.FeaturesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   licensetype.FeaturesTable,
			Columns: licensetype.FeaturesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productfeature.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &LicenseTypeFeaturesCreate{config: ltc.config, mutation: newLicenseTypeFeaturesMutation(ltc.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ltc.mutation.DevicesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   licensetype.DevicesTable,
			Columns: []string{licensetype.DevicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(device.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ltc.mutation.LicenseTypeFeaturesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   licensetype.LicenseTypeFeaturesTable,
			Columns: []string{licensetype.LicenseTypeFeaturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(licensetypefeatures.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// LicenseTypeCreateBulk is the builder for creating many LicenseType entities in bulk.
type LicenseTypeCreateBulk struct {
	config
	err      error
	builders []*LicenseTypeCreate
}

// Save creates the LicenseType entities in the database.
func (ltcb *LicenseTypeCreateBulk) Save(ctx context.Context) ([]*LicenseType, error) {
	if ltcb.err != nil {
		return nil, ltcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ltcb.builders))
	nodes := make([]*LicenseType, len(ltcb.builders))
	mutators := make([]Mutator, len(ltcb.builders))
	for i := range ltcb.builders {
		func(i int, root context.Context) {
			builder := ltcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*LicenseTypeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ltcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ltcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ltcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ltcb *LicenseTypeCreateBulk) SaveX(ctx context.Context) []*LicenseType {
	v, err := ltcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ltcb *LicenseTypeCreateBulk) Exec(ctx context.Context) error {
	_, err := ltcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ltcb *LicenseTypeCreateBulk) ExecX(ctx context.Context) {
	if err := ltcb.Exec(ctx); err != nil {
		panic(err)
	}
}
