// Code generated by ent, DO NOT EDIT.

package device

import (
	"time"

	"cambridge-hit.com/gin-base/activateserver/app/entity/ent/predicate"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Device {
	return predicate.Device(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Device {
	return predicate.Device(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Device {
	return predicate.Device(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Device {
	return predicate.Device(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Device {
	return predicate.Device(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Device {
	return predicate.Device(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Device {
	return predicate.Device(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Device {
	return predicate.Device(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Device {
	return predicate.Device(sql.FieldLTE(FieldID, id))
}

// Sn applies equality check predicate on the "sn" field. It's identical to SnEQ.
func Sn(v string) predicate.Device {
	return predicate.Device(sql.FieldEQ(FieldSn, v))
}

// ProductID applies equality check predicate on the "product_id" field. It's identical to ProductIDEQ.
func ProductID(v int) predicate.Device {
	return predicate.Device(sql.FieldEQ(FieldProductID, v))
}

// LicenseTypeID applies equality check predicate on the "license_type_id" field. It's identical to LicenseTypeIDEQ.
func LicenseTypeID(v int) predicate.Device {
	return predicate.Device(sql.FieldEQ(FieldLicenseTypeID, v))
}

// OemTag applies equality check predicate on the "oem_tag" field. It's identical to OemTagEQ.
func OemTag(v string) predicate.Device {
	return predicate.Device(sql.FieldEQ(FieldOemTag, v))
}

// Remark applies equality check predicate on the "remark" field. It's identical to RemarkEQ.
func Remark(v string) predicate.Device {
	return predicate.Device(sql.FieldEQ(FieldRemark, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Device {
	return predicate.Device(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedBy applies equality check predicate on the "created_by" field. It's identical to CreatedByEQ.
func CreatedBy(v int) predicate.Device {
	return predicate.Device(sql.FieldEQ(FieldCreatedBy, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Device {
	return predicate.Device(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedBy applies equality check predicate on the "updated_by" field. It's identical to UpdatedByEQ.
func UpdatedBy(v int) predicate.Device {
	return predicate.Device(sql.FieldEQ(FieldUpdatedBy, v))
}

// SnEQ applies the EQ predicate on the "sn" field.
func SnEQ(v string) predicate.Device {
	return predicate.Device(sql.FieldEQ(FieldSn, v))
}

// SnNEQ applies the NEQ predicate on the "sn" field.
func SnNEQ(v string) predicate.Device {
	return predicate.Device(sql.FieldNEQ(FieldSn, v))
}

// SnIn applies the In predicate on the "sn" field.
func SnIn(vs ...string) predicate.Device {
	return predicate.Device(sql.FieldIn(FieldSn, vs...))
}

// SnNotIn applies the NotIn predicate on the "sn" field.
func SnNotIn(vs ...string) predicate.Device {
	return predicate.Device(sql.FieldNotIn(FieldSn, vs...))
}

// SnGT applies the GT predicate on the "sn" field.
func SnGT(v string) predicate.Device {
	return predicate.Device(sql.FieldGT(FieldSn, v))
}

// SnGTE applies the GTE predicate on the "sn" field.
func SnGTE(v string) predicate.Device {
	return predicate.Device(sql.FieldGTE(FieldSn, v))
}

// SnLT applies the LT predicate on the "sn" field.
func SnLT(v string) predicate.Device {
	return predicate.Device(sql.FieldLT(FieldSn, v))
}

// SnLTE applies the LTE predicate on the "sn" field.
func SnLTE(v string) predicate.Device {
	return predicate.Device(sql.FieldLTE(FieldSn, v))
}

// SnContains applies the Contains predicate on the "sn" field.
func SnContains(v string) predicate.Device {
	return predicate.Device(sql.FieldContains(FieldSn, v))
}

// SnHasPrefix applies the HasPrefix predicate on the "sn" field.
func SnHasPrefix(v string) predicate.Device {
	return predicate.Device(sql.FieldHasPrefix(FieldSn, v))
}

// SnHasSuffix applies the HasSuffix predicate on the "sn" field.
func SnHasSuffix(v string) predicate.Device {
	return predicate.Device(sql.FieldHasSuffix(FieldSn, v))
}

// SnEqualFold applies the EqualFold predicate on the "sn" field.
func SnEqualFold(v string) predicate.Device {
	return predicate.Device(sql.FieldEqualFold(FieldSn, v))
}

// SnContainsFold applies the ContainsFold predicate on the "sn" field.
func SnContainsFold(v string) predicate.Device {
	return predicate.Device(sql.FieldContainsFold(FieldSn, v))
}

// ProductIDEQ applies the EQ predicate on the "product_id" field.
func ProductIDEQ(v int) predicate.Device {
	return predicate.Device(sql.FieldEQ(FieldProductID, v))
}

// ProductIDNEQ applies the NEQ predicate on the "product_id" field.
func ProductIDNEQ(v int) predicate.Device {
	return predicate.Device(sql.FieldNEQ(FieldProductID, v))
}

// ProductIDIn applies the In predicate on the "product_id" field.
func ProductIDIn(vs ...int) predicate.Device {
	return predicate.Device(sql.FieldIn(FieldProductID, vs...))
}

// ProductIDNotIn applies the NotIn predicate on the "product_id" field.
func ProductIDNotIn(vs ...int) predicate.Device {
	return predicate.Device(sql.FieldNotIn(FieldProductID, vs...))
}

// LicenseTypeIDEQ applies the EQ predicate on the "license_type_id" field.
func LicenseTypeIDEQ(v int) predicate.Device {
	return predicate.Device(sql.FieldEQ(FieldLicenseTypeID, v))
}

// LicenseTypeIDNEQ applies the NEQ predicate on the "license_type_id" field.
func LicenseTypeIDNEQ(v int) predicate.Device {
	return predicate.Device(sql.FieldNEQ(FieldLicenseTypeID, v))
}

// LicenseTypeIDIn applies the In predicate on the "license_type_id" field.
func LicenseTypeIDIn(vs ...int) predicate.Device {
	return predicate.Device(sql.FieldIn(FieldLicenseTypeID, vs...))
}

// LicenseTypeIDNotIn applies the NotIn predicate on the "license_type_id" field.
func LicenseTypeIDNotIn(vs ...int) predicate.Device {
	return predicate.Device(sql.FieldNotIn(FieldLicenseTypeID, vs...))
}

// LicenseTypeIDIsNil applies the IsNil predicate on the "license_type_id" field.
func LicenseTypeIDIsNil() predicate.Device {
	return predicate.Device(sql.FieldIsNull(FieldLicenseTypeID))
}

// LicenseTypeIDNotNil applies the NotNil predicate on the "license_type_id" field.
func LicenseTypeIDNotNil() predicate.Device {
	return predicate.Device(sql.FieldNotNull(FieldLicenseTypeID))
}

// OemTagEQ applies the EQ predicate on the "oem_tag" field.
func OemTagEQ(v string) predicate.Device {
	return predicate.Device(sql.FieldEQ(FieldOemTag, v))
}

// OemTagNEQ applies the NEQ predicate on the "oem_tag" field.
func OemTagNEQ(v string) predicate.Device {
	return predicate.Device(sql.FieldNEQ(FieldOemTag, v))
}

// OemTagIn applies the In predicate on the "oem_tag" field.
func OemTagIn(vs ...string) predicate.Device {
	return predicate.Device(sql.FieldIn(FieldOemTag, vs...))
}

// OemTagNotIn applies the NotIn predicate on the "oem_tag" field.
func OemTagNotIn(vs ...string) predicate.Device {
	return predicate.Device(sql.FieldNotIn(FieldOemTag, vs...))
}

// OemTagGT applies the GT predicate on the "oem_tag" field.
func OemTagGT(v string) predicate.Device {
	return predicate.Device(sql.FieldGT(FieldOemTag, v))
}

// OemTagGTE applies the GTE predicate on the "oem_tag" field.
func OemTagGTE(v string) predicate.Device {
	return predicate.Device(sql.FieldGTE(FieldOemTag, v))
}

// OemTagLT applies the LT predicate on the "oem_tag" field.
func OemTagLT(v string) predicate.Device {
	return predicate.Device(sql.FieldLT(FieldOemTag, v))
}

// OemTagLTE applies the LTE predicate on the "oem_tag" field.
func OemTagLTE(v string) predicate.Device {
	return predicate.Device(sql.FieldLTE(FieldOemTag, v))
}

// OemTagContains applies the Contains predicate on the "oem_tag" field.
func OemTagContains(v string) predicate.Device {
	return predicate.Device(sql.FieldContains(FieldOemTag, v))
}

// OemTagHasPrefix applies the HasPrefix predicate on the "oem_tag" field.
func OemTagHasPrefix(v string) predicate.Device {
	return predicate.Device(sql.FieldHasPrefix(FieldOemTag, v))
}

// OemTagHasSuffix applies the HasSuffix predicate on the "oem_tag" field.
func OemTagHasSuffix(v string) predicate.Device {
	return predicate.Device(sql.FieldHasSuffix(FieldOemTag, v))
}

// OemTagIsNil applies the IsNil predicate on the "oem_tag" field.
func OemTagIsNil() predicate.Device {
	return predicate.Device(sql.FieldIsNull(FieldOemTag))
}

// OemTagNotNil applies the NotNil predicate on the "oem_tag" field.
func OemTagNotNil() predicate.Device {
	return predicate.Device(sql.FieldNotNull(FieldOemTag))
}

// OemTagEqualFold applies the EqualFold predicate on the "oem_tag" field.
func OemTagEqualFold(v string) predicate.Device {
	return predicate.Device(sql.FieldEqualFold(FieldOemTag, v))
}

// OemTagContainsFold applies the ContainsFold predicate on the "oem_tag" field.
func OemTagContainsFold(v string) predicate.Device {
	return predicate.Device(sql.FieldContainsFold(FieldOemTag, v))
}

// RemarkEQ applies the EQ predicate on the "remark" field.
func RemarkEQ(v string) predicate.Device {
	return predicate.Device(sql.FieldEQ(FieldRemark, v))
}

// RemarkNEQ applies the NEQ predicate on the "remark" field.
func RemarkNEQ(v string) predicate.Device {
	return predicate.Device(sql.FieldNEQ(FieldRemark, v))
}

// RemarkIn applies the In predicate on the "remark" field.
func RemarkIn(vs ...string) predicate.Device {
	return predicate.Device(sql.FieldIn(FieldRemark, vs...))
}

// RemarkNotIn applies the NotIn predicate on the "remark" field.
func RemarkNotIn(vs ...string) predicate.Device {
	return predicate.Device(sql.FieldNotIn(FieldRemark, vs...))
}

// RemarkGT applies the GT predicate on the "remark" field.
func RemarkGT(v string) predicate.Device {
	return predicate.Device(sql.FieldGT(FieldRemark, v))
}

// RemarkGTE applies the GTE predicate on the "remark" field.
func RemarkGTE(v string) predicate.Device {
	return predicate.Device(sql.FieldGTE(FieldRemark, v))
}

// RemarkLT applies the LT predicate on the "remark" field.
func RemarkLT(v string) predicate.Device {
	return predicate.Device(sql.FieldLT(FieldRemark, v))
}

// RemarkLTE applies the LTE predicate on the "remark" field.
func RemarkLTE(v string) predicate.Device {
	return predicate.Device(sql.FieldLTE(FieldRemark, v))
}

// RemarkContains applies the Contains predicate on the "remark" field.
func RemarkContains(v string) predicate.Device {
	return predicate.Device(sql.FieldContains(FieldRemark, v))
}

// RemarkHasPrefix applies the HasPrefix predicate on the "remark" field.
func RemarkHasPrefix(v string) predicate.Device {
	return predicate.Device(sql.FieldHasPrefix(FieldRemark, v))
}

// RemarkHasSuffix applies the HasSuffix predicate on the "remark" field.
func RemarkHasSuffix(v string) predicate.Device {
	return predicate.Device(sql.FieldHasSuffix(FieldRemark, v))
}

// RemarkIsNil applies the IsNil predicate on the "remark" field.
func RemarkIsNil() predicate.Device {
	return predicate.Device(sql.FieldIsNull(FieldRemark))
}

// RemarkNotNil applies the NotNil predicate on the "remark" field.
func RemarkNotNil() predicate.Device {
	return predicate.Device(sql.FieldNotNull(FieldRemark))
}

// RemarkEqualFold applies the EqualFold predicate on the "remark" field.
func RemarkEqualFold(v string) predicate.Device {
	return predicate.Device(sql.FieldEqualFold(FieldRemark, v))
}

// RemarkContainsFold applies the ContainsFold predicate on the "remark" field.
func RemarkContainsFold(v string) predicate.Device {
	return predicate.Device(sql.FieldContainsFold(FieldRemark, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Device {
	return predicate.Device(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Device {
	return predicate.Device(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Device {
	return predicate.Device(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Device {
	return predicate.Device(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Device {
	return predicate.Device(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Device {
	return predicate.Device(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Device {
	return predicate.Device(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Device {
	return predicate.Device(sql.FieldLTE(FieldCreatedAt, v))
}

// CreatedByEQ applies the EQ predicate on the "created_by" field.
func CreatedByEQ(v int) predicate.Device {
	return predicate.Device(sql.FieldEQ(FieldCreatedBy, v))
}

// CreatedByNEQ applies the NEQ predicate on the "created_by" field.
func CreatedByNEQ(v int) predicate.Device {
	return predicate.Device(sql.FieldNEQ(FieldCreatedBy, v))
}

// CreatedByIn applies the In predicate on the "created_by" field.
func CreatedByIn(vs ...int) predicate.Device {
	return predicate.Device(sql.FieldIn(FieldCreatedBy, vs...))
}

// CreatedByNotIn applies the NotIn predicate on the "created_by" field.
func CreatedByNotIn(vs ...int) predicate.Device {
	return predicate.Device(sql.FieldNotIn(FieldCreatedBy, vs...))
}

// CreatedByIsNil applies the IsNil predicate on the "created_by" field.
func CreatedByIsNil() predicate.Device {
	return predicate.Device(sql.FieldIsNull(FieldCreatedBy))
}

// CreatedByNotNil applies the NotNil predicate on the "created_by" field.
func CreatedByNotNil() predicate.Device {
	return predicate.Device(sql.FieldNotNull(FieldCreatedBy))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Device {
	return predicate.Device(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Device {
	return predicate.Device(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Device {
	return predicate.Device(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Device {
	return predicate.Device(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Device {
	return predicate.Device(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Device {
	return predicate.Device(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Device {
	return predicate.Device(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Device {
	return predicate.Device(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedByEQ applies the EQ predicate on the "updated_by" field.
func UpdatedByEQ(v int) predicate.Device {
	return predicate.Device(sql.FieldEQ(FieldUpdatedBy, v))
}

// UpdatedByNEQ applies the NEQ predicate on the "updated_by" field.
func UpdatedByNEQ(v int) predicate.Device {
	return predicate.Device(sql.FieldNEQ(FieldUpdatedBy, v))
}

// UpdatedByIn applies the In predicate on the "updated_by" field.
func UpdatedByIn(vs ...int) predicate.Device {
	return predicate.Device(sql.FieldIn(FieldUpdatedBy, vs...))
}

// UpdatedByNotIn applies the NotIn predicate on the "updated_by" field.
func UpdatedByNotIn(vs ...int) predicate.Device {
	return predicate.Device(sql.FieldNotIn(FieldUpdatedBy, vs...))
}

// UpdatedByIsNil applies the IsNil predicate on the "updated_by" field.
func UpdatedByIsNil() predicate.Device {
	return predicate.Device(sql.FieldIsNull(FieldUpdatedBy))
}

// UpdatedByNotNil applies the NotNil predicate on the "updated_by" field.
func UpdatedByNotNil() predicate.Device {
	return predicate.Device(sql.FieldNotNull(FieldUpdatedBy))
}

// HasProduct applies the HasEdge predicate on the "product" edge.
func HasProduct() predicate.Device {
	return predicate.Device(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ProductTable, ProductColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProductWith applies the HasEdge predicate on the "product" edge with a given conditions (other predicates).
func HasProductWith(preds ...predicate.Product) predicate.Device {
	return predicate.Device(func(s *sql.Selector) {
		step := newProductStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasLicenseType applies the HasEdge predicate on the "license_type" edge.
func HasLicenseType() predicate.Device {
	return predicate.Device(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, LicenseTypeTable, LicenseTypeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasLicenseTypeWith applies the HasEdge predicate on the "license_type" edge with a given conditions (other predicates).
func HasLicenseTypeWith(preds ...predicate.LicenseType) predicate.Device {
	return predicate.Device(func(s *sql.Selector) {
		step := newLicenseTypeStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCreator applies the HasEdge predicate on the "creator" edge.
func HasCreator() predicate.Device {
	return predicate.Device(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, CreatorTable, CreatorColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCreatorWith applies the HasEdge predicate on the "creator" edge with a given conditions (other predicates).
func HasCreatorWith(preds ...predicate.User) predicate.Device {
	return predicate.Device(func(s *sql.Selector) {
		step := newCreatorStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUpdater applies the HasEdge predicate on the "updater" edge.
func HasUpdater() predicate.Device {
	return predicate.Device(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, UpdaterTable, UpdaterColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUpdaterWith applies the HasEdge predicate on the "updater" edge with a given conditions (other predicates).
func HasUpdaterWith(preds ...predicate.User) predicate.Device {
	return predicate.Device(func(s *sql.Selector) {
		step := newUpdaterStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Device) predicate.Device {
	return predicate.Device(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Device) predicate.Device {
	return predicate.Device(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Device) predicate.Device {
	return predicate.Device(sql.NotPredicates(p))
}
