// Code generated by ent, DO NOT EDIT.

package product

import (
	"time"

	"cambridge-hit.com/gin-base/activateserver/app/entity/ent/predicate"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Product {
	return predicate.Product(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Product {
	return predicate.Product(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Product {
	return predicate.Product(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Product {
	return predicate.Product(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Product {
	return predicate.Product(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Product {
	return predicate.Product(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Product {
	return predicate.Product(sql.FieldLTE(FieldID, id))
}

// Code applies equality check predicate on the "code" field. It's identical to CodeEQ.
func Code(v string) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldCode, v))
}

// ProductType applies equality check predicate on the "product_type" field. It's identical to ProductTypeEQ.
func ProductType(v string) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldProductType, v))
}

// ProductName applies equality check predicate on the "product_name" field. It's identical to ProductNameEQ.
func ProductName(v string) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldProductName, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldUpdatedAt, v))
}

// CodeEQ applies the EQ predicate on the "code" field.
func CodeEQ(v string) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldCode, v))
}

// CodeNEQ applies the NEQ predicate on the "code" field.
func CodeNEQ(v string) predicate.Product {
	return predicate.Product(sql.FieldNEQ(FieldCode, v))
}

// CodeIn applies the In predicate on the "code" field.
func CodeIn(vs ...string) predicate.Product {
	return predicate.Product(sql.FieldIn(FieldCode, vs...))
}

// CodeNotIn applies the NotIn predicate on the "code" field.
func CodeNotIn(vs ...string) predicate.Product {
	return predicate.Product(sql.FieldNotIn(FieldCode, vs...))
}

// CodeGT applies the GT predicate on the "code" field.
func CodeGT(v string) predicate.Product {
	return predicate.Product(sql.FieldGT(FieldCode, v))
}

// CodeGTE applies the GTE predicate on the "code" field.
func CodeGTE(v string) predicate.Product {
	return predicate.Product(sql.FieldGTE(FieldCode, v))
}

// CodeLT applies the LT predicate on the "code" field.
func CodeLT(v string) predicate.Product {
	return predicate.Product(sql.FieldLT(FieldCode, v))
}

// CodeLTE applies the LTE predicate on the "code" field.
func CodeLTE(v string) predicate.Product {
	return predicate.Product(sql.FieldLTE(FieldCode, v))
}

// CodeContains applies the Contains predicate on the "code" field.
func CodeContains(v string) predicate.Product {
	return predicate.Product(sql.FieldContains(FieldCode, v))
}

// CodeHasPrefix applies the HasPrefix predicate on the "code" field.
func CodeHasPrefix(v string) predicate.Product {
	return predicate.Product(sql.FieldHasPrefix(FieldCode, v))
}

// CodeHasSuffix applies the HasSuffix predicate on the "code" field.
func CodeHasSuffix(v string) predicate.Product {
	return predicate.Product(sql.FieldHasSuffix(FieldCode, v))
}

// CodeEqualFold applies the EqualFold predicate on the "code" field.
func CodeEqualFold(v string) predicate.Product {
	return predicate.Product(sql.FieldEqualFold(FieldCode, v))
}

// CodeContainsFold applies the ContainsFold predicate on the "code" field.
func CodeContainsFold(v string) predicate.Product {
	return predicate.Product(sql.FieldContainsFold(FieldCode, v))
}

// ProductTypeEQ applies the EQ predicate on the "product_type" field.
func ProductTypeEQ(v string) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldProductType, v))
}

// ProductTypeNEQ applies the NEQ predicate on the "product_type" field.
func ProductTypeNEQ(v string) predicate.Product {
	return predicate.Product(sql.FieldNEQ(FieldProductType, v))
}

// ProductTypeIn applies the In predicate on the "product_type" field.
func ProductTypeIn(vs ...string) predicate.Product {
	return predicate.Product(sql.FieldIn(FieldProductType, vs...))
}

// ProductTypeNotIn applies the NotIn predicate on the "product_type" field.
func ProductTypeNotIn(vs ...string) predicate.Product {
	return predicate.Product(sql.FieldNotIn(FieldProductType, vs...))
}

// ProductTypeGT applies the GT predicate on the "product_type" field.
func ProductTypeGT(v string) predicate.Product {
	return predicate.Product(sql.FieldGT(FieldProductType, v))
}

// ProductTypeGTE applies the GTE predicate on the "product_type" field.
func ProductTypeGTE(v string) predicate.Product {
	return predicate.Product(sql.FieldGTE(FieldProductType, v))
}

// ProductTypeLT applies the LT predicate on the "product_type" field.
func ProductTypeLT(v string) predicate.Product {
	return predicate.Product(sql.FieldLT(FieldProductType, v))
}

// ProductTypeLTE applies the LTE predicate on the "product_type" field.
func ProductTypeLTE(v string) predicate.Product {
	return predicate.Product(sql.FieldLTE(FieldProductType, v))
}

// ProductTypeContains applies the Contains predicate on the "product_type" field.
func ProductTypeContains(v string) predicate.Product {
	return predicate.Product(sql.FieldContains(FieldProductType, v))
}

// ProductTypeHasPrefix applies the HasPrefix predicate on the "product_type" field.
func ProductTypeHasPrefix(v string) predicate.Product {
	return predicate.Product(sql.FieldHasPrefix(FieldProductType, v))
}

// ProductTypeHasSuffix applies the HasSuffix predicate on the "product_type" field.
func ProductTypeHasSuffix(v string) predicate.Product {
	return predicate.Product(sql.FieldHasSuffix(FieldProductType, v))
}

// ProductTypeIsNil applies the IsNil predicate on the "product_type" field.
func ProductTypeIsNil() predicate.Product {
	return predicate.Product(sql.FieldIsNull(FieldProductType))
}

// ProductTypeNotNil applies the NotNil predicate on the "product_type" field.
func ProductTypeNotNil() predicate.Product {
	return predicate.Product(sql.FieldNotNull(FieldProductType))
}

// ProductTypeEqualFold applies the EqualFold predicate on the "product_type" field.
func ProductTypeEqualFold(v string) predicate.Product {
	return predicate.Product(sql.FieldEqualFold(FieldProductType, v))
}

// ProductTypeContainsFold applies the ContainsFold predicate on the "product_type" field.
func ProductTypeContainsFold(v string) predicate.Product {
	return predicate.Product(sql.FieldContainsFold(FieldProductType, v))
}

// ProductNameEQ applies the EQ predicate on the "product_name" field.
func ProductNameEQ(v string) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldProductName, v))
}

// ProductNameNEQ applies the NEQ predicate on the "product_name" field.
func ProductNameNEQ(v string) predicate.Product {
	return predicate.Product(sql.FieldNEQ(FieldProductName, v))
}

// ProductNameIn applies the In predicate on the "product_name" field.
func ProductNameIn(vs ...string) predicate.Product {
	return predicate.Product(sql.FieldIn(FieldProductName, vs...))
}

// ProductNameNotIn applies the NotIn predicate on the "product_name" field.
func ProductNameNotIn(vs ...string) predicate.Product {
	return predicate.Product(sql.FieldNotIn(FieldProductName, vs...))
}

// ProductNameGT applies the GT predicate on the "product_name" field.
func ProductNameGT(v string) predicate.Product {
	return predicate.Product(sql.FieldGT(FieldProductName, v))
}

// ProductNameGTE applies the GTE predicate on the "product_name" field.
func ProductNameGTE(v string) predicate.Product {
	return predicate.Product(sql.FieldGTE(FieldProductName, v))
}

// ProductNameLT applies the LT predicate on the "product_name" field.
func ProductNameLT(v string) predicate.Product {
	return predicate.Product(sql.FieldLT(FieldProductName, v))
}

// ProductNameLTE applies the LTE predicate on the "product_name" field.
func ProductNameLTE(v string) predicate.Product {
	return predicate.Product(sql.FieldLTE(FieldProductName, v))
}

// ProductNameContains applies the Contains predicate on the "product_name" field.
func ProductNameContains(v string) predicate.Product {
	return predicate.Product(sql.FieldContains(FieldProductName, v))
}

// ProductNameHasPrefix applies the HasPrefix predicate on the "product_name" field.
func ProductNameHasPrefix(v string) predicate.Product {
	return predicate.Product(sql.FieldHasPrefix(FieldProductName, v))
}

// ProductNameHasSuffix applies the HasSuffix predicate on the "product_name" field.
func ProductNameHasSuffix(v string) predicate.Product {
	return predicate.Product(sql.FieldHasSuffix(FieldProductName, v))
}

// ProductNameEqualFold applies the EqualFold predicate on the "product_name" field.
func ProductNameEqualFold(v string) predicate.Product {
	return predicate.Product(sql.FieldEqualFold(FieldProductName, v))
}

// ProductNameContainsFold applies the ContainsFold predicate on the "product_name" field.
func ProductNameContainsFold(v string) predicate.Product {
	return predicate.Product(sql.FieldContainsFold(FieldProductName, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Product {
	return predicate.Product(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Product {
	return predicate.Product(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Product {
	return predicate.Product(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Product {
	return predicate.Product(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Product {
	return predicate.Product(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Product {
	return predicate.Product(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Product {
	return predicate.Product(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Product {
	return predicate.Product(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Product {
	return predicate.Product(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Product {
	return predicate.Product(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Product {
	return predicate.Product(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Product {
	return predicate.Product(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Product {
	return predicate.Product(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Product {
	return predicate.Product(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasManagers applies the HasEdge predicate on the "managers" edge.
func HasManagers() predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ManagersTable, ManagersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasManagersWith applies the HasEdge predicate on the "managers" edge with a given conditions (other predicates).
func HasManagersWith(preds ...predicate.ProductManager) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		step := newManagersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasLicenseTypes applies the HasEdge predicate on the "license_types" edge.
func HasLicenseTypes() predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, LicenseTypesTable, LicenseTypesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasLicenseTypesWith applies the HasEdge predicate on the "license_types" edge with a given conditions (other predicates).
func HasLicenseTypesWith(preds ...predicate.LicenseType) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		step := newLicenseTypesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasFeatures applies the HasEdge predicate on the "features" edge.
func HasFeatures() predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, FeaturesTable, FeaturesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFeaturesWith applies the HasEdge predicate on the "features" edge with a given conditions (other predicates).
func HasFeaturesWith(preds ...predicate.ProductFeature) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		step := newFeaturesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasFirmwareVersions applies the HasEdge predicate on the "firmware_versions" edge.
func HasFirmwareVersions() predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, FirmwareVersionsTable, FirmwareVersionsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFirmwareVersionsWith applies the HasEdge predicate on the "firmware_versions" edge with a given conditions (other predicates).
func HasFirmwareVersionsWith(preds ...predicate.FirmwareVersion) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		step := newFirmwareVersionsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSoftwareVersions applies the HasEdge predicate on the "software_versions" edge.
func HasSoftwareVersions() predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, SoftwareVersionsTable, SoftwareVersionsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSoftwareVersionsWith applies the HasEdge predicate on the "software_versions" edge with a given conditions (other predicates).
func HasSoftwareVersionsWith(preds ...predicate.SoftwareVersion) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		step := newSoftwareVersionsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDevices applies the HasEdge predicate on the "devices" edge.
func HasDevices() predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, DevicesTable, DevicesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDevicesWith applies the HasEdge predicate on the "devices" edge with a given conditions (other predicates).
func HasDevicesWith(preds ...predicate.Device) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		step := newDevicesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAuditLogs applies the HasEdge predicate on the "audit_logs" edge.
func HasAuditLogs() predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, AuditLogsTable, AuditLogsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAuditLogsWith applies the HasEdge predicate on the "audit_logs" edge with a given conditions (other predicates).
func HasAuditLogsWith(preds ...predicate.AuditLog) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		step := newAuditLogsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Product) predicate.Product {
	return predicate.Product(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Product) predicate.Product {
	return predicate.Product(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Product) predicate.Product {
	return predicate.Product(sql.NotPredicates(p))
}
