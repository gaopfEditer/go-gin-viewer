// Code generated by ent, DO NOT EDIT.

package product

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the product type in the database.
	Label = "product"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCode holds the string denoting the code field in the database.
	FieldCode = "code"
	// FieldProductType holds the string denoting the product_type field in the database.
	FieldProductType = "product_type"
	// FieldProductName holds the string denoting the product_name field in the database.
	FieldProductName = "product_name"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeManagers holds the string denoting the managers edge name in mutations.
	EdgeManagers = "managers"
	// EdgeLicenseTypes holds the string denoting the license_types edge name in mutations.
	EdgeLicenseTypes = "license_types"
	// EdgeFeatures holds the string denoting the features edge name in mutations.
	EdgeFeatures = "features"
	// EdgeFirmwareVersions holds the string denoting the firmware_versions edge name in mutations.
	EdgeFirmwareVersions = "firmware_versions"
	// EdgeSoftwareVersions holds the string denoting the software_versions edge name in mutations.
	EdgeSoftwareVersions = "software_versions"
	// EdgeDevices holds the string denoting the devices edge name in mutations.
	EdgeDevices = "devices"
	// EdgeAuditLogs holds the string denoting the audit_logs edge name in mutations.
	EdgeAuditLogs = "audit_logs"
	// Table holds the table name of the product in the database.
	Table = "products"
	// ManagersTable is the table that holds the managers relation/edge.
	ManagersTable = "product_managers"
	// ManagersInverseTable is the table name for the ProductManager entity.
	// It exists in this package in order to avoid circular dependency with the "productmanager" package.
	ManagersInverseTable = "product_managers"
	// ManagersColumn is the table column denoting the managers relation/edge.
	ManagersColumn = "product_id"
	// LicenseTypesTable is the table that holds the license_types relation/edge.
	LicenseTypesTable = "license_types"
	// LicenseTypesInverseTable is the table name for the LicenseType entity.
	// It exists in this package in order to avoid circular dependency with the "licensetype" package.
	LicenseTypesInverseTable = "license_types"
	// LicenseTypesColumn is the table column denoting the license_types relation/edge.
	LicenseTypesColumn = "product_id"
	// FeaturesTable is the table that holds the features relation/edge.
	FeaturesTable = "product_features"
	// FeaturesInverseTable is the table name for the ProductFeature entity.
	// It exists in this package in order to avoid circular dependency with the "productfeature" package.
	FeaturesInverseTable = "product_features"
	// FeaturesColumn is the table column denoting the features relation/edge.
	FeaturesColumn = "product_id"
	// FirmwareVersionsTable is the table that holds the firmware_versions relation/edge.
	FirmwareVersionsTable = "firmware_versions"
	// FirmwareVersionsInverseTable is the table name for the FirmwareVersion entity.
	// It exists in this package in order to avoid circular dependency with the "firmwareversion" package.
	FirmwareVersionsInverseTable = "firmware_versions"
	// FirmwareVersionsColumn is the table column denoting the firmware_versions relation/edge.
	FirmwareVersionsColumn = "product_id"
	// SoftwareVersionsTable is the table that holds the software_versions relation/edge.
	SoftwareVersionsTable = "software_versions"
	// SoftwareVersionsInverseTable is the table name for the SoftwareVersion entity.
	// It exists in this package in order to avoid circular dependency with the "softwareversion" package.
	SoftwareVersionsInverseTable = "software_versions"
	// SoftwareVersionsColumn is the table column denoting the software_versions relation/edge.
	SoftwareVersionsColumn = "product_id"
	// DevicesTable is the table that holds the devices relation/edge.
	DevicesTable = "devices"
	// DevicesInverseTable is the table name for the Device entity.
	// It exists in this package in order to avoid circular dependency with the "device" package.
	DevicesInverseTable = "devices"
	// DevicesColumn is the table column denoting the devices relation/edge.
	DevicesColumn = "product_id"
	// AuditLogsTable is the table that holds the audit_logs relation/edge.
	AuditLogsTable = "audit_logs"
	// AuditLogsInverseTable is the table name for the AuditLog entity.
	// It exists in this package in order to avoid circular dependency with the "auditlog" package.
	AuditLogsInverseTable = "audit_logs"
	// AuditLogsColumn is the table column denoting the audit_logs relation/edge.
	AuditLogsColumn = "product_id"
)

// Columns holds all SQL columns for product fields.
var Columns = []string{
	FieldID,
	FieldCode,
	FieldProductType,
	FieldProductName,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// CodeValidator is a validator for the "code" field. It is called by the builders before save.
	CodeValidator func(string) error
	// DefaultProductType holds the default value on creation for the "product_type" field.
	DefaultProductType string
	// ProductNameValidator is a validator for the "product_name" field. It is called by the builders before save.
	ProductNameValidator func(string) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(int) error
)

// OrderOption defines the ordering options for the Product queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCode orders the results by the code field.
func ByCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCode, opts...).ToFunc()
}

// ByProductType orders the results by the product_type field.
func ByProductType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProductType, opts...).ToFunc()
}

// ByProductName orders the results by the product_name field.
func ByProductName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProductName, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByManagersCount orders the results by managers count.
func ByManagersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newManagersStep(), opts...)
	}
}

// ByManagers orders the results by managers terms.
func ByManagers(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newManagersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByLicenseTypesCount orders the results by license_types count.
func ByLicenseTypesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newLicenseTypesStep(), opts...)
	}
}

// ByLicenseTypes orders the results by license_types terms.
func ByLicenseTypes(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newLicenseTypesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByFeaturesCount orders the results by features count.
func ByFeaturesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newFeaturesStep(), opts...)
	}
}

// ByFeatures orders the results by features terms.
func ByFeatures(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newFeaturesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByFirmwareVersionsCount orders the results by firmware_versions count.
func ByFirmwareVersionsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newFirmwareVersionsStep(), opts...)
	}
}

// ByFirmwareVersions orders the results by firmware_versions terms.
func ByFirmwareVersions(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newFirmwareVersionsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// BySoftwareVersionsCount orders the results by software_versions count.
func BySoftwareVersionsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSoftwareVersionsStep(), opts...)
	}
}

// BySoftwareVersions orders the results by software_versions terms.
func BySoftwareVersions(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSoftwareVersionsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByDevicesCount orders the results by devices count.
func ByDevicesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newDevicesStep(), opts...)
	}
}

// ByDevices orders the results by devices terms.
func ByDevices(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDevicesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByAuditLogsCount orders the results by audit_logs count.
func ByAuditLogsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAuditLogsStep(), opts...)
	}
}

// ByAuditLogs orders the results by audit_logs terms.
func ByAuditLogs(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAuditLogsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newManagersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ManagersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ManagersTable, ManagersColumn),
	)
}
func newLicenseTypesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(LicenseTypesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, LicenseTypesTable, LicenseTypesColumn),
	)
}
func newFeaturesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(FeaturesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, FeaturesTable, FeaturesColumn),
	)
}
func newFirmwareVersionsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(FirmwareVersionsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, FirmwareVersionsTable, FirmwareVersionsColumn),
	)
}
func newSoftwareVersionsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SoftwareVersionsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, SoftwareVersionsTable, SoftwareVersionsColumn),
	)
}
func newDevicesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DevicesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, DevicesTable, DevicesColumn),
	)
}
func newAuditLogsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AuditLogsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, AuditLogsTable, AuditLogsColumn),
	)
}
