// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"cambridge-hit.com/gin-base/activateserver/app/entity/ent/product"
	"cambridge-hit.com/gin-base/activateserver/app/entity/ent/productmanager"
	"cambridge-hit.com/gin-base/activateserver/app/entity/ent/user"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// ProductManager is the model entity for the ProductManager schema.
type ProductManager struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Role holds the value of the "role" field.
	Role productmanager.Role `json:"role,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID int `json:"user_id,omitempty"`
	// ProductID holds the value of the "product_id" field.
	ProductID int `json:"product_id,omitempty"`
	// 权限：只读、完全，【主管理员和super_user(id:0)不受此字段限制】
	Permissions productmanager.Permissions `json:"permissions,omitempty"`
	// 备注信息
	Remark string `json:"remark,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ProductManagerQuery when eager-loading is set.
	Edges        ProductManagerEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ProductManagerEdges holds the relations/edges for other nodes in the graph.
type ProductManagerEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Product holds the value of the product edge.
	Product *Product `json:"product,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProductManagerEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// ProductOrErr returns the Product value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProductManagerEdges) ProductOrErr() (*Product, error) {
	if e.loadedTypes[1] {
		if e.Product == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: product.Label}
		}
		return e.Product, nil
	}
	return nil, &NotLoadedError{edge: "product"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ProductManager) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case productmanager.FieldID, productmanager.FieldUserID, productmanager.FieldProductID:
			values[i] = new(sql.NullInt64)
		case productmanager.FieldRole, productmanager.FieldPermissions, productmanager.FieldRemark:
			values[i] = new(sql.NullString)
		case productmanager.FieldCreatedAt, productmanager.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ProductManager fields.
func (pm *ProductManager) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case productmanager.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pm.ID = int(value.Int64)
		case productmanager.FieldRole:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field role", values[i])
			} else if value.Valid {
				pm.Role = productmanager.Role(value.String)
			}
		case productmanager.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				pm.UserID = int(value.Int64)
			}
		case productmanager.FieldProductID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field product_id", values[i])
			} else if value.Valid {
				pm.ProductID = int(value.Int64)
			}
		case productmanager.FieldPermissions:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field permissions", values[i])
			} else if value.Valid {
				pm.Permissions = productmanager.Permissions(value.String)
			}
		case productmanager.FieldRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remark", values[i])
			} else if value.Valid {
				pm.Remark = value.String
			}
		case productmanager.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pm.CreatedAt = value.Time
			}
		case productmanager.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				pm.UpdatedAt = value.Time
			}
		default:
			pm.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ProductManager.
// This includes values selected through modifiers, order, etc.
func (pm *ProductManager) Value(name string) (ent.Value, error) {
	return pm.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the ProductManager entity.
func (pm *ProductManager) QueryUser() *UserQuery {
	return NewProductManagerClient(pm.config).QueryUser(pm)
}

// QueryProduct queries the "product" edge of the ProductManager entity.
func (pm *ProductManager) QueryProduct() *ProductQuery {
	return NewProductManagerClient(pm.config).QueryProduct(pm)
}

// Update returns a builder for updating this ProductManager.
// Note that you need to call ProductManager.Unwrap() before calling this method if this ProductManager
// was returned from a transaction, and the transaction was committed or rolled back.
func (pm *ProductManager) Update() *ProductManagerUpdateOne {
	return NewProductManagerClient(pm.config).UpdateOne(pm)
}

// Unwrap unwraps the ProductManager entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pm *ProductManager) Unwrap() *ProductManager {
	_tx, ok := pm.config.driver.(*txDriver)
	if !ok {
		panic("ent: ProductManager is not a transactional entity")
	}
	pm.config.driver = _tx.drv
	return pm
}

// String implements the fmt.Stringer.
func (pm *ProductManager) String() string {
	var builder strings.Builder
	builder.WriteString("ProductManager(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pm.ID))
	builder.WriteString("role=")
	builder.WriteString(fmt.Sprintf("%v", pm.Role))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", pm.UserID))
	builder.WriteString(", ")
	builder.WriteString("product_id=")
	builder.WriteString(fmt.Sprintf("%v", pm.ProductID))
	builder.WriteString(", ")
	builder.WriteString("permissions=")
	builder.WriteString(fmt.Sprintf("%v", pm.Permissions))
	builder.WriteString(", ")
	builder.WriteString("remark=")
	builder.WriteString(pm.Remark)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(pm.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(pm.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// ProductManagers is a parsable slice of ProductManager.
type ProductManagers []*ProductManager
