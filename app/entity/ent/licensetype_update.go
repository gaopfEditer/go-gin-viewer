// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"cambridge-hit.com/gin-base/activateserver/app/entity/ent/device"
	"cambridge-hit.com/gin-base/activateserver/app/entity/ent/licensetype"
	"cambridge-hit.com/gin-base/activateserver/app/entity/ent/licensetypefeatures"
	"cambridge-hit.com/gin-base/activateserver/app/entity/ent/predicate"
	"cambridge-hit.com/gin-base/activateserver/app/entity/ent/product"
	"cambridge-hit.com/gin-base/activateserver/app/entity/ent/productfeature"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// LicenseTypeUpdate is the builder for updating LicenseType entities.
type LicenseTypeUpdate struct {
	config
	hooks    []Hook
	mutation *LicenseTypeMutation
}

// Where appends a list predicates to the LicenseTypeUpdate builder.
func (ltu *LicenseTypeUpdate) Where(ps ...predicate.LicenseType) *LicenseTypeUpdate {
	ltu.mutation.Where(ps...)
	return ltu
}

// SetTypeName sets the "type_name" field.
func (ltu *LicenseTypeUpdate) SetTypeName(s string) *LicenseTypeUpdate {
	ltu.mutation.SetTypeName(s)
	return ltu
}

// SetProductID sets the "product_id" field.
func (ltu *LicenseTypeUpdate) SetProductID(i int) *LicenseTypeUpdate {
	ltu.mutation.SetProductID(i)
	return ltu
}

// SetUpdatedAt sets the "updated_at" field.
func (ltu *LicenseTypeUpdate) SetUpdatedAt(t time.Time) *LicenseTypeUpdate {
	ltu.mutation.SetUpdatedAt(t)
	return ltu
}

// SetProduct sets the "product" edge to the Product entity.
func (ltu *LicenseTypeUpdate) SetProduct(p *Product) *LicenseTypeUpdate {
	return ltu.SetProductID(p.ID)
}

// AddFeatureIDs adds the "features" edge to the ProductFeature entity by IDs.
func (ltu *LicenseTypeUpdate) AddFeatureIDs(ids ...int) *LicenseTypeUpdate {
	ltu.mutation.AddFeatureIDs(ids...)
	return ltu
}

// AddFeatures adds the "features" edges to the ProductFeature entity.
func (ltu *LicenseTypeUpdate) AddFeatures(p ...*ProductFeature) *LicenseTypeUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ltu.AddFeatureIDs(ids...)
}

// AddDeviceIDs adds the "devices" edge to the Device entity by IDs.
func (ltu *LicenseTypeUpdate) AddDeviceIDs(ids ...int) *LicenseTypeUpdate {
	ltu.mutation.AddDeviceIDs(ids...)
	return ltu
}

// AddDevices adds the "devices" edges to the Device entity.
func (ltu *LicenseTypeUpdate) AddDevices(d ...*Device) *LicenseTypeUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return ltu.AddDeviceIDs(ids...)
}

// AddLicenseTypeFeatureIDs adds the "license_type_features" edge to the LicenseTypeFeatures entity by IDs.
func (ltu *LicenseTypeUpdate) AddLicenseTypeFeatureIDs(ids ...int) *LicenseTypeUpdate {
	ltu.mutation.AddLicenseTypeFeatureIDs(ids...)
	return ltu
}

// AddLicenseTypeFeatures adds the "license_type_features" edges to the LicenseTypeFeatures entity.
func (ltu *LicenseTypeUpdate) AddLicenseTypeFeatures(l ...*LicenseTypeFeatures) *LicenseTypeUpdate {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return ltu.AddLicenseTypeFeatureIDs(ids...)
}

// Mutation returns the LicenseTypeMutation object of the builder.
func (ltu *LicenseTypeUpdate) Mutation() *LicenseTypeMutation {
	return ltu.mutation
}

// ClearProduct clears the "product" edge to the Product entity.
func (ltu *LicenseTypeUpdate) ClearProduct() *LicenseTypeUpdate {
	ltu.mutation.ClearProduct()
	return ltu
}

// ClearFeatures clears all "features" edges to the ProductFeature entity.
func (ltu *LicenseTypeUpdate) ClearFeatures() *LicenseTypeUpdate {
	ltu.mutation.ClearFeatures()
	return ltu
}

// RemoveFeatureIDs removes the "features" edge to ProductFeature entities by IDs.
func (ltu *LicenseTypeUpdate) RemoveFeatureIDs(ids ...int) *LicenseTypeUpdate {
	ltu.mutation.RemoveFeatureIDs(ids...)
	return ltu
}

// RemoveFeatures removes "features" edges to ProductFeature entities.
func (ltu *LicenseTypeUpdate) RemoveFeatures(p ...*ProductFeature) *LicenseTypeUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ltu.RemoveFeatureIDs(ids...)
}

// ClearDevices clears all "devices" edges to the Device entity.
func (ltu *LicenseTypeUpdate) ClearDevices() *LicenseTypeUpdate {
	ltu.mutation.ClearDevices()
	return ltu
}

// RemoveDeviceIDs removes the "devices" edge to Device entities by IDs.
func (ltu *LicenseTypeUpdate) RemoveDeviceIDs(ids ...int) *LicenseTypeUpdate {
	ltu.mutation.RemoveDeviceIDs(ids...)
	return ltu
}

// RemoveDevices removes "devices" edges to Device entities.
func (ltu *LicenseTypeUpdate) RemoveDevices(d ...*Device) *LicenseTypeUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return ltu.RemoveDeviceIDs(ids...)
}

// ClearLicenseTypeFeatures clears all "license_type_features" edges to the LicenseTypeFeatures entity.
func (ltu *LicenseTypeUpdate) ClearLicenseTypeFeatures() *LicenseTypeUpdate {
	ltu.mutation.ClearLicenseTypeFeatures()
	return ltu
}

// RemoveLicenseTypeFeatureIDs removes the "license_type_features" edge to LicenseTypeFeatures entities by IDs.
func (ltu *LicenseTypeUpdate) RemoveLicenseTypeFeatureIDs(ids ...int) *LicenseTypeUpdate {
	ltu.mutation.RemoveLicenseTypeFeatureIDs(ids...)
	return ltu
}

// RemoveLicenseTypeFeatures removes "license_type_features" edges to LicenseTypeFeatures entities.
func (ltu *LicenseTypeUpdate) RemoveLicenseTypeFeatures(l ...*LicenseTypeFeatures) *LicenseTypeUpdate {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return ltu.RemoveLicenseTypeFeatureIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ltu *LicenseTypeUpdate) Save(ctx context.Context) (int, error) {
	ltu.defaults()
	return withHooks(ctx, ltu.sqlSave, ltu.mutation, ltu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ltu *LicenseTypeUpdate) SaveX(ctx context.Context) int {
	affected, err := ltu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ltu *LicenseTypeUpdate) Exec(ctx context.Context) error {
	_, err := ltu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ltu *LicenseTypeUpdate) ExecX(ctx context.Context) {
	if err := ltu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ltu *LicenseTypeUpdate) defaults() {
	if _, ok := ltu.mutation.UpdatedAt(); !ok {
		v := licensetype.UpdateDefaultUpdatedAt()
		ltu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ltu *LicenseTypeUpdate) check() error {
	if v, ok := ltu.mutation.TypeName(); ok {
		if err := licensetype.TypeNameValidator(v); err != nil {
			return &ValidationError{Name: "type_name", err: fmt.Errorf(`ent: validator failed for field "LicenseType.type_name": %w`, err)}
		}
	}
	if _, ok := ltu.mutation.ProductID(); ltu.mutation.ProductCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "LicenseType.product"`)
	}
	return nil
}

func (ltu *LicenseTypeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ltu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(licensetype.Table, licensetype.Columns, sqlgraph.NewFieldSpec(licensetype.FieldID, field.TypeInt))
	if ps := ltu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ltu.mutation.TypeName(); ok {
		_spec.SetField(licensetype.FieldTypeName, field.TypeString, value)
	}
	if value, ok := ltu.mutation.UpdatedAt(); ok {
		_spec.SetField(licensetype.FieldUpdatedAt, field.TypeTime, value)
	}
	if ltu.mutation.ProductCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   licensetype.ProductTable,
			Columns: []string{licensetype.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ltu.mutation.ProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   licensetype.ProductTable,
			Columns: []string{licensetype.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ltu.mutation.FeaturesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   licensetype.FeaturesTable,
			Columns: licensetype.FeaturesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productfeature.FieldID, field.TypeInt),
			},
		}
		createE := &LicenseTypeFeaturesCreate{config: ltu.config, mutation: newLicenseTypeFeaturesMutation(ltu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ltu.mutation.RemovedFeaturesIDs(); len(nodes) > 0 && !ltu.mutation.FeaturesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   licensetype.FeaturesTable,
			Columns: licensetype.FeaturesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productfeature.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &LicenseTypeFeaturesCreate{config: ltu.config, mutation: newLicenseTypeFeaturesMutation(ltu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ltu.mutation.FeaturesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   licensetype.FeaturesTable,
			Columns: licensetype.FeaturesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productfeature.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &LicenseTypeFeaturesCreate{config: ltu.config, mutation: newLicenseTypeFeaturesMutation(ltu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ltu.mutation.DevicesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   licensetype.DevicesTable,
			Columns: []string{licensetype.DevicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(device.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ltu.mutation.RemovedDevicesIDs(); len(nodes) > 0 && !ltu.mutation.DevicesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   licensetype.DevicesTable,
			Columns: []string{licensetype.DevicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(device.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ltu.mutation.DevicesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   licensetype.DevicesTable,
			Columns: []string{licensetype.DevicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(device.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ltu.mutation.LicenseTypeFeaturesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   licensetype.LicenseTypeFeaturesTable,
			Columns: []string{licensetype.LicenseTypeFeaturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(licensetypefeatures.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ltu.mutation.RemovedLicenseTypeFeaturesIDs(); len(nodes) > 0 && !ltu.mutation.LicenseTypeFeaturesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   licensetype.LicenseTypeFeaturesTable,
			Columns: []string{licensetype.LicenseTypeFeaturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(licensetypefeatures.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ltu.mutation.LicenseTypeFeaturesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   licensetype.LicenseTypeFeaturesTable,
			Columns: []string{licensetype.LicenseTypeFeaturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(licensetypefeatures.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ltu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{licensetype.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ltu.mutation.done = true
	return n, nil
}

// LicenseTypeUpdateOne is the builder for updating a single LicenseType entity.
type LicenseTypeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *LicenseTypeMutation
}

// SetTypeName sets the "type_name" field.
func (ltuo *LicenseTypeUpdateOne) SetTypeName(s string) *LicenseTypeUpdateOne {
	ltuo.mutation.SetTypeName(s)
	return ltuo
}

// SetProductID sets the "product_id" field.
func (ltuo *LicenseTypeUpdateOne) SetProductID(i int) *LicenseTypeUpdateOne {
	ltuo.mutation.SetProductID(i)
	return ltuo
}

// SetUpdatedAt sets the "updated_at" field.
func (ltuo *LicenseTypeUpdateOne) SetUpdatedAt(t time.Time) *LicenseTypeUpdateOne {
	ltuo.mutation.SetUpdatedAt(t)
	return ltuo
}

// SetProduct sets the "product" edge to the Product entity.
func (ltuo *LicenseTypeUpdateOne) SetProduct(p *Product) *LicenseTypeUpdateOne {
	return ltuo.SetProductID(p.ID)
}

// AddFeatureIDs adds the "features" edge to the ProductFeature entity by IDs.
func (ltuo *LicenseTypeUpdateOne) AddFeatureIDs(ids ...int) *LicenseTypeUpdateOne {
	ltuo.mutation.AddFeatureIDs(ids...)
	return ltuo
}

// AddFeatures adds the "features" edges to the ProductFeature entity.
func (ltuo *LicenseTypeUpdateOne) AddFeatures(p ...*ProductFeature) *LicenseTypeUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ltuo.AddFeatureIDs(ids...)
}

// AddDeviceIDs adds the "devices" edge to the Device entity by IDs.
func (ltuo *LicenseTypeUpdateOne) AddDeviceIDs(ids ...int) *LicenseTypeUpdateOne {
	ltuo.mutation.AddDeviceIDs(ids...)
	return ltuo
}

// AddDevices adds the "devices" edges to the Device entity.
func (ltuo *LicenseTypeUpdateOne) AddDevices(d ...*Device) *LicenseTypeUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return ltuo.AddDeviceIDs(ids...)
}

// AddLicenseTypeFeatureIDs adds the "license_type_features" edge to the LicenseTypeFeatures entity by IDs.
func (ltuo *LicenseTypeUpdateOne) AddLicenseTypeFeatureIDs(ids ...int) *LicenseTypeUpdateOne {
	ltuo.mutation.AddLicenseTypeFeatureIDs(ids...)
	return ltuo
}

// AddLicenseTypeFeatures adds the "license_type_features" edges to the LicenseTypeFeatures entity.
func (ltuo *LicenseTypeUpdateOne) AddLicenseTypeFeatures(l ...*LicenseTypeFeatures) *LicenseTypeUpdateOne {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return ltuo.AddLicenseTypeFeatureIDs(ids...)
}

// Mutation returns the LicenseTypeMutation object of the builder.
func (ltuo *LicenseTypeUpdateOne) Mutation() *LicenseTypeMutation {
	return ltuo.mutation
}

// ClearProduct clears the "product" edge to the Product entity.
func (ltuo *LicenseTypeUpdateOne) ClearProduct() *LicenseTypeUpdateOne {
	ltuo.mutation.ClearProduct()
	return ltuo
}

// ClearFeatures clears all "features" edges to the ProductFeature entity.
func (ltuo *LicenseTypeUpdateOne) ClearFeatures() *LicenseTypeUpdateOne {
	ltuo.mutation.ClearFeatures()
	return ltuo
}

// RemoveFeatureIDs removes the "features" edge to ProductFeature entities by IDs.
func (ltuo *LicenseTypeUpdateOne) RemoveFeatureIDs(ids ...int) *LicenseTypeUpdateOne {
	ltuo.mutation.RemoveFeatureIDs(ids...)
	return ltuo
}

// RemoveFeatures removes "features" edges to ProductFeature entities.
func (ltuo *LicenseTypeUpdateOne) RemoveFeatures(p ...*ProductFeature) *LicenseTypeUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ltuo.RemoveFeatureIDs(ids...)
}

// ClearDevices clears all "devices" edges to the Device entity.
func (ltuo *LicenseTypeUpdateOne) ClearDevices() *LicenseTypeUpdateOne {
	ltuo.mutation.ClearDevices()
	return ltuo
}

// RemoveDeviceIDs removes the "devices" edge to Device entities by IDs.
func (ltuo *LicenseTypeUpdateOne) RemoveDeviceIDs(ids ...int) *LicenseTypeUpdateOne {
	ltuo.mutation.RemoveDeviceIDs(ids...)
	return ltuo
}

// RemoveDevices removes "devices" edges to Device entities.
func (ltuo *LicenseTypeUpdateOne) RemoveDevices(d ...*Device) *LicenseTypeUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return ltuo.RemoveDeviceIDs(ids...)
}

// ClearLicenseTypeFeatures clears all "license_type_features" edges to the LicenseTypeFeatures entity.
func (ltuo *LicenseTypeUpdateOne) ClearLicenseTypeFeatures() *LicenseTypeUpdateOne {
	ltuo.mutation.ClearLicenseTypeFeatures()
	return ltuo
}

// RemoveLicenseTypeFeatureIDs removes the "license_type_features" edge to LicenseTypeFeatures entities by IDs.
func (ltuo *LicenseTypeUpdateOne) RemoveLicenseTypeFeatureIDs(ids ...int) *LicenseTypeUpdateOne {
	ltuo.mutation.RemoveLicenseTypeFeatureIDs(ids...)
	return ltuo
}

// RemoveLicenseTypeFeatures removes "license_type_features" edges to LicenseTypeFeatures entities.
func (ltuo *LicenseTypeUpdateOne) RemoveLicenseTypeFeatures(l ...*LicenseTypeFeatures) *LicenseTypeUpdateOne {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return ltuo.RemoveLicenseTypeFeatureIDs(ids...)
}

// Where appends a list predicates to the LicenseTypeUpdate builder.
func (ltuo *LicenseTypeUpdateOne) Where(ps ...predicate.LicenseType) *LicenseTypeUpdateOne {
	ltuo.mutation.Where(ps...)
	return ltuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ltuo *LicenseTypeUpdateOne) Select(field string, fields ...string) *LicenseTypeUpdateOne {
	ltuo.fields = append([]string{field}, fields...)
	return ltuo
}

// Save executes the query and returns the updated LicenseType entity.
func (ltuo *LicenseTypeUpdateOne) Save(ctx context.Context) (*LicenseType, error) {
	ltuo.defaults()
	return withHooks(ctx, ltuo.sqlSave, ltuo.mutation, ltuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ltuo *LicenseTypeUpdateOne) SaveX(ctx context.Context) *LicenseType {
	node, err := ltuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ltuo *LicenseTypeUpdateOne) Exec(ctx context.Context) error {
	_, err := ltuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ltuo *LicenseTypeUpdateOne) ExecX(ctx context.Context) {
	if err := ltuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ltuo *LicenseTypeUpdateOne) defaults() {
	if _, ok := ltuo.mutation.UpdatedAt(); !ok {
		v := licensetype.UpdateDefaultUpdatedAt()
		ltuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ltuo *LicenseTypeUpdateOne) check() error {
	if v, ok := ltuo.mutation.TypeName(); ok {
		if err := licensetype.TypeNameValidator(v); err != nil {
			return &ValidationError{Name: "type_name", err: fmt.Errorf(`ent: validator failed for field "LicenseType.type_name": %w`, err)}
		}
	}
	if _, ok := ltuo.mutation.ProductID(); ltuo.mutation.ProductCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "LicenseType.product"`)
	}
	return nil
}

func (ltuo *LicenseTypeUpdateOne) sqlSave(ctx context.Context) (_node *LicenseType, err error) {
	if err := ltuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(licensetype.Table, licensetype.Columns, sqlgraph.NewFieldSpec(licensetype.FieldID, field.TypeInt))
	id, ok := ltuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "LicenseType.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ltuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, licensetype.FieldID)
		for _, f := range fields {
			if !licensetype.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != licensetype.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ltuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ltuo.mutation.TypeName(); ok {
		_spec.SetField(licensetype.FieldTypeName, field.TypeString, value)
	}
	if value, ok := ltuo.mutation.UpdatedAt(); ok {
		_spec.SetField(licensetype.FieldUpdatedAt, field.TypeTime, value)
	}
	if ltuo.mutation.ProductCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   licensetype.ProductTable,
			Columns: []string{licensetype.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ltuo.mutation.ProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   licensetype.ProductTable,
			Columns: []string{licensetype.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ltuo.mutation.FeaturesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   licensetype.FeaturesTable,
			Columns: licensetype.FeaturesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productfeature.FieldID, field.TypeInt),
			},
		}
		createE := &LicenseTypeFeaturesCreate{config: ltuo.config, mutation: newLicenseTypeFeaturesMutation(ltuo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ltuo.mutation.RemovedFeaturesIDs(); len(nodes) > 0 && !ltuo.mutation.FeaturesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   licensetype.FeaturesTable,
			Columns: licensetype.FeaturesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productfeature.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &LicenseTypeFeaturesCreate{config: ltuo.config, mutation: newLicenseTypeFeaturesMutation(ltuo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ltuo.mutation.FeaturesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   licensetype.FeaturesTable,
			Columns: licensetype.FeaturesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productfeature.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &LicenseTypeFeaturesCreate{config: ltuo.config, mutation: newLicenseTypeFeaturesMutation(ltuo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ltuo.mutation.DevicesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   licensetype.DevicesTable,
			Columns: []string{licensetype.DevicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(device.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ltuo.mutation.RemovedDevicesIDs(); len(nodes) > 0 && !ltuo.mutation.DevicesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   licensetype.DevicesTable,
			Columns: []string{licensetype.DevicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(device.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ltuo.mutation.DevicesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   licensetype.DevicesTable,
			Columns: []string{licensetype.DevicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(device.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ltuo.mutation.LicenseTypeFeaturesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   licensetype.LicenseTypeFeaturesTable,
			Columns: []string{licensetype.LicenseTypeFeaturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(licensetypefeatures.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ltuo.mutation.RemovedLicenseTypeFeaturesIDs(); len(nodes) > 0 && !ltuo.mutation.LicenseTypeFeaturesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   licensetype.LicenseTypeFeaturesTable,
			Columns: []string{licensetype.LicenseTypeFeaturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(licensetypefeatures.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ltuo.mutation.LicenseTypeFeaturesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   licensetype.LicenseTypeFeaturesTable,
			Columns: []string{licensetype.LicenseTypeFeaturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(licensetypefeatures.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &LicenseType{config: ltuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ltuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{licensetype.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ltuo.mutation.done = true
	return _node, nil
}
