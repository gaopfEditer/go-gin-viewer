// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"cambridge-hit.com/gin-base/activateserver/app/entity/ent/firmwareversion"
	"cambridge-hit.com/gin-base/activateserver/app/entity/ent/product"
	"cambridge-hit.com/gin-base/activateserver/app/entity/ent/productfeature"
	"cambridge-hit.com/gin-base/activateserver/app/entity/ent/softwareversion"
	"cambridge-hit.com/gin-base/activateserver/app/entity/ent/user"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SoftwareVersionCreate is the builder for creating a SoftwareVersion entity.
type SoftwareVersionCreate struct {
	config
	mutation *SoftwareVersionMutation
	hooks    []Hook
}

// SetProductID sets the "product_id" field.
func (svc *SoftwareVersionCreate) SetProductID(i int) *SoftwareVersionCreate {
	svc.mutation.SetProductID(i)
	return svc
}

// SetVersion sets the "version" field.
func (svc *SoftwareVersionCreate) SetVersion(s string) *SoftwareVersionCreate {
	svc.mutation.SetVersion(s)
	return svc
}

// SetReleaseDate sets the "release_date" field.
func (svc *SoftwareVersionCreate) SetReleaseDate(t time.Time) *SoftwareVersionCreate {
	svc.mutation.SetReleaseDate(t)
	return svc
}

// SetUpdateLog sets the "update_log" field.
func (svc *SoftwareVersionCreate) SetUpdateLog(s string) *SoftwareVersionCreate {
	svc.mutation.SetUpdateLog(s)
	return svc
}

// SetNillableUpdateLog sets the "update_log" field if the given value is not nil.
func (svc *SoftwareVersionCreate) SetNillableUpdateLog(s *string) *SoftwareVersionCreate {
	if s != nil {
		svc.SetUpdateLog(*s)
	}
	return svc
}

// SetRemark sets the "remark" field.
func (svc *SoftwareVersionCreate) SetRemark(s string) *SoftwareVersionCreate {
	svc.mutation.SetRemark(s)
	return svc
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (svc *SoftwareVersionCreate) SetNillableRemark(s *string) *SoftwareVersionCreate {
	if s != nil {
		svc.SetRemark(*s)
	}
	return svc
}

// SetCreatedBy sets the "created_by" field.
func (svc *SoftwareVersionCreate) SetCreatedBy(i int) *SoftwareVersionCreate {
	svc.mutation.SetCreatedBy(i)
	return svc
}

// SetCreatedAt sets the "created_at" field.
func (svc *SoftwareVersionCreate) SetCreatedAt(t time.Time) *SoftwareVersionCreate {
	svc.mutation.SetCreatedAt(t)
	return svc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (svc *SoftwareVersionCreate) SetNillableCreatedAt(t *time.Time) *SoftwareVersionCreate {
	if t != nil {
		svc.SetCreatedAt(*t)
	}
	return svc
}

// SetUpdatedAt sets the "updated_at" field.
func (svc *SoftwareVersionCreate) SetUpdatedAt(t time.Time) *SoftwareVersionCreate {
	svc.mutation.SetUpdatedAt(t)
	return svc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (svc *SoftwareVersionCreate) SetNillableUpdatedAt(t *time.Time) *SoftwareVersionCreate {
	if t != nil {
		svc.SetUpdatedAt(*t)
	}
	return svc
}

// AddFeatureIDs adds the "features" edge to the ProductFeature entity by IDs.
func (svc *SoftwareVersionCreate) AddFeatureIDs(ids ...int) *SoftwareVersionCreate {
	svc.mutation.AddFeatureIDs(ids...)
	return svc
}

// AddFeatures adds the "features" edges to the ProductFeature entity.
func (svc *SoftwareVersionCreate) AddFeatures(p ...*ProductFeature) *SoftwareVersionCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return svc.AddFeatureIDs(ids...)
}

// AddFirmwareVersionIDs adds the "firmware_versions" edge to the FirmwareVersion entity by IDs.
func (svc *SoftwareVersionCreate) AddFirmwareVersionIDs(ids ...int) *SoftwareVersionCreate {
	svc.mutation.AddFirmwareVersionIDs(ids...)
	return svc
}

// AddFirmwareVersions adds the "firmware_versions" edges to the FirmwareVersion entity.
func (svc *SoftwareVersionCreate) AddFirmwareVersions(f ...*FirmwareVersion) *SoftwareVersionCreate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return svc.AddFirmwareVersionIDs(ids...)
}

// SetProduct sets the "product" edge to the Product entity.
func (svc *SoftwareVersionCreate) SetProduct(p *Product) *SoftwareVersionCreate {
	return svc.SetProductID(p.ID)
}

// SetCreatorID sets the "creator" edge to the User entity by ID.
func (svc *SoftwareVersionCreate) SetCreatorID(id int) *SoftwareVersionCreate {
	svc.mutation.SetCreatorID(id)
	return svc
}

// SetCreator sets the "creator" edge to the User entity.
func (svc *SoftwareVersionCreate) SetCreator(u *User) *SoftwareVersionCreate {
	return svc.SetCreatorID(u.ID)
}

// Mutation returns the SoftwareVersionMutation object of the builder.
func (svc *SoftwareVersionCreate) Mutation() *SoftwareVersionMutation {
	return svc.mutation
}

// Save creates the SoftwareVersion in the database.
func (svc *SoftwareVersionCreate) Save(ctx context.Context) (*SoftwareVersion, error) {
	svc.defaults()
	return withHooks(ctx, svc.sqlSave, svc.mutation, svc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (svc *SoftwareVersionCreate) SaveX(ctx context.Context) *SoftwareVersion {
	v, err := svc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (svc *SoftwareVersionCreate) Exec(ctx context.Context) error {
	_, err := svc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (svc *SoftwareVersionCreate) ExecX(ctx context.Context) {
	if err := svc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (svc *SoftwareVersionCreate) defaults() {
	if _, ok := svc.mutation.CreatedAt(); !ok {
		v := softwareversion.DefaultCreatedAt()
		svc.mutation.SetCreatedAt(v)
	}
	if _, ok := svc.mutation.UpdatedAt(); !ok {
		v := softwareversion.DefaultUpdatedAt()
		svc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (svc *SoftwareVersionCreate) check() error {
	if _, ok := svc.mutation.ProductID(); !ok {
		return &ValidationError{Name: "product_id", err: errors.New(`ent: missing required field "SoftwareVersion.product_id"`)}
	}
	if _, ok := svc.mutation.Version(); !ok {
		return &ValidationError{Name: "version", err: errors.New(`ent: missing required field "SoftwareVersion.version"`)}
	}
	if v, ok := svc.mutation.Version(); ok {
		if err := softwareversion.VersionValidator(v); err != nil {
			return &ValidationError{Name: "version", err: fmt.Errorf(`ent: validator failed for field "SoftwareVersion.version": %w`, err)}
		}
	}
	if _, ok := svc.mutation.ReleaseDate(); !ok {
		return &ValidationError{Name: "release_date", err: errors.New(`ent: missing required field "SoftwareVersion.release_date"`)}
	}
	if _, ok := svc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`ent: missing required field "SoftwareVersion.created_by"`)}
	}
	if _, ok := svc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "SoftwareVersion.created_at"`)}
	}
	if _, ok := svc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "SoftwareVersion.updated_at"`)}
	}
	if _, ok := svc.mutation.ProductID(); !ok {
		return &ValidationError{Name: "product", err: errors.New(`ent: missing required edge "SoftwareVersion.product"`)}
	}
	if _, ok := svc.mutation.CreatorID(); !ok {
		return &ValidationError{Name: "creator", err: errors.New(`ent: missing required edge "SoftwareVersion.creator"`)}
	}
	return nil
}

func (svc *SoftwareVersionCreate) sqlSave(ctx context.Context) (*SoftwareVersion, error) {
	if err := svc.check(); err != nil {
		return nil, err
	}
	_node, _spec := svc.createSpec()
	if err := sqlgraph.CreateNode(ctx, svc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	svc.mutation.id = &_node.ID
	svc.mutation.done = true
	return _node, nil
}

func (svc *SoftwareVersionCreate) createSpec() (*SoftwareVersion, *sqlgraph.CreateSpec) {
	var (
		_node = &SoftwareVersion{config: svc.config}
		_spec = sqlgraph.NewCreateSpec(softwareversion.Table, sqlgraph.NewFieldSpec(softwareversion.FieldID, field.TypeInt))
	)
	if value, ok := svc.mutation.Version(); ok {
		_spec.SetField(softwareversion.FieldVersion, field.TypeString, value)
		_node.Version = value
	}
	if value, ok := svc.mutation.ReleaseDate(); ok {
		_spec.SetField(softwareversion.FieldReleaseDate, field.TypeTime, value)
		_node.ReleaseDate = value
	}
	if value, ok := svc.mutation.UpdateLog(); ok {
		_spec.SetField(softwareversion.FieldUpdateLog, field.TypeString, value)
		_node.UpdateLog = value
	}
	if value, ok := svc.mutation.Remark(); ok {
		_spec.SetField(softwareversion.FieldRemark, field.TypeString, value)
		_node.Remark = value
	}
	if value, ok := svc.mutation.CreatedAt(); ok {
		_spec.SetField(softwareversion.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := svc.mutation.UpdatedAt(); ok {
		_spec.SetField(softwareversion.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := svc.mutation.FeaturesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   softwareversion.FeaturesTable,
			Columns: softwareversion.FeaturesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productfeature.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := svc.mutation.FirmwareVersionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   softwareversion.FirmwareVersionsTable,
			Columns: softwareversion.FirmwareVersionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(firmwareversion.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := svc.mutation.ProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   softwareversion.ProductTable,
			Columns: []string{softwareversion.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ProductID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := svc.mutation.CreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   softwareversion.CreatorTable,
			Columns: []string{softwareversion.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CreatedBy = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// SoftwareVersionCreateBulk is the builder for creating many SoftwareVersion entities in bulk.
type SoftwareVersionCreateBulk struct {
	config
	err      error
	builders []*SoftwareVersionCreate
}

// Save creates the SoftwareVersion entities in the database.
func (svcb *SoftwareVersionCreateBulk) Save(ctx context.Context) ([]*SoftwareVersion, error) {
	if svcb.err != nil {
		return nil, svcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(svcb.builders))
	nodes := make([]*SoftwareVersion, len(svcb.builders))
	mutators := make([]Mutator, len(svcb.builders))
	for i := range svcb.builders {
		func(i int, root context.Context) {
			builder := svcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SoftwareVersionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, svcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, svcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, svcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (svcb *SoftwareVersionCreateBulk) SaveX(ctx context.Context) []*SoftwareVersion {
	v, err := svcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (svcb *SoftwareVersionCreateBulk) Exec(ctx context.Context) error {
	_, err := svcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (svcb *SoftwareVersionCreateBulk) ExecX(ctx context.Context) {
	if err := svcb.Exec(ctx); err != nil {
		panic(err)
	}
}
