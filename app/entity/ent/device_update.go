// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"cambridge-hit.com/gin-base/activateserver/app/entity/ent/device"
	"cambridge-hit.com/gin-base/activateserver/app/entity/ent/licensetype"
	"cambridge-hit.com/gin-base/activateserver/app/entity/ent/predicate"
	"cambridge-hit.com/gin-base/activateserver/app/entity/ent/product"
	"cambridge-hit.com/gin-base/activateserver/app/entity/ent/user"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DeviceUpdate is the builder for updating Device entities.
type DeviceUpdate struct {
	config
	hooks    []Hook
	mutation *DeviceMutation
}

// Where appends a list predicates to the DeviceUpdate builder.
func (du *DeviceUpdate) Where(ps ...predicate.Device) *DeviceUpdate {
	du.mutation.Where(ps...)
	return du
}

// SetSn sets the "sn" field.
func (du *DeviceUpdate) SetSn(s string) *DeviceUpdate {
	du.mutation.SetSn(s)
	return du
}

// SetProductID sets the "product_id" field.
func (du *DeviceUpdate) SetProductID(i int) *DeviceUpdate {
	du.mutation.SetProductID(i)
	return du
}

// SetLicenseTypeID sets the "license_type_id" field.
func (du *DeviceUpdate) SetLicenseTypeID(i int) *DeviceUpdate {
	du.mutation.SetLicenseTypeID(i)
	return du
}

// SetNillableLicenseTypeID sets the "license_type_id" field if the given value is not nil.
func (du *DeviceUpdate) SetNillableLicenseTypeID(i *int) *DeviceUpdate {
	if i != nil {
		du.SetLicenseTypeID(*i)
	}
	return du
}

// ClearLicenseTypeID clears the value of the "license_type_id" field.
func (du *DeviceUpdate) ClearLicenseTypeID() *DeviceUpdate {
	du.mutation.ClearLicenseTypeID()
	return du
}

// SetOemTag sets the "oem_tag" field.
func (du *DeviceUpdate) SetOemTag(s string) *DeviceUpdate {
	du.mutation.SetOemTag(s)
	return du
}

// SetNillableOemTag sets the "oem_tag" field if the given value is not nil.
func (du *DeviceUpdate) SetNillableOemTag(s *string) *DeviceUpdate {
	if s != nil {
		du.SetOemTag(*s)
	}
	return du
}

// ClearOemTag clears the value of the "oem_tag" field.
func (du *DeviceUpdate) ClearOemTag() *DeviceUpdate {
	du.mutation.ClearOemTag()
	return du
}

// SetRemark sets the "remark" field.
func (du *DeviceUpdate) SetRemark(s string) *DeviceUpdate {
	du.mutation.SetRemark(s)
	return du
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (du *DeviceUpdate) SetNillableRemark(s *string) *DeviceUpdate {
	if s != nil {
		du.SetRemark(*s)
	}
	return du
}

// ClearRemark clears the value of the "remark" field.
func (du *DeviceUpdate) ClearRemark() *DeviceUpdate {
	du.mutation.ClearRemark()
	return du
}

// SetCreatedAt sets the "created_at" field.
func (du *DeviceUpdate) SetCreatedAt(t time.Time) *DeviceUpdate {
	du.mutation.SetCreatedAt(t)
	return du
}

// SetCreatedBy sets the "created_by" field.
func (du *DeviceUpdate) SetCreatedBy(i int) *DeviceUpdate {
	du.mutation.SetCreatedBy(i)
	return du
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (du *DeviceUpdate) SetNillableCreatedBy(i *int) *DeviceUpdate {
	if i != nil {
		du.SetCreatedBy(*i)
	}
	return du
}

// ClearCreatedBy clears the value of the "created_by" field.
func (du *DeviceUpdate) ClearCreatedBy() *DeviceUpdate {
	du.mutation.ClearCreatedBy()
	return du
}

// SetUpdatedAt sets the "updated_at" field.
func (du *DeviceUpdate) SetUpdatedAt(t time.Time) *DeviceUpdate {
	du.mutation.SetUpdatedAt(t)
	return du
}

// SetUpdatedBy sets the "updated_by" field.
func (du *DeviceUpdate) SetUpdatedBy(i int) *DeviceUpdate {
	du.mutation.SetUpdatedBy(i)
	return du
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (du *DeviceUpdate) SetNillableUpdatedBy(i *int) *DeviceUpdate {
	if i != nil {
		du.SetUpdatedBy(*i)
	}
	return du
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (du *DeviceUpdate) ClearUpdatedBy() *DeviceUpdate {
	du.mutation.ClearUpdatedBy()
	return du
}

// SetProduct sets the "product" edge to the Product entity.
func (du *DeviceUpdate) SetProduct(p *Product) *DeviceUpdate {
	return du.SetProductID(p.ID)
}

// SetLicenseType sets the "license_type" edge to the LicenseType entity.
func (du *DeviceUpdate) SetLicenseType(l *LicenseType) *DeviceUpdate {
	return du.SetLicenseTypeID(l.ID)
}

// SetCreatorID sets the "creator" edge to the User entity by ID.
func (du *DeviceUpdate) SetCreatorID(id int) *DeviceUpdate {
	du.mutation.SetCreatorID(id)
	return du
}

// SetNillableCreatorID sets the "creator" edge to the User entity by ID if the given value is not nil.
func (du *DeviceUpdate) SetNillableCreatorID(id *int) *DeviceUpdate {
	if id != nil {
		du = du.SetCreatorID(*id)
	}
	return du
}

// SetCreator sets the "creator" edge to the User entity.
func (du *DeviceUpdate) SetCreator(u *User) *DeviceUpdate {
	return du.SetCreatorID(u.ID)
}

// SetUpdaterID sets the "updater" edge to the User entity by ID.
func (du *DeviceUpdate) SetUpdaterID(id int) *DeviceUpdate {
	du.mutation.SetUpdaterID(id)
	return du
}

// SetNillableUpdaterID sets the "updater" edge to the User entity by ID if the given value is not nil.
func (du *DeviceUpdate) SetNillableUpdaterID(id *int) *DeviceUpdate {
	if id != nil {
		du = du.SetUpdaterID(*id)
	}
	return du
}

// SetUpdater sets the "updater" edge to the User entity.
func (du *DeviceUpdate) SetUpdater(u *User) *DeviceUpdate {
	return du.SetUpdaterID(u.ID)
}

// Mutation returns the DeviceMutation object of the builder.
func (du *DeviceUpdate) Mutation() *DeviceMutation {
	return du.mutation
}

// ClearProduct clears the "product" edge to the Product entity.
func (du *DeviceUpdate) ClearProduct() *DeviceUpdate {
	du.mutation.ClearProduct()
	return du
}

// ClearLicenseType clears the "license_type" edge to the LicenseType entity.
func (du *DeviceUpdate) ClearLicenseType() *DeviceUpdate {
	du.mutation.ClearLicenseType()
	return du
}

// ClearCreator clears the "creator" edge to the User entity.
func (du *DeviceUpdate) ClearCreator() *DeviceUpdate {
	du.mutation.ClearCreator()
	return du
}

// ClearUpdater clears the "updater" edge to the User entity.
func (du *DeviceUpdate) ClearUpdater() *DeviceUpdate {
	du.mutation.ClearUpdater()
	return du
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (du *DeviceUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, du.sqlSave, du.mutation, du.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (du *DeviceUpdate) SaveX(ctx context.Context) int {
	affected, err := du.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (du *DeviceUpdate) Exec(ctx context.Context) error {
	_, err := du.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (du *DeviceUpdate) ExecX(ctx context.Context) {
	if err := du.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (du *DeviceUpdate) check() error {
	if _, ok := du.mutation.ProductID(); du.mutation.ProductCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Device.product"`)
	}
	return nil
}

func (du *DeviceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := du.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(device.Table, device.Columns, sqlgraph.NewFieldSpec(device.FieldID, field.TypeInt))
	if ps := du.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := du.mutation.Sn(); ok {
		_spec.SetField(device.FieldSn, field.TypeString, value)
	}
	if value, ok := du.mutation.OemTag(); ok {
		_spec.SetField(device.FieldOemTag, field.TypeString, value)
	}
	if du.mutation.OemTagCleared() {
		_spec.ClearField(device.FieldOemTag, field.TypeString)
	}
	if value, ok := du.mutation.Remark(); ok {
		_spec.SetField(device.FieldRemark, field.TypeString, value)
	}
	if du.mutation.RemarkCleared() {
		_spec.ClearField(device.FieldRemark, field.TypeString)
	}
	if value, ok := du.mutation.CreatedAt(); ok {
		_spec.SetField(device.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := du.mutation.UpdatedAt(); ok {
		_spec.SetField(device.FieldUpdatedAt, field.TypeTime, value)
	}
	if du.mutation.ProductCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   device.ProductTable,
			Columns: []string{device.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.ProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   device.ProductTable,
			Columns: []string{device.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if du.mutation.LicenseTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   device.LicenseTypeTable,
			Columns: []string{device.LicenseTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(licensetype.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.LicenseTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   device.LicenseTypeTable,
			Columns: []string{device.LicenseTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(licensetype.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if du.mutation.CreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   device.CreatorTable,
			Columns: []string{device.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.CreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   device.CreatorTable,
			Columns: []string{device.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if du.mutation.UpdaterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   device.UpdaterTable,
			Columns: []string{device.UpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.UpdaterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   device.UpdaterTable,
			Columns: []string{device.UpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, du.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{device.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	du.mutation.done = true
	return n, nil
}

// DeviceUpdateOne is the builder for updating a single Device entity.
type DeviceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DeviceMutation
}

// SetSn sets the "sn" field.
func (duo *DeviceUpdateOne) SetSn(s string) *DeviceUpdateOne {
	duo.mutation.SetSn(s)
	return duo
}

// SetProductID sets the "product_id" field.
func (duo *DeviceUpdateOne) SetProductID(i int) *DeviceUpdateOne {
	duo.mutation.SetProductID(i)
	return duo
}

// SetLicenseTypeID sets the "license_type_id" field.
func (duo *DeviceUpdateOne) SetLicenseTypeID(i int) *DeviceUpdateOne {
	duo.mutation.SetLicenseTypeID(i)
	return duo
}

// SetNillableLicenseTypeID sets the "license_type_id" field if the given value is not nil.
func (duo *DeviceUpdateOne) SetNillableLicenseTypeID(i *int) *DeviceUpdateOne {
	if i != nil {
		duo.SetLicenseTypeID(*i)
	}
	return duo
}

// ClearLicenseTypeID clears the value of the "license_type_id" field.
func (duo *DeviceUpdateOne) ClearLicenseTypeID() *DeviceUpdateOne {
	duo.mutation.ClearLicenseTypeID()
	return duo
}

// SetOemTag sets the "oem_tag" field.
func (duo *DeviceUpdateOne) SetOemTag(s string) *DeviceUpdateOne {
	duo.mutation.SetOemTag(s)
	return duo
}

// SetNillableOemTag sets the "oem_tag" field if the given value is not nil.
func (duo *DeviceUpdateOne) SetNillableOemTag(s *string) *DeviceUpdateOne {
	if s != nil {
		duo.SetOemTag(*s)
	}
	return duo
}

// ClearOemTag clears the value of the "oem_tag" field.
func (duo *DeviceUpdateOne) ClearOemTag() *DeviceUpdateOne {
	duo.mutation.ClearOemTag()
	return duo
}

// SetRemark sets the "remark" field.
func (duo *DeviceUpdateOne) SetRemark(s string) *DeviceUpdateOne {
	duo.mutation.SetRemark(s)
	return duo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (duo *DeviceUpdateOne) SetNillableRemark(s *string) *DeviceUpdateOne {
	if s != nil {
		duo.SetRemark(*s)
	}
	return duo
}

// ClearRemark clears the value of the "remark" field.
func (duo *DeviceUpdateOne) ClearRemark() *DeviceUpdateOne {
	duo.mutation.ClearRemark()
	return duo
}

// SetCreatedAt sets the "created_at" field.
func (duo *DeviceUpdateOne) SetCreatedAt(t time.Time) *DeviceUpdateOne {
	duo.mutation.SetCreatedAt(t)
	return duo
}

// SetCreatedBy sets the "created_by" field.
func (duo *DeviceUpdateOne) SetCreatedBy(i int) *DeviceUpdateOne {
	duo.mutation.SetCreatedBy(i)
	return duo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (duo *DeviceUpdateOne) SetNillableCreatedBy(i *int) *DeviceUpdateOne {
	if i != nil {
		duo.SetCreatedBy(*i)
	}
	return duo
}

// ClearCreatedBy clears the value of the "created_by" field.
func (duo *DeviceUpdateOne) ClearCreatedBy() *DeviceUpdateOne {
	duo.mutation.ClearCreatedBy()
	return duo
}

// SetUpdatedAt sets the "updated_at" field.
func (duo *DeviceUpdateOne) SetUpdatedAt(t time.Time) *DeviceUpdateOne {
	duo.mutation.SetUpdatedAt(t)
	return duo
}

// SetUpdatedBy sets the "updated_by" field.
func (duo *DeviceUpdateOne) SetUpdatedBy(i int) *DeviceUpdateOne {
	duo.mutation.SetUpdatedBy(i)
	return duo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (duo *DeviceUpdateOne) SetNillableUpdatedBy(i *int) *DeviceUpdateOne {
	if i != nil {
		duo.SetUpdatedBy(*i)
	}
	return duo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (duo *DeviceUpdateOne) ClearUpdatedBy() *DeviceUpdateOne {
	duo.mutation.ClearUpdatedBy()
	return duo
}

// SetProduct sets the "product" edge to the Product entity.
func (duo *DeviceUpdateOne) SetProduct(p *Product) *DeviceUpdateOne {
	return duo.SetProductID(p.ID)
}

// SetLicenseType sets the "license_type" edge to the LicenseType entity.
func (duo *DeviceUpdateOne) SetLicenseType(l *LicenseType) *DeviceUpdateOne {
	return duo.SetLicenseTypeID(l.ID)
}

// SetCreatorID sets the "creator" edge to the User entity by ID.
func (duo *DeviceUpdateOne) SetCreatorID(id int) *DeviceUpdateOne {
	duo.mutation.SetCreatorID(id)
	return duo
}

// SetNillableCreatorID sets the "creator" edge to the User entity by ID if the given value is not nil.
func (duo *DeviceUpdateOne) SetNillableCreatorID(id *int) *DeviceUpdateOne {
	if id != nil {
		duo = duo.SetCreatorID(*id)
	}
	return duo
}

// SetCreator sets the "creator" edge to the User entity.
func (duo *DeviceUpdateOne) SetCreator(u *User) *DeviceUpdateOne {
	return duo.SetCreatorID(u.ID)
}

// SetUpdaterID sets the "updater" edge to the User entity by ID.
func (duo *DeviceUpdateOne) SetUpdaterID(id int) *DeviceUpdateOne {
	duo.mutation.SetUpdaterID(id)
	return duo
}

// SetNillableUpdaterID sets the "updater" edge to the User entity by ID if the given value is not nil.
func (duo *DeviceUpdateOne) SetNillableUpdaterID(id *int) *DeviceUpdateOne {
	if id != nil {
		duo = duo.SetUpdaterID(*id)
	}
	return duo
}

// SetUpdater sets the "updater" edge to the User entity.
func (duo *DeviceUpdateOne) SetUpdater(u *User) *DeviceUpdateOne {
	return duo.SetUpdaterID(u.ID)
}

// Mutation returns the DeviceMutation object of the builder.
func (duo *DeviceUpdateOne) Mutation() *DeviceMutation {
	return duo.mutation
}

// ClearProduct clears the "product" edge to the Product entity.
func (duo *DeviceUpdateOne) ClearProduct() *DeviceUpdateOne {
	duo.mutation.ClearProduct()
	return duo
}

// ClearLicenseType clears the "license_type" edge to the LicenseType entity.
func (duo *DeviceUpdateOne) ClearLicenseType() *DeviceUpdateOne {
	duo.mutation.ClearLicenseType()
	return duo
}

// ClearCreator clears the "creator" edge to the User entity.
func (duo *DeviceUpdateOne) ClearCreator() *DeviceUpdateOne {
	duo.mutation.ClearCreator()
	return duo
}

// ClearUpdater clears the "updater" edge to the User entity.
func (duo *DeviceUpdateOne) ClearUpdater() *DeviceUpdateOne {
	duo.mutation.ClearUpdater()
	return duo
}

// Where appends a list predicates to the DeviceUpdate builder.
func (duo *DeviceUpdateOne) Where(ps ...predicate.Device) *DeviceUpdateOne {
	duo.mutation.Where(ps...)
	return duo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (duo *DeviceUpdateOne) Select(field string, fields ...string) *DeviceUpdateOne {
	duo.fields = append([]string{field}, fields...)
	return duo
}

// Save executes the query and returns the updated Device entity.
func (duo *DeviceUpdateOne) Save(ctx context.Context) (*Device, error) {
	return withHooks(ctx, duo.sqlSave, duo.mutation, duo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (duo *DeviceUpdateOne) SaveX(ctx context.Context) *Device {
	node, err := duo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (duo *DeviceUpdateOne) Exec(ctx context.Context) error {
	_, err := duo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (duo *DeviceUpdateOne) ExecX(ctx context.Context) {
	if err := duo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (duo *DeviceUpdateOne) check() error {
	if _, ok := duo.mutation.ProductID(); duo.mutation.ProductCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Device.product"`)
	}
	return nil
}

func (duo *DeviceUpdateOne) sqlSave(ctx context.Context) (_node *Device, err error) {
	if err := duo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(device.Table, device.Columns, sqlgraph.NewFieldSpec(device.FieldID, field.TypeInt))
	id, ok := duo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Device.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := duo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, device.FieldID)
		for _, f := range fields {
			if !device.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != device.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := duo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := duo.mutation.Sn(); ok {
		_spec.SetField(device.FieldSn, field.TypeString, value)
	}
	if value, ok := duo.mutation.OemTag(); ok {
		_spec.SetField(device.FieldOemTag, field.TypeString, value)
	}
	if duo.mutation.OemTagCleared() {
		_spec.ClearField(device.FieldOemTag, field.TypeString)
	}
	if value, ok := duo.mutation.Remark(); ok {
		_spec.SetField(device.FieldRemark, field.TypeString, value)
	}
	if duo.mutation.RemarkCleared() {
		_spec.ClearField(device.FieldRemark, field.TypeString)
	}
	if value, ok := duo.mutation.CreatedAt(); ok {
		_spec.SetField(device.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := duo.mutation.UpdatedAt(); ok {
		_spec.SetField(device.FieldUpdatedAt, field.TypeTime, value)
	}
	if duo.mutation.ProductCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   device.ProductTable,
			Columns: []string{device.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.ProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   device.ProductTable,
			Columns: []string{device.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if duo.mutation.LicenseTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   device.LicenseTypeTable,
			Columns: []string{device.LicenseTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(licensetype.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.LicenseTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   device.LicenseTypeTable,
			Columns: []string{device.LicenseTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(licensetype.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if duo.mutation.CreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   device.CreatorTable,
			Columns: []string{device.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.CreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   device.CreatorTable,
			Columns: []string{device.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if duo.mutation.UpdaterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   device.UpdaterTable,
			Columns: []string{device.UpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.UpdaterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   device.UpdaterTable,
			Columns: []string{device.UpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Device{config: duo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, duo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{device.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	duo.mutation.done = true
	return _node, nil
}
