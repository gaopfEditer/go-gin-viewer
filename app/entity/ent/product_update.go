// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"cambridge-hit.com/gin-base/activateserver/app/entity/ent/auditlog"
	"cambridge-hit.com/gin-base/activateserver/app/entity/ent/device"
	"cambridge-hit.com/gin-base/activateserver/app/entity/ent/firmwareversion"
	"cambridge-hit.com/gin-base/activateserver/app/entity/ent/licensetype"
	"cambridge-hit.com/gin-base/activateserver/app/entity/ent/predicate"
	"cambridge-hit.com/gin-base/activateserver/app/entity/ent/product"
	"cambridge-hit.com/gin-base/activateserver/app/entity/ent/productfeature"
	"cambridge-hit.com/gin-base/activateserver/app/entity/ent/productmanager"
	"cambridge-hit.com/gin-base/activateserver/app/entity/ent/softwareversion"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ProductUpdate is the builder for updating Product entities.
type ProductUpdate struct {
	config
	hooks    []Hook
	mutation *ProductMutation
}

// Where appends a list predicates to the ProductUpdate builder.
func (pu *ProductUpdate) Where(ps ...predicate.Product) *ProductUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetCode sets the "code" field.
func (pu *ProductUpdate) SetCode(s string) *ProductUpdate {
	pu.mutation.SetCode(s)
	return pu
}

// SetProductType sets the "product_type" field.
func (pu *ProductUpdate) SetProductType(s string) *ProductUpdate {
	pu.mutation.SetProductType(s)
	return pu
}

// SetNillableProductType sets the "product_type" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableProductType(s *string) *ProductUpdate {
	if s != nil {
		pu.SetProductType(*s)
	}
	return pu
}

// ClearProductType clears the value of the "product_type" field.
func (pu *ProductUpdate) ClearProductType() *ProductUpdate {
	pu.mutation.ClearProductType()
	return pu
}

// SetProductName sets the "product_name" field.
func (pu *ProductUpdate) SetProductName(s string) *ProductUpdate {
	pu.mutation.SetProductName(s)
	return pu
}

// SetUpdatedAt sets the "updated_at" field.
func (pu *ProductUpdate) SetUpdatedAt(t time.Time) *ProductUpdate {
	pu.mutation.SetUpdatedAt(t)
	return pu
}

// AddManagerIDs adds the "managers" edge to the ProductManager entity by IDs.
func (pu *ProductUpdate) AddManagerIDs(ids ...int) *ProductUpdate {
	pu.mutation.AddManagerIDs(ids...)
	return pu
}

// AddManagers adds the "managers" edges to the ProductManager entity.
func (pu *ProductUpdate) AddManagers(p ...*ProductManager) *ProductUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.AddManagerIDs(ids...)
}

// AddLicenseTypeIDs adds the "license_types" edge to the LicenseType entity by IDs.
func (pu *ProductUpdate) AddLicenseTypeIDs(ids ...int) *ProductUpdate {
	pu.mutation.AddLicenseTypeIDs(ids...)
	return pu
}

// AddLicenseTypes adds the "license_types" edges to the LicenseType entity.
func (pu *ProductUpdate) AddLicenseTypes(l ...*LicenseType) *ProductUpdate {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return pu.AddLicenseTypeIDs(ids...)
}

// AddFeatureIDs adds the "features" edge to the ProductFeature entity by IDs.
func (pu *ProductUpdate) AddFeatureIDs(ids ...int) *ProductUpdate {
	pu.mutation.AddFeatureIDs(ids...)
	return pu
}

// AddFeatures adds the "features" edges to the ProductFeature entity.
func (pu *ProductUpdate) AddFeatures(p ...*ProductFeature) *ProductUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.AddFeatureIDs(ids...)
}

// AddFirmwareVersionIDs adds the "firmware_versions" edge to the FirmwareVersion entity by IDs.
func (pu *ProductUpdate) AddFirmwareVersionIDs(ids ...int) *ProductUpdate {
	pu.mutation.AddFirmwareVersionIDs(ids...)
	return pu
}

// AddFirmwareVersions adds the "firmware_versions" edges to the FirmwareVersion entity.
func (pu *ProductUpdate) AddFirmwareVersions(f ...*FirmwareVersion) *ProductUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return pu.AddFirmwareVersionIDs(ids...)
}

// AddSoftwareVersionIDs adds the "software_versions" edge to the SoftwareVersion entity by IDs.
func (pu *ProductUpdate) AddSoftwareVersionIDs(ids ...int) *ProductUpdate {
	pu.mutation.AddSoftwareVersionIDs(ids...)
	return pu
}

// AddSoftwareVersions adds the "software_versions" edges to the SoftwareVersion entity.
func (pu *ProductUpdate) AddSoftwareVersions(s ...*SoftwareVersion) *ProductUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return pu.AddSoftwareVersionIDs(ids...)
}

// AddDeviceIDs adds the "devices" edge to the Device entity by IDs.
func (pu *ProductUpdate) AddDeviceIDs(ids ...int) *ProductUpdate {
	pu.mutation.AddDeviceIDs(ids...)
	return pu
}

// AddDevices adds the "devices" edges to the Device entity.
func (pu *ProductUpdate) AddDevices(d ...*Device) *ProductUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return pu.AddDeviceIDs(ids...)
}

// AddAuditLogIDs adds the "audit_logs" edge to the AuditLog entity by IDs.
func (pu *ProductUpdate) AddAuditLogIDs(ids ...int) *ProductUpdate {
	pu.mutation.AddAuditLogIDs(ids...)
	return pu
}

// AddAuditLogs adds the "audit_logs" edges to the AuditLog entity.
func (pu *ProductUpdate) AddAuditLogs(a ...*AuditLog) *ProductUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return pu.AddAuditLogIDs(ids...)
}

// Mutation returns the ProductMutation object of the builder.
func (pu *ProductUpdate) Mutation() *ProductMutation {
	return pu.mutation
}

// ClearManagers clears all "managers" edges to the ProductManager entity.
func (pu *ProductUpdate) ClearManagers() *ProductUpdate {
	pu.mutation.ClearManagers()
	return pu
}

// RemoveManagerIDs removes the "managers" edge to ProductManager entities by IDs.
func (pu *ProductUpdate) RemoveManagerIDs(ids ...int) *ProductUpdate {
	pu.mutation.RemoveManagerIDs(ids...)
	return pu
}

// RemoveManagers removes "managers" edges to ProductManager entities.
func (pu *ProductUpdate) RemoveManagers(p ...*ProductManager) *ProductUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.RemoveManagerIDs(ids...)
}

// ClearLicenseTypes clears all "license_types" edges to the LicenseType entity.
func (pu *ProductUpdate) ClearLicenseTypes() *ProductUpdate {
	pu.mutation.ClearLicenseTypes()
	return pu
}

// RemoveLicenseTypeIDs removes the "license_types" edge to LicenseType entities by IDs.
func (pu *ProductUpdate) RemoveLicenseTypeIDs(ids ...int) *ProductUpdate {
	pu.mutation.RemoveLicenseTypeIDs(ids...)
	return pu
}

// RemoveLicenseTypes removes "license_types" edges to LicenseType entities.
func (pu *ProductUpdate) RemoveLicenseTypes(l ...*LicenseType) *ProductUpdate {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return pu.RemoveLicenseTypeIDs(ids...)
}

// ClearFeatures clears all "features" edges to the ProductFeature entity.
func (pu *ProductUpdate) ClearFeatures() *ProductUpdate {
	pu.mutation.ClearFeatures()
	return pu
}

// RemoveFeatureIDs removes the "features" edge to ProductFeature entities by IDs.
func (pu *ProductUpdate) RemoveFeatureIDs(ids ...int) *ProductUpdate {
	pu.mutation.RemoveFeatureIDs(ids...)
	return pu
}

// RemoveFeatures removes "features" edges to ProductFeature entities.
func (pu *ProductUpdate) RemoveFeatures(p ...*ProductFeature) *ProductUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.RemoveFeatureIDs(ids...)
}

// ClearFirmwareVersions clears all "firmware_versions" edges to the FirmwareVersion entity.
func (pu *ProductUpdate) ClearFirmwareVersions() *ProductUpdate {
	pu.mutation.ClearFirmwareVersions()
	return pu
}

// RemoveFirmwareVersionIDs removes the "firmware_versions" edge to FirmwareVersion entities by IDs.
func (pu *ProductUpdate) RemoveFirmwareVersionIDs(ids ...int) *ProductUpdate {
	pu.mutation.RemoveFirmwareVersionIDs(ids...)
	return pu
}

// RemoveFirmwareVersions removes "firmware_versions" edges to FirmwareVersion entities.
func (pu *ProductUpdate) RemoveFirmwareVersions(f ...*FirmwareVersion) *ProductUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return pu.RemoveFirmwareVersionIDs(ids...)
}

// ClearSoftwareVersions clears all "software_versions" edges to the SoftwareVersion entity.
func (pu *ProductUpdate) ClearSoftwareVersions() *ProductUpdate {
	pu.mutation.ClearSoftwareVersions()
	return pu
}

// RemoveSoftwareVersionIDs removes the "software_versions" edge to SoftwareVersion entities by IDs.
func (pu *ProductUpdate) RemoveSoftwareVersionIDs(ids ...int) *ProductUpdate {
	pu.mutation.RemoveSoftwareVersionIDs(ids...)
	return pu
}

// RemoveSoftwareVersions removes "software_versions" edges to SoftwareVersion entities.
func (pu *ProductUpdate) RemoveSoftwareVersions(s ...*SoftwareVersion) *ProductUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return pu.RemoveSoftwareVersionIDs(ids...)
}

// ClearDevices clears all "devices" edges to the Device entity.
func (pu *ProductUpdate) ClearDevices() *ProductUpdate {
	pu.mutation.ClearDevices()
	return pu
}

// RemoveDeviceIDs removes the "devices" edge to Device entities by IDs.
func (pu *ProductUpdate) RemoveDeviceIDs(ids ...int) *ProductUpdate {
	pu.mutation.RemoveDeviceIDs(ids...)
	return pu
}

// RemoveDevices removes "devices" edges to Device entities.
func (pu *ProductUpdate) RemoveDevices(d ...*Device) *ProductUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return pu.RemoveDeviceIDs(ids...)
}

// ClearAuditLogs clears all "audit_logs" edges to the AuditLog entity.
func (pu *ProductUpdate) ClearAuditLogs() *ProductUpdate {
	pu.mutation.ClearAuditLogs()
	return pu
}

// RemoveAuditLogIDs removes the "audit_logs" edge to AuditLog entities by IDs.
func (pu *ProductUpdate) RemoveAuditLogIDs(ids ...int) *ProductUpdate {
	pu.mutation.RemoveAuditLogIDs(ids...)
	return pu
}

// RemoveAuditLogs removes "audit_logs" edges to AuditLog entities.
func (pu *ProductUpdate) RemoveAuditLogs(a ...*AuditLog) *ProductUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return pu.RemoveAuditLogIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *ProductUpdate) Save(ctx context.Context) (int, error) {
	pu.defaults()
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *ProductUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *ProductUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *ProductUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pu *ProductUpdate) defaults() {
	if _, ok := pu.mutation.UpdatedAt(); !ok {
		v := product.UpdateDefaultUpdatedAt()
		pu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pu *ProductUpdate) check() error {
	if v, ok := pu.mutation.Code(); ok {
		if err := product.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "Product.code": %w`, err)}
		}
	}
	if v, ok := pu.mutation.ProductName(); ok {
		if err := product.ProductNameValidator(v); err != nil {
			return &ValidationError{Name: "product_name", err: fmt.Errorf(`ent: validator failed for field "Product.product_name": %w`, err)}
		}
	}
	return nil
}

func (pu *ProductUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(product.Table, product.Columns, sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.Code(); ok {
		_spec.SetField(product.FieldCode, field.TypeString, value)
	}
	if value, ok := pu.mutation.ProductType(); ok {
		_spec.SetField(product.FieldProductType, field.TypeString, value)
	}
	if pu.mutation.ProductTypeCleared() {
		_spec.ClearField(product.FieldProductType, field.TypeString)
	}
	if value, ok := pu.mutation.ProductName(); ok {
		_spec.SetField(product.FieldProductName, field.TypeString, value)
	}
	if value, ok := pu.mutation.UpdatedAt(); ok {
		_spec.SetField(product.FieldUpdatedAt, field.TypeTime, value)
	}
	if pu.mutation.ManagersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.ManagersTable,
			Columns: []string{product.ManagersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productmanager.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedManagersIDs(); len(nodes) > 0 && !pu.mutation.ManagersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.ManagersTable,
			Columns: []string{product.ManagersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productmanager.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.ManagersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.ManagersTable,
			Columns: []string{product.ManagersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productmanager.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.LicenseTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.LicenseTypesTable,
			Columns: []string{product.LicenseTypesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(licensetype.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedLicenseTypesIDs(); len(nodes) > 0 && !pu.mutation.LicenseTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.LicenseTypesTable,
			Columns: []string{product.LicenseTypesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(licensetype.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.LicenseTypesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.LicenseTypesTable,
			Columns: []string{product.LicenseTypesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(licensetype.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.FeaturesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.FeaturesTable,
			Columns: []string{product.FeaturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productfeature.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedFeaturesIDs(); len(nodes) > 0 && !pu.mutation.FeaturesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.FeaturesTable,
			Columns: []string{product.FeaturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productfeature.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.FeaturesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.FeaturesTable,
			Columns: []string{product.FeaturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productfeature.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.FirmwareVersionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.FirmwareVersionsTable,
			Columns: []string{product.FirmwareVersionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(firmwareversion.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedFirmwareVersionsIDs(); len(nodes) > 0 && !pu.mutation.FirmwareVersionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.FirmwareVersionsTable,
			Columns: []string{product.FirmwareVersionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(firmwareversion.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.FirmwareVersionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.FirmwareVersionsTable,
			Columns: []string{product.FirmwareVersionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(firmwareversion.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.SoftwareVersionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.SoftwareVersionsTable,
			Columns: []string{product.SoftwareVersionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(softwareversion.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedSoftwareVersionsIDs(); len(nodes) > 0 && !pu.mutation.SoftwareVersionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.SoftwareVersionsTable,
			Columns: []string{product.SoftwareVersionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(softwareversion.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.SoftwareVersionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.SoftwareVersionsTable,
			Columns: []string{product.SoftwareVersionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(softwareversion.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.DevicesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.DevicesTable,
			Columns: []string{product.DevicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(device.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedDevicesIDs(); len(nodes) > 0 && !pu.mutation.DevicesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.DevicesTable,
			Columns: []string{product.DevicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(device.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.DevicesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.DevicesTable,
			Columns: []string{product.DevicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(device.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.AuditLogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.AuditLogsTable,
			Columns: []string{product.AuditLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(auditlog.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedAuditLogsIDs(); len(nodes) > 0 && !pu.mutation.AuditLogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.AuditLogsTable,
			Columns: []string{product.AuditLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(auditlog.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.AuditLogsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.AuditLogsTable,
			Columns: []string{product.AuditLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(auditlog.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{product.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// ProductUpdateOne is the builder for updating a single Product entity.
type ProductUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProductMutation
}

// SetCode sets the "code" field.
func (puo *ProductUpdateOne) SetCode(s string) *ProductUpdateOne {
	puo.mutation.SetCode(s)
	return puo
}

// SetProductType sets the "product_type" field.
func (puo *ProductUpdateOne) SetProductType(s string) *ProductUpdateOne {
	puo.mutation.SetProductType(s)
	return puo
}

// SetNillableProductType sets the "product_type" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableProductType(s *string) *ProductUpdateOne {
	if s != nil {
		puo.SetProductType(*s)
	}
	return puo
}

// ClearProductType clears the value of the "product_type" field.
func (puo *ProductUpdateOne) ClearProductType() *ProductUpdateOne {
	puo.mutation.ClearProductType()
	return puo
}

// SetProductName sets the "product_name" field.
func (puo *ProductUpdateOne) SetProductName(s string) *ProductUpdateOne {
	puo.mutation.SetProductName(s)
	return puo
}

// SetUpdatedAt sets the "updated_at" field.
func (puo *ProductUpdateOne) SetUpdatedAt(t time.Time) *ProductUpdateOne {
	puo.mutation.SetUpdatedAt(t)
	return puo
}

// AddManagerIDs adds the "managers" edge to the ProductManager entity by IDs.
func (puo *ProductUpdateOne) AddManagerIDs(ids ...int) *ProductUpdateOne {
	puo.mutation.AddManagerIDs(ids...)
	return puo
}

// AddManagers adds the "managers" edges to the ProductManager entity.
func (puo *ProductUpdateOne) AddManagers(p ...*ProductManager) *ProductUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.AddManagerIDs(ids...)
}

// AddLicenseTypeIDs adds the "license_types" edge to the LicenseType entity by IDs.
func (puo *ProductUpdateOne) AddLicenseTypeIDs(ids ...int) *ProductUpdateOne {
	puo.mutation.AddLicenseTypeIDs(ids...)
	return puo
}

// AddLicenseTypes adds the "license_types" edges to the LicenseType entity.
func (puo *ProductUpdateOne) AddLicenseTypes(l ...*LicenseType) *ProductUpdateOne {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return puo.AddLicenseTypeIDs(ids...)
}

// AddFeatureIDs adds the "features" edge to the ProductFeature entity by IDs.
func (puo *ProductUpdateOne) AddFeatureIDs(ids ...int) *ProductUpdateOne {
	puo.mutation.AddFeatureIDs(ids...)
	return puo
}

// AddFeatures adds the "features" edges to the ProductFeature entity.
func (puo *ProductUpdateOne) AddFeatures(p ...*ProductFeature) *ProductUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.AddFeatureIDs(ids...)
}

// AddFirmwareVersionIDs adds the "firmware_versions" edge to the FirmwareVersion entity by IDs.
func (puo *ProductUpdateOne) AddFirmwareVersionIDs(ids ...int) *ProductUpdateOne {
	puo.mutation.AddFirmwareVersionIDs(ids...)
	return puo
}

// AddFirmwareVersions adds the "firmware_versions" edges to the FirmwareVersion entity.
func (puo *ProductUpdateOne) AddFirmwareVersions(f ...*FirmwareVersion) *ProductUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return puo.AddFirmwareVersionIDs(ids...)
}

// AddSoftwareVersionIDs adds the "software_versions" edge to the SoftwareVersion entity by IDs.
func (puo *ProductUpdateOne) AddSoftwareVersionIDs(ids ...int) *ProductUpdateOne {
	puo.mutation.AddSoftwareVersionIDs(ids...)
	return puo
}

// AddSoftwareVersions adds the "software_versions" edges to the SoftwareVersion entity.
func (puo *ProductUpdateOne) AddSoftwareVersions(s ...*SoftwareVersion) *ProductUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return puo.AddSoftwareVersionIDs(ids...)
}

// AddDeviceIDs adds the "devices" edge to the Device entity by IDs.
func (puo *ProductUpdateOne) AddDeviceIDs(ids ...int) *ProductUpdateOne {
	puo.mutation.AddDeviceIDs(ids...)
	return puo
}

// AddDevices adds the "devices" edges to the Device entity.
func (puo *ProductUpdateOne) AddDevices(d ...*Device) *ProductUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return puo.AddDeviceIDs(ids...)
}

// AddAuditLogIDs adds the "audit_logs" edge to the AuditLog entity by IDs.
func (puo *ProductUpdateOne) AddAuditLogIDs(ids ...int) *ProductUpdateOne {
	puo.mutation.AddAuditLogIDs(ids...)
	return puo
}

// AddAuditLogs adds the "audit_logs" edges to the AuditLog entity.
func (puo *ProductUpdateOne) AddAuditLogs(a ...*AuditLog) *ProductUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return puo.AddAuditLogIDs(ids...)
}

// Mutation returns the ProductMutation object of the builder.
func (puo *ProductUpdateOne) Mutation() *ProductMutation {
	return puo.mutation
}

// ClearManagers clears all "managers" edges to the ProductManager entity.
func (puo *ProductUpdateOne) ClearManagers() *ProductUpdateOne {
	puo.mutation.ClearManagers()
	return puo
}

// RemoveManagerIDs removes the "managers" edge to ProductManager entities by IDs.
func (puo *ProductUpdateOne) RemoveManagerIDs(ids ...int) *ProductUpdateOne {
	puo.mutation.RemoveManagerIDs(ids...)
	return puo
}

// RemoveManagers removes "managers" edges to ProductManager entities.
func (puo *ProductUpdateOne) RemoveManagers(p ...*ProductManager) *ProductUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.RemoveManagerIDs(ids...)
}

// ClearLicenseTypes clears all "license_types" edges to the LicenseType entity.
func (puo *ProductUpdateOne) ClearLicenseTypes() *ProductUpdateOne {
	puo.mutation.ClearLicenseTypes()
	return puo
}

// RemoveLicenseTypeIDs removes the "license_types" edge to LicenseType entities by IDs.
func (puo *ProductUpdateOne) RemoveLicenseTypeIDs(ids ...int) *ProductUpdateOne {
	puo.mutation.RemoveLicenseTypeIDs(ids...)
	return puo
}

// RemoveLicenseTypes removes "license_types" edges to LicenseType entities.
func (puo *ProductUpdateOne) RemoveLicenseTypes(l ...*LicenseType) *ProductUpdateOne {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return puo.RemoveLicenseTypeIDs(ids...)
}

// ClearFeatures clears all "features" edges to the ProductFeature entity.
func (puo *ProductUpdateOne) ClearFeatures() *ProductUpdateOne {
	puo.mutation.ClearFeatures()
	return puo
}

// RemoveFeatureIDs removes the "features" edge to ProductFeature entities by IDs.
func (puo *ProductUpdateOne) RemoveFeatureIDs(ids ...int) *ProductUpdateOne {
	puo.mutation.RemoveFeatureIDs(ids...)
	return puo
}

// RemoveFeatures removes "features" edges to ProductFeature entities.
func (puo *ProductUpdateOne) RemoveFeatures(p ...*ProductFeature) *ProductUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.RemoveFeatureIDs(ids...)
}

// ClearFirmwareVersions clears all "firmware_versions" edges to the FirmwareVersion entity.
func (puo *ProductUpdateOne) ClearFirmwareVersions() *ProductUpdateOne {
	puo.mutation.ClearFirmwareVersions()
	return puo
}

// RemoveFirmwareVersionIDs removes the "firmware_versions" edge to FirmwareVersion entities by IDs.
func (puo *ProductUpdateOne) RemoveFirmwareVersionIDs(ids ...int) *ProductUpdateOne {
	puo.mutation.RemoveFirmwareVersionIDs(ids...)
	return puo
}

// RemoveFirmwareVersions removes "firmware_versions" edges to FirmwareVersion entities.
func (puo *ProductUpdateOne) RemoveFirmwareVersions(f ...*FirmwareVersion) *ProductUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return puo.RemoveFirmwareVersionIDs(ids...)
}

// ClearSoftwareVersions clears all "software_versions" edges to the SoftwareVersion entity.
func (puo *ProductUpdateOne) ClearSoftwareVersions() *ProductUpdateOne {
	puo.mutation.ClearSoftwareVersions()
	return puo
}

// RemoveSoftwareVersionIDs removes the "software_versions" edge to SoftwareVersion entities by IDs.
func (puo *ProductUpdateOne) RemoveSoftwareVersionIDs(ids ...int) *ProductUpdateOne {
	puo.mutation.RemoveSoftwareVersionIDs(ids...)
	return puo
}

// RemoveSoftwareVersions removes "software_versions" edges to SoftwareVersion entities.
func (puo *ProductUpdateOne) RemoveSoftwareVersions(s ...*SoftwareVersion) *ProductUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return puo.RemoveSoftwareVersionIDs(ids...)
}

// ClearDevices clears all "devices" edges to the Device entity.
func (puo *ProductUpdateOne) ClearDevices() *ProductUpdateOne {
	puo.mutation.ClearDevices()
	return puo
}

// RemoveDeviceIDs removes the "devices" edge to Device entities by IDs.
func (puo *ProductUpdateOne) RemoveDeviceIDs(ids ...int) *ProductUpdateOne {
	puo.mutation.RemoveDeviceIDs(ids...)
	return puo
}

// RemoveDevices removes "devices" edges to Device entities.
func (puo *ProductUpdateOne) RemoveDevices(d ...*Device) *ProductUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return puo.RemoveDeviceIDs(ids...)
}

// ClearAuditLogs clears all "audit_logs" edges to the AuditLog entity.
func (puo *ProductUpdateOne) ClearAuditLogs() *ProductUpdateOne {
	puo.mutation.ClearAuditLogs()
	return puo
}

// RemoveAuditLogIDs removes the "audit_logs" edge to AuditLog entities by IDs.
func (puo *ProductUpdateOne) RemoveAuditLogIDs(ids ...int) *ProductUpdateOne {
	puo.mutation.RemoveAuditLogIDs(ids...)
	return puo
}

// RemoveAuditLogs removes "audit_logs" edges to AuditLog entities.
func (puo *ProductUpdateOne) RemoveAuditLogs(a ...*AuditLog) *ProductUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return puo.RemoveAuditLogIDs(ids...)
}

// Where appends a list predicates to the ProductUpdate builder.
func (puo *ProductUpdateOne) Where(ps ...predicate.Product) *ProductUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *ProductUpdateOne) Select(field string, fields ...string) *ProductUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Product entity.
func (puo *ProductUpdateOne) Save(ctx context.Context) (*Product, error) {
	puo.defaults()
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *ProductUpdateOne) SaveX(ctx context.Context) *Product {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *ProductUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *ProductUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (puo *ProductUpdateOne) defaults() {
	if _, ok := puo.mutation.UpdatedAt(); !ok {
		v := product.UpdateDefaultUpdatedAt()
		puo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puo *ProductUpdateOne) check() error {
	if v, ok := puo.mutation.Code(); ok {
		if err := product.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "Product.code": %w`, err)}
		}
	}
	if v, ok := puo.mutation.ProductName(); ok {
		if err := product.ProductNameValidator(v); err != nil {
			return &ValidationError{Name: "product_name", err: fmt.Errorf(`ent: validator failed for field "Product.product_name": %w`, err)}
		}
	}
	return nil
}

func (puo *ProductUpdateOne) sqlSave(ctx context.Context) (_node *Product, err error) {
	if err := puo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(product.Table, product.Columns, sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Product.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, product.FieldID)
		for _, f := range fields {
			if !product.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != product.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.Code(); ok {
		_spec.SetField(product.FieldCode, field.TypeString, value)
	}
	if value, ok := puo.mutation.ProductType(); ok {
		_spec.SetField(product.FieldProductType, field.TypeString, value)
	}
	if puo.mutation.ProductTypeCleared() {
		_spec.ClearField(product.FieldProductType, field.TypeString)
	}
	if value, ok := puo.mutation.ProductName(); ok {
		_spec.SetField(product.FieldProductName, field.TypeString, value)
	}
	if value, ok := puo.mutation.UpdatedAt(); ok {
		_spec.SetField(product.FieldUpdatedAt, field.TypeTime, value)
	}
	if puo.mutation.ManagersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.ManagersTable,
			Columns: []string{product.ManagersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productmanager.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedManagersIDs(); len(nodes) > 0 && !puo.mutation.ManagersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.ManagersTable,
			Columns: []string{product.ManagersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productmanager.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.ManagersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.ManagersTable,
			Columns: []string{product.ManagersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productmanager.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.LicenseTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.LicenseTypesTable,
			Columns: []string{product.LicenseTypesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(licensetype.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedLicenseTypesIDs(); len(nodes) > 0 && !puo.mutation.LicenseTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.LicenseTypesTable,
			Columns: []string{product.LicenseTypesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(licensetype.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.LicenseTypesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.LicenseTypesTable,
			Columns: []string{product.LicenseTypesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(licensetype.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.FeaturesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.FeaturesTable,
			Columns: []string{product.FeaturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productfeature.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedFeaturesIDs(); len(nodes) > 0 && !puo.mutation.FeaturesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.FeaturesTable,
			Columns: []string{product.FeaturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productfeature.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.FeaturesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.FeaturesTable,
			Columns: []string{product.FeaturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productfeature.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.FirmwareVersionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.FirmwareVersionsTable,
			Columns: []string{product.FirmwareVersionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(firmwareversion.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedFirmwareVersionsIDs(); len(nodes) > 0 && !puo.mutation.FirmwareVersionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.FirmwareVersionsTable,
			Columns: []string{product.FirmwareVersionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(firmwareversion.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.FirmwareVersionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.FirmwareVersionsTable,
			Columns: []string{product.FirmwareVersionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(firmwareversion.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.SoftwareVersionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.SoftwareVersionsTable,
			Columns: []string{product.SoftwareVersionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(softwareversion.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedSoftwareVersionsIDs(); len(nodes) > 0 && !puo.mutation.SoftwareVersionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.SoftwareVersionsTable,
			Columns: []string{product.SoftwareVersionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(softwareversion.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.SoftwareVersionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.SoftwareVersionsTable,
			Columns: []string{product.SoftwareVersionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(softwareversion.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.DevicesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.DevicesTable,
			Columns: []string{product.DevicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(device.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedDevicesIDs(); len(nodes) > 0 && !puo.mutation.DevicesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.DevicesTable,
			Columns: []string{product.DevicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(device.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.DevicesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.DevicesTable,
			Columns: []string{product.DevicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(device.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.AuditLogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.AuditLogsTable,
			Columns: []string{product.AuditLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(auditlog.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedAuditLogsIDs(); len(nodes) > 0 && !puo.mutation.AuditLogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.AuditLogsTable,
			Columns: []string{product.AuditLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(auditlog.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.AuditLogsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.AuditLogsTable,
			Columns: []string{product.AuditLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(auditlog.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Product{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{product.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
