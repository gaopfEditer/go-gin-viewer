// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"cambridge-hit.com/gin-base/activateserver/app/entity/ent/product"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Product is the model entity for the Product schema.
type Product struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// 产品代号
	Code string `json:"code,omitempty"`
	// 产品类别
	ProductType string `json:"product_type,omitempty"`
	// 产品名称
	ProductName string `json:"product_name,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ProductQuery when eager-loading is set.
	Edges        ProductEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ProductEdges holds the relations/edges for other nodes in the graph.
type ProductEdges struct {
	// Managers holds the value of the managers edge.
	Managers []*ProductManager `json:"managers,omitempty"`
	// LicenseTypes holds the value of the license_types edge.
	LicenseTypes []*LicenseType `json:"license_types,omitempty"`
	// Features holds the value of the features edge.
	Features []*ProductFeature `json:"features,omitempty"`
	// FirmwareVersions holds the value of the firmware_versions edge.
	FirmwareVersions []*FirmwareVersion `json:"firmware_versions,omitempty"`
	// SoftwareVersions holds the value of the software_versions edge.
	SoftwareVersions []*SoftwareVersion `json:"software_versions,omitempty"`
	// Devices holds the value of the devices edge.
	Devices []*Device `json:"devices,omitempty"`
	// AuditLogs holds the value of the audit_logs edge.
	AuditLogs []*AuditLog `json:"audit_logs,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [7]bool
}

// ManagersOrErr returns the Managers value or an error if the edge
// was not loaded in eager-loading.
func (e ProductEdges) ManagersOrErr() ([]*ProductManager, error) {
	if e.loadedTypes[0] {
		return e.Managers, nil
	}
	return nil, &NotLoadedError{edge: "managers"}
}

// LicenseTypesOrErr returns the LicenseTypes value or an error if the edge
// was not loaded in eager-loading.
func (e ProductEdges) LicenseTypesOrErr() ([]*LicenseType, error) {
	if e.loadedTypes[1] {
		return e.LicenseTypes, nil
	}
	return nil, &NotLoadedError{edge: "license_types"}
}

// FeaturesOrErr returns the Features value or an error if the edge
// was not loaded in eager-loading.
func (e ProductEdges) FeaturesOrErr() ([]*ProductFeature, error) {
	if e.loadedTypes[2] {
		return e.Features, nil
	}
	return nil, &NotLoadedError{edge: "features"}
}

// FirmwareVersionsOrErr returns the FirmwareVersions value or an error if the edge
// was not loaded in eager-loading.
func (e ProductEdges) FirmwareVersionsOrErr() ([]*FirmwareVersion, error) {
	if e.loadedTypes[3] {
		return e.FirmwareVersions, nil
	}
	return nil, &NotLoadedError{edge: "firmware_versions"}
}

// SoftwareVersionsOrErr returns the SoftwareVersions value or an error if the edge
// was not loaded in eager-loading.
func (e ProductEdges) SoftwareVersionsOrErr() ([]*SoftwareVersion, error) {
	if e.loadedTypes[4] {
		return e.SoftwareVersions, nil
	}
	return nil, &NotLoadedError{edge: "software_versions"}
}

// DevicesOrErr returns the Devices value or an error if the edge
// was not loaded in eager-loading.
func (e ProductEdges) DevicesOrErr() ([]*Device, error) {
	if e.loadedTypes[5] {
		return e.Devices, nil
	}
	return nil, &NotLoadedError{edge: "devices"}
}

// AuditLogsOrErr returns the AuditLogs value or an error if the edge
// was not loaded in eager-loading.
func (e ProductEdges) AuditLogsOrErr() ([]*AuditLog, error) {
	if e.loadedTypes[6] {
		return e.AuditLogs, nil
	}
	return nil, &NotLoadedError{edge: "audit_logs"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Product) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case product.FieldID:
			values[i] = new(sql.NullInt64)
		case product.FieldCode, product.FieldProductType, product.FieldProductName:
			values[i] = new(sql.NullString)
		case product.FieldCreatedAt, product.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Product fields.
func (pr *Product) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case product.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pr.ID = int(value.Int64)
		case product.FieldCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field code", values[i])
			} else if value.Valid {
				pr.Code = value.String
			}
		case product.FieldProductType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field product_type", values[i])
			} else if value.Valid {
				pr.ProductType = value.String
			}
		case product.FieldProductName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field product_name", values[i])
			} else if value.Valid {
				pr.ProductName = value.String
			}
		case product.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pr.CreatedAt = value.Time
			}
		case product.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				pr.UpdatedAt = value.Time
			}
		default:
			pr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Product.
// This includes values selected through modifiers, order, etc.
func (pr *Product) Value(name string) (ent.Value, error) {
	return pr.selectValues.Get(name)
}

// QueryManagers queries the "managers" edge of the Product entity.
func (pr *Product) QueryManagers() *ProductManagerQuery {
	return NewProductClient(pr.config).QueryManagers(pr)
}

// QueryLicenseTypes queries the "license_types" edge of the Product entity.
func (pr *Product) QueryLicenseTypes() *LicenseTypeQuery {
	return NewProductClient(pr.config).QueryLicenseTypes(pr)
}

// QueryFeatures queries the "features" edge of the Product entity.
func (pr *Product) QueryFeatures() *ProductFeatureQuery {
	return NewProductClient(pr.config).QueryFeatures(pr)
}

// QueryFirmwareVersions queries the "firmware_versions" edge of the Product entity.
func (pr *Product) QueryFirmwareVersions() *FirmwareVersionQuery {
	return NewProductClient(pr.config).QueryFirmwareVersions(pr)
}

// QuerySoftwareVersions queries the "software_versions" edge of the Product entity.
func (pr *Product) QuerySoftwareVersions() *SoftwareVersionQuery {
	return NewProductClient(pr.config).QuerySoftwareVersions(pr)
}

// QueryDevices queries the "devices" edge of the Product entity.
func (pr *Product) QueryDevices() *DeviceQuery {
	return NewProductClient(pr.config).QueryDevices(pr)
}

// QueryAuditLogs queries the "audit_logs" edge of the Product entity.
func (pr *Product) QueryAuditLogs() *AuditLogQuery {
	return NewProductClient(pr.config).QueryAuditLogs(pr)
}

// Update returns a builder for updating this Product.
// Note that you need to call Product.Unwrap() before calling this method if this Product
// was returned from a transaction, and the transaction was committed or rolled back.
func (pr *Product) Update() *ProductUpdateOne {
	return NewProductClient(pr.config).UpdateOne(pr)
}

// Unwrap unwraps the Product entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pr *Product) Unwrap() *Product {
	_tx, ok := pr.config.driver.(*txDriver)
	if !ok {
		panic("ent: Product is not a transactional entity")
	}
	pr.config.driver = _tx.drv
	return pr
}

// String implements the fmt.Stringer.
func (pr *Product) String() string {
	var builder strings.Builder
	builder.WriteString("Product(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pr.ID))
	builder.WriteString("code=")
	builder.WriteString(pr.Code)
	builder.WriteString(", ")
	builder.WriteString("product_type=")
	builder.WriteString(pr.ProductType)
	builder.WriteString(", ")
	builder.WriteString("product_name=")
	builder.WriteString(pr.ProductName)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(pr.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(pr.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Products is a parsable slice of Product.
type Products []*Product
