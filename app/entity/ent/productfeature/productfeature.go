// Code generated by ent, DO NOT EDIT.

package productfeature

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the productfeature type in the database.
	Label = "product_feature"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldFeatureName holds the string denoting the feature_name field in the database.
	FieldFeatureName = "feature_name"
	// FieldFeatureCode holds the string denoting the feature_code field in the database.
	FieldFeatureCode = "feature_code"
	// FieldProductID holds the string denoting the product_id field in the database.
	FieldProductID = "product_id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeProduct holds the string denoting the product edge name in mutations.
	EdgeProduct = "product"
	// EdgeLicenseTypes holds the string denoting the license_types edge name in mutations.
	EdgeLicenseTypes = "license_types"
	// EdgeSoftwareVersions holds the string denoting the software_versions edge name in mutations.
	EdgeSoftwareVersions = "software_versions"
	// EdgeLicenseTypeFeatures holds the string denoting the license_type_features edge name in mutations.
	EdgeLicenseTypeFeatures = "license_type_features"
	// Table holds the table name of the productfeature in the database.
	Table = "product_features"
	// ProductTable is the table that holds the product relation/edge.
	ProductTable = "product_features"
	// ProductInverseTable is the table name for the Product entity.
	// It exists in this package in order to avoid circular dependency with the "product" package.
	ProductInverseTable = "products"
	// ProductColumn is the table column denoting the product relation/edge.
	ProductColumn = "product_id"
	// LicenseTypesTable is the table that holds the license_types relation/edge. The primary key declared below.
	LicenseTypesTable = "license_type_features"
	// LicenseTypesInverseTable is the table name for the LicenseType entity.
	// It exists in this package in order to avoid circular dependency with the "licensetype" package.
	LicenseTypesInverseTable = "license_types"
	// SoftwareVersionsTable is the table that holds the software_versions relation/edge. The primary key declared below.
	SoftwareVersionsTable = "software_version_features"
	// SoftwareVersionsInverseTable is the table name for the SoftwareVersion entity.
	// It exists in this package in order to avoid circular dependency with the "softwareversion" package.
	SoftwareVersionsInverseTable = "software_versions"
	// LicenseTypeFeaturesTable is the table that holds the license_type_features relation/edge.
	LicenseTypeFeaturesTable = "license_type_features"
	// LicenseTypeFeaturesInverseTable is the table name for the LicenseTypeFeatures entity.
	// It exists in this package in order to avoid circular dependency with the "licensetypefeatures" package.
	LicenseTypeFeaturesInverseTable = "license_type_features"
	// LicenseTypeFeaturesColumn is the table column denoting the license_type_features relation/edge.
	LicenseTypeFeaturesColumn = "feature_id"
)

// Columns holds all SQL columns for productfeature fields.
var Columns = []string{
	FieldID,
	FieldFeatureName,
	FieldFeatureCode,
	FieldProductID,
	FieldCreatedAt,
	FieldUpdatedAt,
}

var (
	// LicenseTypesPrimaryKey and LicenseTypesColumn2 are the table columns denoting the
	// primary key for the license_types relation (M2M).
	LicenseTypesPrimaryKey = []string{"license_type_id", "feature_id"}
	// SoftwareVersionsPrimaryKey and SoftwareVersionsColumn2 are the table columns denoting the
	// primary key for the software_versions relation (M2M).
	SoftwareVersionsPrimaryKey = []string{"software_version_id", "product_feature_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// FeatureNameValidator is a validator for the "feature_name" field. It is called by the builders before save.
	FeatureNameValidator func(string) error
	// FeatureCodeValidator is a validator for the "feature_code" field. It is called by the builders before save.
	FeatureCodeValidator func(string) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(int) error
)

// OrderOption defines the ordering options for the ProductFeature queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByFeatureName orders the results by the feature_name field.
func ByFeatureName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFeatureName, opts...).ToFunc()
}

// ByFeatureCode orders the results by the feature_code field.
func ByFeatureCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFeatureCode, opts...).ToFunc()
}

// ByProductID orders the results by the product_id field.
func ByProductID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProductID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByProductField orders the results by product field.
func ByProductField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProductStep(), sql.OrderByField(field, opts...))
	}
}

// ByLicenseTypesCount orders the results by license_types count.
func ByLicenseTypesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newLicenseTypesStep(), opts...)
	}
}

// ByLicenseTypes orders the results by license_types terms.
func ByLicenseTypes(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newLicenseTypesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// BySoftwareVersionsCount orders the results by software_versions count.
func BySoftwareVersionsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSoftwareVersionsStep(), opts...)
	}
}

// BySoftwareVersions orders the results by software_versions terms.
func BySoftwareVersions(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSoftwareVersionsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByLicenseTypeFeaturesCount orders the results by license_type_features count.
func ByLicenseTypeFeaturesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newLicenseTypeFeaturesStep(), opts...)
	}
}

// ByLicenseTypeFeatures orders the results by license_type_features terms.
func ByLicenseTypeFeatures(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newLicenseTypeFeaturesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newProductStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProductInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ProductTable, ProductColumn),
	)
}
func newLicenseTypesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(LicenseTypesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, LicenseTypesTable, LicenseTypesPrimaryKey...),
	)
}
func newSoftwareVersionsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SoftwareVersionsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, SoftwareVersionsTable, SoftwareVersionsPrimaryKey...),
	)
}
func newLicenseTypeFeaturesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(LicenseTypeFeaturesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, LicenseTypeFeaturesTable, LicenseTypeFeaturesColumn),
	)
}
