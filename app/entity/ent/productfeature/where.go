// Code generated by ent, DO NOT EDIT.

package productfeature

import (
	"time"

	"cambridge-hit.com/gin-base/activateserver/app/entity/ent/predicate"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.ProductFeature {
	return predicate.ProductFeature(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.ProductFeature {
	return predicate.ProductFeature(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.ProductFeature {
	return predicate.ProductFeature(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.ProductFeature {
	return predicate.ProductFeature(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.ProductFeature {
	return predicate.ProductFeature(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.ProductFeature {
	return predicate.ProductFeature(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.ProductFeature {
	return predicate.ProductFeature(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.ProductFeature {
	return predicate.ProductFeature(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.ProductFeature {
	return predicate.ProductFeature(sql.FieldLTE(FieldID, id))
}

// FeatureName applies equality check predicate on the "feature_name" field. It's identical to FeatureNameEQ.
func FeatureName(v string) predicate.ProductFeature {
	return predicate.ProductFeature(sql.FieldEQ(FieldFeatureName, v))
}

// FeatureCode applies equality check predicate on the "feature_code" field. It's identical to FeatureCodeEQ.
func FeatureCode(v string) predicate.ProductFeature {
	return predicate.ProductFeature(sql.FieldEQ(FieldFeatureCode, v))
}

// ProductID applies equality check predicate on the "product_id" field. It's identical to ProductIDEQ.
func ProductID(v int) predicate.ProductFeature {
	return predicate.ProductFeature(sql.FieldEQ(FieldProductID, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.ProductFeature {
	return predicate.ProductFeature(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.ProductFeature {
	return predicate.ProductFeature(sql.FieldEQ(FieldUpdatedAt, v))
}

// FeatureNameEQ applies the EQ predicate on the "feature_name" field.
func FeatureNameEQ(v string) predicate.ProductFeature {
	return predicate.ProductFeature(sql.FieldEQ(FieldFeatureName, v))
}

// FeatureNameNEQ applies the NEQ predicate on the "feature_name" field.
func FeatureNameNEQ(v string) predicate.ProductFeature {
	return predicate.ProductFeature(sql.FieldNEQ(FieldFeatureName, v))
}

// FeatureNameIn applies the In predicate on the "feature_name" field.
func FeatureNameIn(vs ...string) predicate.ProductFeature {
	return predicate.ProductFeature(sql.FieldIn(FieldFeatureName, vs...))
}

// FeatureNameNotIn applies the NotIn predicate on the "feature_name" field.
func FeatureNameNotIn(vs ...string) predicate.ProductFeature {
	return predicate.ProductFeature(sql.FieldNotIn(FieldFeatureName, vs...))
}

// FeatureNameGT applies the GT predicate on the "feature_name" field.
func FeatureNameGT(v string) predicate.ProductFeature {
	return predicate.ProductFeature(sql.FieldGT(FieldFeatureName, v))
}

// FeatureNameGTE applies the GTE predicate on the "feature_name" field.
func FeatureNameGTE(v string) predicate.ProductFeature {
	return predicate.ProductFeature(sql.FieldGTE(FieldFeatureName, v))
}

// FeatureNameLT applies the LT predicate on the "feature_name" field.
func FeatureNameLT(v string) predicate.ProductFeature {
	return predicate.ProductFeature(sql.FieldLT(FieldFeatureName, v))
}

// FeatureNameLTE applies the LTE predicate on the "feature_name" field.
func FeatureNameLTE(v string) predicate.ProductFeature {
	return predicate.ProductFeature(sql.FieldLTE(FieldFeatureName, v))
}

// FeatureNameContains applies the Contains predicate on the "feature_name" field.
func FeatureNameContains(v string) predicate.ProductFeature {
	return predicate.ProductFeature(sql.FieldContains(FieldFeatureName, v))
}

// FeatureNameHasPrefix applies the HasPrefix predicate on the "feature_name" field.
func FeatureNameHasPrefix(v string) predicate.ProductFeature {
	return predicate.ProductFeature(sql.FieldHasPrefix(FieldFeatureName, v))
}

// FeatureNameHasSuffix applies the HasSuffix predicate on the "feature_name" field.
func FeatureNameHasSuffix(v string) predicate.ProductFeature {
	return predicate.ProductFeature(sql.FieldHasSuffix(FieldFeatureName, v))
}

// FeatureNameEqualFold applies the EqualFold predicate on the "feature_name" field.
func FeatureNameEqualFold(v string) predicate.ProductFeature {
	return predicate.ProductFeature(sql.FieldEqualFold(FieldFeatureName, v))
}

// FeatureNameContainsFold applies the ContainsFold predicate on the "feature_name" field.
func FeatureNameContainsFold(v string) predicate.ProductFeature {
	return predicate.ProductFeature(sql.FieldContainsFold(FieldFeatureName, v))
}

// FeatureCodeEQ applies the EQ predicate on the "feature_code" field.
func FeatureCodeEQ(v string) predicate.ProductFeature {
	return predicate.ProductFeature(sql.FieldEQ(FieldFeatureCode, v))
}

// FeatureCodeNEQ applies the NEQ predicate on the "feature_code" field.
func FeatureCodeNEQ(v string) predicate.ProductFeature {
	return predicate.ProductFeature(sql.FieldNEQ(FieldFeatureCode, v))
}

// FeatureCodeIn applies the In predicate on the "feature_code" field.
func FeatureCodeIn(vs ...string) predicate.ProductFeature {
	return predicate.ProductFeature(sql.FieldIn(FieldFeatureCode, vs...))
}

// FeatureCodeNotIn applies the NotIn predicate on the "feature_code" field.
func FeatureCodeNotIn(vs ...string) predicate.ProductFeature {
	return predicate.ProductFeature(sql.FieldNotIn(FieldFeatureCode, vs...))
}

// FeatureCodeGT applies the GT predicate on the "feature_code" field.
func FeatureCodeGT(v string) predicate.ProductFeature {
	return predicate.ProductFeature(sql.FieldGT(FieldFeatureCode, v))
}

// FeatureCodeGTE applies the GTE predicate on the "feature_code" field.
func FeatureCodeGTE(v string) predicate.ProductFeature {
	return predicate.ProductFeature(sql.FieldGTE(FieldFeatureCode, v))
}

// FeatureCodeLT applies the LT predicate on the "feature_code" field.
func FeatureCodeLT(v string) predicate.ProductFeature {
	return predicate.ProductFeature(sql.FieldLT(FieldFeatureCode, v))
}

// FeatureCodeLTE applies the LTE predicate on the "feature_code" field.
func FeatureCodeLTE(v string) predicate.ProductFeature {
	return predicate.ProductFeature(sql.FieldLTE(FieldFeatureCode, v))
}

// FeatureCodeContains applies the Contains predicate on the "feature_code" field.
func FeatureCodeContains(v string) predicate.ProductFeature {
	return predicate.ProductFeature(sql.FieldContains(FieldFeatureCode, v))
}

// FeatureCodeHasPrefix applies the HasPrefix predicate on the "feature_code" field.
func FeatureCodeHasPrefix(v string) predicate.ProductFeature {
	return predicate.ProductFeature(sql.FieldHasPrefix(FieldFeatureCode, v))
}

// FeatureCodeHasSuffix applies the HasSuffix predicate on the "feature_code" field.
func FeatureCodeHasSuffix(v string) predicate.ProductFeature {
	return predicate.ProductFeature(sql.FieldHasSuffix(FieldFeatureCode, v))
}

// FeatureCodeEqualFold applies the EqualFold predicate on the "feature_code" field.
func FeatureCodeEqualFold(v string) predicate.ProductFeature {
	return predicate.ProductFeature(sql.FieldEqualFold(FieldFeatureCode, v))
}

// FeatureCodeContainsFold applies the ContainsFold predicate on the "feature_code" field.
func FeatureCodeContainsFold(v string) predicate.ProductFeature {
	return predicate.ProductFeature(sql.FieldContainsFold(FieldFeatureCode, v))
}

// ProductIDEQ applies the EQ predicate on the "product_id" field.
func ProductIDEQ(v int) predicate.ProductFeature {
	return predicate.ProductFeature(sql.FieldEQ(FieldProductID, v))
}

// ProductIDNEQ applies the NEQ predicate on the "product_id" field.
func ProductIDNEQ(v int) predicate.ProductFeature {
	return predicate.ProductFeature(sql.FieldNEQ(FieldProductID, v))
}

// ProductIDIn applies the In predicate on the "product_id" field.
func ProductIDIn(vs ...int) predicate.ProductFeature {
	return predicate.ProductFeature(sql.FieldIn(FieldProductID, vs...))
}

// ProductIDNotIn applies the NotIn predicate on the "product_id" field.
func ProductIDNotIn(vs ...int) predicate.ProductFeature {
	return predicate.ProductFeature(sql.FieldNotIn(FieldProductID, vs...))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.ProductFeature {
	return predicate.ProductFeature(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.ProductFeature {
	return predicate.ProductFeature(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.ProductFeature {
	return predicate.ProductFeature(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.ProductFeature {
	return predicate.ProductFeature(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.ProductFeature {
	return predicate.ProductFeature(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.ProductFeature {
	return predicate.ProductFeature(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.ProductFeature {
	return predicate.ProductFeature(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.ProductFeature {
	return predicate.ProductFeature(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.ProductFeature {
	return predicate.ProductFeature(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.ProductFeature {
	return predicate.ProductFeature(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.ProductFeature {
	return predicate.ProductFeature(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.ProductFeature {
	return predicate.ProductFeature(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.ProductFeature {
	return predicate.ProductFeature(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.ProductFeature {
	return predicate.ProductFeature(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.ProductFeature {
	return predicate.ProductFeature(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.ProductFeature {
	return predicate.ProductFeature(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasProduct applies the HasEdge predicate on the "product" edge.
func HasProduct() predicate.ProductFeature {
	return predicate.ProductFeature(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ProductTable, ProductColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProductWith applies the HasEdge predicate on the "product" edge with a given conditions (other predicates).
func HasProductWith(preds ...predicate.Product) predicate.ProductFeature {
	return predicate.ProductFeature(func(s *sql.Selector) {
		step := newProductStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasLicenseTypes applies the HasEdge predicate on the "license_types" edge.
func HasLicenseTypes() predicate.ProductFeature {
	return predicate.ProductFeature(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, LicenseTypesTable, LicenseTypesPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasLicenseTypesWith applies the HasEdge predicate on the "license_types" edge with a given conditions (other predicates).
func HasLicenseTypesWith(preds ...predicate.LicenseType) predicate.ProductFeature {
	return predicate.ProductFeature(func(s *sql.Selector) {
		step := newLicenseTypesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSoftwareVersions applies the HasEdge predicate on the "software_versions" edge.
func HasSoftwareVersions() predicate.ProductFeature {
	return predicate.ProductFeature(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, SoftwareVersionsTable, SoftwareVersionsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSoftwareVersionsWith applies the HasEdge predicate on the "software_versions" edge with a given conditions (other predicates).
func HasSoftwareVersionsWith(preds ...predicate.SoftwareVersion) predicate.ProductFeature {
	return predicate.ProductFeature(func(s *sql.Selector) {
		step := newSoftwareVersionsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasLicenseTypeFeatures applies the HasEdge predicate on the "license_type_features" edge.
func HasLicenseTypeFeatures() predicate.ProductFeature {
	return predicate.ProductFeature(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, LicenseTypeFeaturesTable, LicenseTypeFeaturesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasLicenseTypeFeaturesWith applies the HasEdge predicate on the "license_type_features" edge with a given conditions (other predicates).
func HasLicenseTypeFeaturesWith(preds ...predicate.LicenseTypeFeatures) predicate.ProductFeature {
	return predicate.ProductFeature(func(s *sql.Selector) {
		step := newLicenseTypeFeaturesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ProductFeature) predicate.ProductFeature {
	return predicate.ProductFeature(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ProductFeature) predicate.ProductFeature {
	return predicate.ProductFeature(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ProductFeature) predicate.ProductFeature {
	return predicate.ProductFeature(sql.NotPredicates(p))
}
