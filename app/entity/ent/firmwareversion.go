// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"cambridge-hit.com/gin-base/activateserver/app/entity/ent/firmwareversion"
	"cambridge-hit.com/gin-base/activateserver/app/entity/ent/product"
	"cambridge-hit.com/gin-base/activateserver/app/entity/ent/user"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// FirmwareVersion is the model entity for the FirmwareVersion schema.
type FirmwareVersion struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// 产品ID
	ProductID int `json:"product_id,omitempty"`
	// 版本号
	Version string `json:"version,omitempty"`
	// 发布日期
	ReleaseDate time.Time `json:"release_date,omitempty"`
	// 备注
	Remark string `json:"remark,omitempty"`
	// 创建人ID
	CreatedBy int `json:"created_by,omitempty"`
	// 创建时间
	CreatedAt time.Time `json:"created_at,omitempty"`
	// 更新时间
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the FirmwareVersionQuery when eager-loading is set.
	Edges        FirmwareVersionEdges `json:"edges"`
	selectValues sql.SelectValues
}

// FirmwareVersionEdges holds the relations/edges for other nodes in the graph.
type FirmwareVersionEdges struct {
	// 关联的软件版本
	SoftwareVersions []*SoftwareVersion `json:"software_versions,omitempty"`
	// Product holds the value of the product edge.
	Product *Product `json:"product,omitempty"`
	// 创建人
	Creator *User `json:"creator,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// SoftwareVersionsOrErr returns the SoftwareVersions value or an error if the edge
// was not loaded in eager-loading.
func (e FirmwareVersionEdges) SoftwareVersionsOrErr() ([]*SoftwareVersion, error) {
	if e.loadedTypes[0] {
		return e.SoftwareVersions, nil
	}
	return nil, &NotLoadedError{edge: "software_versions"}
}

// ProductOrErr returns the Product value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e FirmwareVersionEdges) ProductOrErr() (*Product, error) {
	if e.loadedTypes[1] {
		if e.Product == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: product.Label}
		}
		return e.Product, nil
	}
	return nil, &NotLoadedError{edge: "product"}
}

// CreatorOrErr returns the Creator value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e FirmwareVersionEdges) CreatorOrErr() (*User, error) {
	if e.loadedTypes[2] {
		if e.Creator == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.Creator, nil
	}
	return nil, &NotLoadedError{edge: "creator"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*FirmwareVersion) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case firmwareversion.FieldID, firmwareversion.FieldProductID, firmwareversion.FieldCreatedBy:
			values[i] = new(sql.NullInt64)
		case firmwareversion.FieldVersion, firmwareversion.FieldRemark:
			values[i] = new(sql.NullString)
		case firmwareversion.FieldReleaseDate, firmwareversion.FieldCreatedAt, firmwareversion.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the FirmwareVersion fields.
func (fv *FirmwareVersion) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case firmwareversion.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			fv.ID = int(value.Int64)
		case firmwareversion.FieldProductID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field product_id", values[i])
			} else if value.Valid {
				fv.ProductID = int(value.Int64)
			}
		case firmwareversion.FieldVersion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field version", values[i])
			} else if value.Valid {
				fv.Version = value.String
			}
		case firmwareversion.FieldReleaseDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field release_date", values[i])
			} else if value.Valid {
				fv.ReleaseDate = value.Time
			}
		case firmwareversion.FieldRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remark", values[i])
			} else if value.Valid {
				fv.Remark = value.String
			}
		case firmwareversion.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				fv.CreatedBy = int(value.Int64)
			}
		case firmwareversion.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				fv.CreatedAt = value.Time
			}
		case firmwareversion.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				fv.UpdatedAt = value.Time
			}
		default:
			fv.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the FirmwareVersion.
// This includes values selected through modifiers, order, etc.
func (fv *FirmwareVersion) Value(name string) (ent.Value, error) {
	return fv.selectValues.Get(name)
}

// QuerySoftwareVersions queries the "software_versions" edge of the FirmwareVersion entity.
func (fv *FirmwareVersion) QuerySoftwareVersions() *SoftwareVersionQuery {
	return NewFirmwareVersionClient(fv.config).QuerySoftwareVersions(fv)
}

// QueryProduct queries the "product" edge of the FirmwareVersion entity.
func (fv *FirmwareVersion) QueryProduct() *ProductQuery {
	return NewFirmwareVersionClient(fv.config).QueryProduct(fv)
}

// QueryCreator queries the "creator" edge of the FirmwareVersion entity.
func (fv *FirmwareVersion) QueryCreator() *UserQuery {
	return NewFirmwareVersionClient(fv.config).QueryCreator(fv)
}

// Update returns a builder for updating this FirmwareVersion.
// Note that you need to call FirmwareVersion.Unwrap() before calling this method if this FirmwareVersion
// was returned from a transaction, and the transaction was committed or rolled back.
func (fv *FirmwareVersion) Update() *FirmwareVersionUpdateOne {
	return NewFirmwareVersionClient(fv.config).UpdateOne(fv)
}

// Unwrap unwraps the FirmwareVersion entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (fv *FirmwareVersion) Unwrap() *FirmwareVersion {
	_tx, ok := fv.config.driver.(*txDriver)
	if !ok {
		panic("ent: FirmwareVersion is not a transactional entity")
	}
	fv.config.driver = _tx.drv
	return fv
}

// String implements the fmt.Stringer.
func (fv *FirmwareVersion) String() string {
	var builder strings.Builder
	builder.WriteString("FirmwareVersion(")
	builder.WriteString(fmt.Sprintf("id=%v, ", fv.ID))
	builder.WriteString("product_id=")
	builder.WriteString(fmt.Sprintf("%v", fv.ProductID))
	builder.WriteString(", ")
	builder.WriteString("version=")
	builder.WriteString(fv.Version)
	builder.WriteString(", ")
	builder.WriteString("release_date=")
	builder.WriteString(fv.ReleaseDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("remark=")
	builder.WriteString(fv.Remark)
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(fmt.Sprintf("%v", fv.CreatedBy))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(fv.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fv.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// FirmwareVersions is a parsable slice of FirmwareVersion.
type FirmwareVersions []*FirmwareVersion
