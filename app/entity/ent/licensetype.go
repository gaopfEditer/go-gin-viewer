// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"cambridge-hit.com/gin-base/activateserver/app/entity/ent/licensetype"
	"cambridge-hit.com/gin-base/activateserver/app/entity/ent/product"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// LicenseType is the model entity for the LicenseType schema.
type LicenseType struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// 许可证类型名称
	TypeName string `json:"type_name,omitempty"`
	// 许可证编码
	LicenseType string `json:"license_type,omitempty"`
	// 所属产品ID
	ProductID int `json:"product_id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the LicenseTypeQuery when eager-loading is set.
	Edges        LicenseTypeEdges `json:"edges"`
	selectValues sql.SelectValues
}

// LicenseTypeEdges holds the relations/edges for other nodes in the graph.
type LicenseTypeEdges struct {
	// Product holds the value of the product edge.
	Product *Product `json:"product,omitempty"`
	// Features holds the value of the features edge.
	Features []*ProductFeature `json:"features,omitempty"`
	// Devices holds the value of the devices edge.
	Devices []*Device `json:"devices,omitempty"`
	// LicenseTypeFeatures holds the value of the license_type_features edge.
	LicenseTypeFeatures []*LicenseTypeFeatures `json:"license_type_features,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// ProductOrErr returns the Product value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e LicenseTypeEdges) ProductOrErr() (*Product, error) {
	if e.loadedTypes[0] {
		if e.Product == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: product.Label}
		}
		return e.Product, nil
	}
	return nil, &NotLoadedError{edge: "product"}
}

// FeaturesOrErr returns the Features value or an error if the edge
// was not loaded in eager-loading.
func (e LicenseTypeEdges) FeaturesOrErr() ([]*ProductFeature, error) {
	if e.loadedTypes[1] {
		return e.Features, nil
	}
	return nil, &NotLoadedError{edge: "features"}
}

// DevicesOrErr returns the Devices value or an error if the edge
// was not loaded in eager-loading.
func (e LicenseTypeEdges) DevicesOrErr() ([]*Device, error) {
	if e.loadedTypes[2] {
		return e.Devices, nil
	}
	return nil, &NotLoadedError{edge: "devices"}
}

// LicenseTypeFeaturesOrErr returns the LicenseTypeFeatures value or an error if the edge
// was not loaded in eager-loading.
func (e LicenseTypeEdges) LicenseTypeFeaturesOrErr() ([]*LicenseTypeFeatures, error) {
	if e.loadedTypes[3] {
		return e.LicenseTypeFeatures, nil
	}
	return nil, &NotLoadedError{edge: "license_type_features"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*LicenseType) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case licensetype.FieldID, licensetype.FieldProductID:
			values[i] = new(sql.NullInt64)
		case licensetype.FieldTypeName, licensetype.FieldLicenseType:
			values[i] = new(sql.NullString)
		case licensetype.FieldCreatedAt, licensetype.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the LicenseType fields.
func (lt *LicenseType) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case licensetype.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			lt.ID = int(value.Int64)
		case licensetype.FieldTypeName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type_name", values[i])
			} else if value.Valid {
				lt.TypeName = value.String
			}
		case licensetype.FieldLicenseType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field license_type", values[i])
			} else if value.Valid {
				lt.LicenseType = value.String
			}
		case licensetype.FieldProductID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field product_id", values[i])
			} else if value.Valid {
				lt.ProductID = int(value.Int64)
			}
		case licensetype.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				lt.CreatedAt = value.Time
			}
		case licensetype.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				lt.UpdatedAt = value.Time
			}
		default:
			lt.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the LicenseType.
// This includes values selected through modifiers, order, etc.
func (lt *LicenseType) Value(name string) (ent.Value, error) {
	return lt.selectValues.Get(name)
}

// QueryProduct queries the "product" edge of the LicenseType entity.
func (lt *LicenseType) QueryProduct() *ProductQuery {
	return NewLicenseTypeClient(lt.config).QueryProduct(lt)
}

// QueryFeatures queries the "features" edge of the LicenseType entity.
func (lt *LicenseType) QueryFeatures() *ProductFeatureQuery {
	return NewLicenseTypeClient(lt.config).QueryFeatures(lt)
}

// QueryDevices queries the "devices" edge of the LicenseType entity.
func (lt *LicenseType) QueryDevices() *DeviceQuery {
	return NewLicenseTypeClient(lt.config).QueryDevices(lt)
}

// QueryLicenseTypeFeatures queries the "license_type_features" edge of the LicenseType entity.
func (lt *LicenseType) QueryLicenseTypeFeatures() *LicenseTypeFeaturesQuery {
	return NewLicenseTypeClient(lt.config).QueryLicenseTypeFeatures(lt)
}

// Update returns a builder for updating this LicenseType.
// Note that you need to call LicenseType.Unwrap() before calling this method if this LicenseType
// was returned from a transaction, and the transaction was committed or rolled back.
func (lt *LicenseType) Update() *LicenseTypeUpdateOne {
	return NewLicenseTypeClient(lt.config).UpdateOne(lt)
}

// Unwrap unwraps the LicenseType entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (lt *LicenseType) Unwrap() *LicenseType {
	_tx, ok := lt.config.driver.(*txDriver)
	if !ok {
		panic("ent: LicenseType is not a transactional entity")
	}
	lt.config.driver = _tx.drv
	return lt
}

// String implements the fmt.Stringer.
func (lt *LicenseType) String() string {
	var builder strings.Builder
	builder.WriteString("LicenseType(")
	builder.WriteString(fmt.Sprintf("id=%v, ", lt.ID))
	builder.WriteString("type_name=")
	builder.WriteString(lt.TypeName)
	builder.WriteString(", ")
	builder.WriteString("license_type=")
	builder.WriteString(lt.LicenseType)
	builder.WriteString(", ")
	builder.WriteString("product_id=")
	builder.WriteString(fmt.Sprintf("%v", lt.ProductID))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(lt.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(lt.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// LicenseTypes is a parsable slice of LicenseType.
type LicenseTypes []*LicenseType
