// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"cambridge-hit.com/gin-base/activateserver/app/entity/ent/licensetype"
	"cambridge-hit.com/gin-base/activateserver/app/entity/ent/licensetypefeatures"
	"cambridge-hit.com/gin-base/activateserver/app/entity/ent/predicate"
	"cambridge-hit.com/gin-base/activateserver/app/entity/ent/product"
	"cambridge-hit.com/gin-base/activateserver/app/entity/ent/productfeature"
	"cambridge-hit.com/gin-base/activateserver/app/entity/ent/softwareversion"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ProductFeatureUpdate is the builder for updating ProductFeature entities.
type ProductFeatureUpdate struct {
	config
	hooks    []Hook
	mutation *ProductFeatureMutation
}

// Where appends a list predicates to the ProductFeatureUpdate builder.
func (pfu *ProductFeatureUpdate) Where(ps ...predicate.ProductFeature) *ProductFeatureUpdate {
	pfu.mutation.Where(ps...)
	return pfu
}

// SetFeatureName sets the "feature_name" field.
func (pfu *ProductFeatureUpdate) SetFeatureName(s string) *ProductFeatureUpdate {
	pfu.mutation.SetFeatureName(s)
	return pfu
}

// SetProductID sets the "product_id" field.
func (pfu *ProductFeatureUpdate) SetProductID(i int) *ProductFeatureUpdate {
	pfu.mutation.SetProductID(i)
	return pfu
}

// SetUpdatedAt sets the "updated_at" field.
func (pfu *ProductFeatureUpdate) SetUpdatedAt(t time.Time) *ProductFeatureUpdate {
	pfu.mutation.SetUpdatedAt(t)
	return pfu
}

// SetProduct sets the "product" edge to the Product entity.
func (pfu *ProductFeatureUpdate) SetProduct(p *Product) *ProductFeatureUpdate {
	return pfu.SetProductID(p.ID)
}

// AddLicenseTypeIDs adds the "license_types" edge to the LicenseType entity by IDs.
func (pfu *ProductFeatureUpdate) AddLicenseTypeIDs(ids ...int) *ProductFeatureUpdate {
	pfu.mutation.AddLicenseTypeIDs(ids...)
	return pfu
}

// AddLicenseTypes adds the "license_types" edges to the LicenseType entity.
func (pfu *ProductFeatureUpdate) AddLicenseTypes(l ...*LicenseType) *ProductFeatureUpdate {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return pfu.AddLicenseTypeIDs(ids...)
}

// AddSoftwareVersionIDs adds the "software_versions" edge to the SoftwareVersion entity by IDs.
func (pfu *ProductFeatureUpdate) AddSoftwareVersionIDs(ids ...int) *ProductFeatureUpdate {
	pfu.mutation.AddSoftwareVersionIDs(ids...)
	return pfu
}

// AddSoftwareVersions adds the "software_versions" edges to the SoftwareVersion entity.
func (pfu *ProductFeatureUpdate) AddSoftwareVersions(s ...*SoftwareVersion) *ProductFeatureUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return pfu.AddSoftwareVersionIDs(ids...)
}

// AddLicenseTypeFeatureIDs adds the "license_type_features" edge to the LicenseTypeFeatures entity by IDs.
func (pfu *ProductFeatureUpdate) AddLicenseTypeFeatureIDs(ids ...int) *ProductFeatureUpdate {
	pfu.mutation.AddLicenseTypeFeatureIDs(ids...)
	return pfu
}

// AddLicenseTypeFeatures adds the "license_type_features" edges to the LicenseTypeFeatures entity.
func (pfu *ProductFeatureUpdate) AddLicenseTypeFeatures(l ...*LicenseTypeFeatures) *ProductFeatureUpdate {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return pfu.AddLicenseTypeFeatureIDs(ids...)
}

// Mutation returns the ProductFeatureMutation object of the builder.
func (pfu *ProductFeatureUpdate) Mutation() *ProductFeatureMutation {
	return pfu.mutation
}

// ClearProduct clears the "product" edge to the Product entity.
func (pfu *ProductFeatureUpdate) ClearProduct() *ProductFeatureUpdate {
	pfu.mutation.ClearProduct()
	return pfu
}

// ClearLicenseTypes clears all "license_types" edges to the LicenseType entity.
func (pfu *ProductFeatureUpdate) ClearLicenseTypes() *ProductFeatureUpdate {
	pfu.mutation.ClearLicenseTypes()
	return pfu
}

// RemoveLicenseTypeIDs removes the "license_types" edge to LicenseType entities by IDs.
func (pfu *ProductFeatureUpdate) RemoveLicenseTypeIDs(ids ...int) *ProductFeatureUpdate {
	pfu.mutation.RemoveLicenseTypeIDs(ids...)
	return pfu
}

// RemoveLicenseTypes removes "license_types" edges to LicenseType entities.
func (pfu *ProductFeatureUpdate) RemoveLicenseTypes(l ...*LicenseType) *ProductFeatureUpdate {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return pfu.RemoveLicenseTypeIDs(ids...)
}

// ClearSoftwareVersions clears all "software_versions" edges to the SoftwareVersion entity.
func (pfu *ProductFeatureUpdate) ClearSoftwareVersions() *ProductFeatureUpdate {
	pfu.mutation.ClearSoftwareVersions()
	return pfu
}

// RemoveSoftwareVersionIDs removes the "software_versions" edge to SoftwareVersion entities by IDs.
func (pfu *ProductFeatureUpdate) RemoveSoftwareVersionIDs(ids ...int) *ProductFeatureUpdate {
	pfu.mutation.RemoveSoftwareVersionIDs(ids...)
	return pfu
}

// RemoveSoftwareVersions removes "software_versions" edges to SoftwareVersion entities.
func (pfu *ProductFeatureUpdate) RemoveSoftwareVersions(s ...*SoftwareVersion) *ProductFeatureUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return pfu.RemoveSoftwareVersionIDs(ids...)
}

// ClearLicenseTypeFeatures clears all "license_type_features" edges to the LicenseTypeFeatures entity.
func (pfu *ProductFeatureUpdate) ClearLicenseTypeFeatures() *ProductFeatureUpdate {
	pfu.mutation.ClearLicenseTypeFeatures()
	return pfu
}

// RemoveLicenseTypeFeatureIDs removes the "license_type_features" edge to LicenseTypeFeatures entities by IDs.
func (pfu *ProductFeatureUpdate) RemoveLicenseTypeFeatureIDs(ids ...int) *ProductFeatureUpdate {
	pfu.mutation.RemoveLicenseTypeFeatureIDs(ids...)
	return pfu
}

// RemoveLicenseTypeFeatures removes "license_type_features" edges to LicenseTypeFeatures entities.
func (pfu *ProductFeatureUpdate) RemoveLicenseTypeFeatures(l ...*LicenseTypeFeatures) *ProductFeatureUpdate {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return pfu.RemoveLicenseTypeFeatureIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pfu *ProductFeatureUpdate) Save(ctx context.Context) (int, error) {
	pfu.defaults()
	return withHooks(ctx, pfu.sqlSave, pfu.mutation, pfu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pfu *ProductFeatureUpdate) SaveX(ctx context.Context) int {
	affected, err := pfu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pfu *ProductFeatureUpdate) Exec(ctx context.Context) error {
	_, err := pfu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pfu *ProductFeatureUpdate) ExecX(ctx context.Context) {
	if err := pfu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pfu *ProductFeatureUpdate) defaults() {
	if _, ok := pfu.mutation.UpdatedAt(); !ok {
		v := productfeature.UpdateDefaultUpdatedAt()
		pfu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pfu *ProductFeatureUpdate) check() error {
	if v, ok := pfu.mutation.FeatureName(); ok {
		if err := productfeature.FeatureNameValidator(v); err != nil {
			return &ValidationError{Name: "feature_name", err: fmt.Errorf(`ent: validator failed for field "ProductFeature.feature_name": %w`, err)}
		}
	}
	if _, ok := pfu.mutation.ProductID(); pfu.mutation.ProductCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ProductFeature.product"`)
	}
	return nil
}

func (pfu *ProductFeatureUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pfu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(productfeature.Table, productfeature.Columns, sqlgraph.NewFieldSpec(productfeature.FieldID, field.TypeInt))
	if ps := pfu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pfu.mutation.FeatureName(); ok {
		_spec.SetField(productfeature.FieldFeatureName, field.TypeString, value)
	}
	if value, ok := pfu.mutation.UpdatedAt(); ok {
		_spec.SetField(productfeature.FieldUpdatedAt, field.TypeTime, value)
	}
	if pfu.mutation.ProductCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productfeature.ProductTable,
			Columns: []string{productfeature.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pfu.mutation.ProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productfeature.ProductTable,
			Columns: []string{productfeature.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pfu.mutation.LicenseTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   productfeature.LicenseTypesTable,
			Columns: productfeature.LicenseTypesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(licensetype.FieldID, field.TypeInt),
			},
		}
		createE := &LicenseTypeFeaturesCreate{config: pfu.config, mutation: newLicenseTypeFeaturesMutation(pfu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pfu.mutation.RemovedLicenseTypesIDs(); len(nodes) > 0 && !pfu.mutation.LicenseTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   productfeature.LicenseTypesTable,
			Columns: productfeature.LicenseTypesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(licensetype.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &LicenseTypeFeaturesCreate{config: pfu.config, mutation: newLicenseTypeFeaturesMutation(pfu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pfu.mutation.LicenseTypesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   productfeature.LicenseTypesTable,
			Columns: productfeature.LicenseTypesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(licensetype.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &LicenseTypeFeaturesCreate{config: pfu.config, mutation: newLicenseTypeFeaturesMutation(pfu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pfu.mutation.SoftwareVersionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   productfeature.SoftwareVersionsTable,
			Columns: productfeature.SoftwareVersionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(softwareversion.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pfu.mutation.RemovedSoftwareVersionsIDs(); len(nodes) > 0 && !pfu.mutation.SoftwareVersionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   productfeature.SoftwareVersionsTable,
			Columns: productfeature.SoftwareVersionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(softwareversion.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pfu.mutation.SoftwareVersionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   productfeature.SoftwareVersionsTable,
			Columns: productfeature.SoftwareVersionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(softwareversion.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pfu.mutation.LicenseTypeFeaturesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   productfeature.LicenseTypeFeaturesTable,
			Columns: []string{productfeature.LicenseTypeFeaturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(licensetypefeatures.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pfu.mutation.RemovedLicenseTypeFeaturesIDs(); len(nodes) > 0 && !pfu.mutation.LicenseTypeFeaturesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   productfeature.LicenseTypeFeaturesTable,
			Columns: []string{productfeature.LicenseTypeFeaturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(licensetypefeatures.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pfu.mutation.LicenseTypeFeaturesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   productfeature.LicenseTypeFeaturesTable,
			Columns: []string{productfeature.LicenseTypeFeaturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(licensetypefeatures.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pfu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{productfeature.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pfu.mutation.done = true
	return n, nil
}

// ProductFeatureUpdateOne is the builder for updating a single ProductFeature entity.
type ProductFeatureUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProductFeatureMutation
}

// SetFeatureName sets the "feature_name" field.
func (pfuo *ProductFeatureUpdateOne) SetFeatureName(s string) *ProductFeatureUpdateOne {
	pfuo.mutation.SetFeatureName(s)
	return pfuo
}

// SetProductID sets the "product_id" field.
func (pfuo *ProductFeatureUpdateOne) SetProductID(i int) *ProductFeatureUpdateOne {
	pfuo.mutation.SetProductID(i)
	return pfuo
}

// SetUpdatedAt sets the "updated_at" field.
func (pfuo *ProductFeatureUpdateOne) SetUpdatedAt(t time.Time) *ProductFeatureUpdateOne {
	pfuo.mutation.SetUpdatedAt(t)
	return pfuo
}

// SetProduct sets the "product" edge to the Product entity.
func (pfuo *ProductFeatureUpdateOne) SetProduct(p *Product) *ProductFeatureUpdateOne {
	return pfuo.SetProductID(p.ID)
}

// AddLicenseTypeIDs adds the "license_types" edge to the LicenseType entity by IDs.
func (pfuo *ProductFeatureUpdateOne) AddLicenseTypeIDs(ids ...int) *ProductFeatureUpdateOne {
	pfuo.mutation.AddLicenseTypeIDs(ids...)
	return pfuo
}

// AddLicenseTypes adds the "license_types" edges to the LicenseType entity.
func (pfuo *ProductFeatureUpdateOne) AddLicenseTypes(l ...*LicenseType) *ProductFeatureUpdateOne {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return pfuo.AddLicenseTypeIDs(ids...)
}

// AddSoftwareVersionIDs adds the "software_versions" edge to the SoftwareVersion entity by IDs.
func (pfuo *ProductFeatureUpdateOne) AddSoftwareVersionIDs(ids ...int) *ProductFeatureUpdateOne {
	pfuo.mutation.AddSoftwareVersionIDs(ids...)
	return pfuo
}

// AddSoftwareVersions adds the "software_versions" edges to the SoftwareVersion entity.
func (pfuo *ProductFeatureUpdateOne) AddSoftwareVersions(s ...*SoftwareVersion) *ProductFeatureUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return pfuo.AddSoftwareVersionIDs(ids...)
}

// AddLicenseTypeFeatureIDs adds the "license_type_features" edge to the LicenseTypeFeatures entity by IDs.
func (pfuo *ProductFeatureUpdateOne) AddLicenseTypeFeatureIDs(ids ...int) *ProductFeatureUpdateOne {
	pfuo.mutation.AddLicenseTypeFeatureIDs(ids...)
	return pfuo
}

// AddLicenseTypeFeatures adds the "license_type_features" edges to the LicenseTypeFeatures entity.
func (pfuo *ProductFeatureUpdateOne) AddLicenseTypeFeatures(l ...*LicenseTypeFeatures) *ProductFeatureUpdateOne {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return pfuo.AddLicenseTypeFeatureIDs(ids...)
}

// Mutation returns the ProductFeatureMutation object of the builder.
func (pfuo *ProductFeatureUpdateOne) Mutation() *ProductFeatureMutation {
	return pfuo.mutation
}

// ClearProduct clears the "product" edge to the Product entity.
func (pfuo *ProductFeatureUpdateOne) ClearProduct() *ProductFeatureUpdateOne {
	pfuo.mutation.ClearProduct()
	return pfuo
}

// ClearLicenseTypes clears all "license_types" edges to the LicenseType entity.
func (pfuo *ProductFeatureUpdateOne) ClearLicenseTypes() *ProductFeatureUpdateOne {
	pfuo.mutation.ClearLicenseTypes()
	return pfuo
}

// RemoveLicenseTypeIDs removes the "license_types" edge to LicenseType entities by IDs.
func (pfuo *ProductFeatureUpdateOne) RemoveLicenseTypeIDs(ids ...int) *ProductFeatureUpdateOne {
	pfuo.mutation.RemoveLicenseTypeIDs(ids...)
	return pfuo
}

// RemoveLicenseTypes removes "license_types" edges to LicenseType entities.
func (pfuo *ProductFeatureUpdateOne) RemoveLicenseTypes(l ...*LicenseType) *ProductFeatureUpdateOne {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return pfuo.RemoveLicenseTypeIDs(ids...)
}

// ClearSoftwareVersions clears all "software_versions" edges to the SoftwareVersion entity.
func (pfuo *ProductFeatureUpdateOne) ClearSoftwareVersions() *ProductFeatureUpdateOne {
	pfuo.mutation.ClearSoftwareVersions()
	return pfuo
}

// RemoveSoftwareVersionIDs removes the "software_versions" edge to SoftwareVersion entities by IDs.
func (pfuo *ProductFeatureUpdateOne) RemoveSoftwareVersionIDs(ids ...int) *ProductFeatureUpdateOne {
	pfuo.mutation.RemoveSoftwareVersionIDs(ids...)
	return pfuo
}

// RemoveSoftwareVersions removes "software_versions" edges to SoftwareVersion entities.
func (pfuo *ProductFeatureUpdateOne) RemoveSoftwareVersions(s ...*SoftwareVersion) *ProductFeatureUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return pfuo.RemoveSoftwareVersionIDs(ids...)
}

// ClearLicenseTypeFeatures clears all "license_type_features" edges to the LicenseTypeFeatures entity.
func (pfuo *ProductFeatureUpdateOne) ClearLicenseTypeFeatures() *ProductFeatureUpdateOne {
	pfuo.mutation.ClearLicenseTypeFeatures()
	return pfuo
}

// RemoveLicenseTypeFeatureIDs removes the "license_type_features" edge to LicenseTypeFeatures entities by IDs.
func (pfuo *ProductFeatureUpdateOne) RemoveLicenseTypeFeatureIDs(ids ...int) *ProductFeatureUpdateOne {
	pfuo.mutation.RemoveLicenseTypeFeatureIDs(ids...)
	return pfuo
}

// RemoveLicenseTypeFeatures removes "license_type_features" edges to LicenseTypeFeatures entities.
func (pfuo *ProductFeatureUpdateOne) RemoveLicenseTypeFeatures(l ...*LicenseTypeFeatures) *ProductFeatureUpdateOne {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return pfuo.RemoveLicenseTypeFeatureIDs(ids...)
}

// Where appends a list predicates to the ProductFeatureUpdate builder.
func (pfuo *ProductFeatureUpdateOne) Where(ps ...predicate.ProductFeature) *ProductFeatureUpdateOne {
	pfuo.mutation.Where(ps...)
	return pfuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pfuo *ProductFeatureUpdateOne) Select(field string, fields ...string) *ProductFeatureUpdateOne {
	pfuo.fields = append([]string{field}, fields...)
	return pfuo
}

// Save executes the query and returns the updated ProductFeature entity.
func (pfuo *ProductFeatureUpdateOne) Save(ctx context.Context) (*ProductFeature, error) {
	pfuo.defaults()
	return withHooks(ctx, pfuo.sqlSave, pfuo.mutation, pfuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pfuo *ProductFeatureUpdateOne) SaveX(ctx context.Context) *ProductFeature {
	node, err := pfuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pfuo *ProductFeatureUpdateOne) Exec(ctx context.Context) error {
	_, err := pfuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pfuo *ProductFeatureUpdateOne) ExecX(ctx context.Context) {
	if err := pfuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pfuo *ProductFeatureUpdateOne) defaults() {
	if _, ok := pfuo.mutation.UpdatedAt(); !ok {
		v := productfeature.UpdateDefaultUpdatedAt()
		pfuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pfuo *ProductFeatureUpdateOne) check() error {
	if v, ok := pfuo.mutation.FeatureName(); ok {
		if err := productfeature.FeatureNameValidator(v); err != nil {
			return &ValidationError{Name: "feature_name", err: fmt.Errorf(`ent: validator failed for field "ProductFeature.feature_name": %w`, err)}
		}
	}
	if _, ok := pfuo.mutation.ProductID(); pfuo.mutation.ProductCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ProductFeature.product"`)
	}
	return nil
}

func (pfuo *ProductFeatureUpdateOne) sqlSave(ctx context.Context) (_node *ProductFeature, err error) {
	if err := pfuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(productfeature.Table, productfeature.Columns, sqlgraph.NewFieldSpec(productfeature.FieldID, field.TypeInt))
	id, ok := pfuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ProductFeature.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pfuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, productfeature.FieldID)
		for _, f := range fields {
			if !productfeature.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != productfeature.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pfuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pfuo.mutation.FeatureName(); ok {
		_spec.SetField(productfeature.FieldFeatureName, field.TypeString, value)
	}
	if value, ok := pfuo.mutation.UpdatedAt(); ok {
		_spec.SetField(productfeature.FieldUpdatedAt, field.TypeTime, value)
	}
	if pfuo.mutation.ProductCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productfeature.ProductTable,
			Columns: []string{productfeature.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pfuo.mutation.ProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productfeature.ProductTable,
			Columns: []string{productfeature.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pfuo.mutation.LicenseTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   productfeature.LicenseTypesTable,
			Columns: productfeature.LicenseTypesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(licensetype.FieldID, field.TypeInt),
			},
		}
		createE := &LicenseTypeFeaturesCreate{config: pfuo.config, mutation: newLicenseTypeFeaturesMutation(pfuo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pfuo.mutation.RemovedLicenseTypesIDs(); len(nodes) > 0 && !pfuo.mutation.LicenseTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   productfeature.LicenseTypesTable,
			Columns: productfeature.LicenseTypesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(licensetype.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &LicenseTypeFeaturesCreate{config: pfuo.config, mutation: newLicenseTypeFeaturesMutation(pfuo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pfuo.mutation.LicenseTypesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   productfeature.LicenseTypesTable,
			Columns: productfeature.LicenseTypesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(licensetype.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &LicenseTypeFeaturesCreate{config: pfuo.config, mutation: newLicenseTypeFeaturesMutation(pfuo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pfuo.mutation.SoftwareVersionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   productfeature.SoftwareVersionsTable,
			Columns: productfeature.SoftwareVersionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(softwareversion.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pfuo.mutation.RemovedSoftwareVersionsIDs(); len(nodes) > 0 && !pfuo.mutation.SoftwareVersionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   productfeature.SoftwareVersionsTable,
			Columns: productfeature.SoftwareVersionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(softwareversion.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pfuo.mutation.SoftwareVersionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   productfeature.SoftwareVersionsTable,
			Columns: productfeature.SoftwareVersionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(softwareversion.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pfuo.mutation.LicenseTypeFeaturesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   productfeature.LicenseTypeFeaturesTable,
			Columns: []string{productfeature.LicenseTypeFeaturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(licensetypefeatures.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pfuo.mutation.RemovedLicenseTypeFeaturesIDs(); len(nodes) > 0 && !pfuo.mutation.LicenseTypeFeaturesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   productfeature.LicenseTypeFeaturesTable,
			Columns: []string{productfeature.LicenseTypeFeaturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(licensetypefeatures.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pfuo.mutation.LicenseTypeFeaturesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   productfeature.LicenseTypeFeaturesTable,
			Columns: []string{productfeature.LicenseTypeFeaturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(licensetypefeatures.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ProductFeature{config: pfuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pfuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{productfeature.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	pfuo.mutation.done = true
	return _node, nil
}
