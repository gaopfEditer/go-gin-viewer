// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"cambridge-hit.com/gin-base/activateserver/app/entity/ent/predicate"
	"cambridge-hit.com/gin-base/activateserver/app/entity/ent/product"
	"cambridge-hit.com/gin-base/activateserver/app/entity/ent/productmanager"
	"cambridge-hit.com/gin-base/activateserver/app/entity/ent/user"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ProductManagerUpdate is the builder for updating ProductManager entities.
type ProductManagerUpdate struct {
	config
	hooks    []Hook
	mutation *ProductManagerMutation
}

// Where appends a list predicates to the ProductManagerUpdate builder.
func (pmu *ProductManagerUpdate) Where(ps ...predicate.ProductManager) *ProductManagerUpdate {
	pmu.mutation.Where(ps...)
	return pmu
}

// SetRole sets the "role" field.
func (pmu *ProductManagerUpdate) SetRole(pr productmanager.Role) *ProductManagerUpdate {
	pmu.mutation.SetRole(pr)
	return pmu
}

// SetUserID sets the "user_id" field.
func (pmu *ProductManagerUpdate) SetUserID(i int) *ProductManagerUpdate {
	pmu.mutation.SetUserID(i)
	return pmu
}

// SetProductID sets the "product_id" field.
func (pmu *ProductManagerUpdate) SetProductID(i int) *ProductManagerUpdate {
	pmu.mutation.SetProductID(i)
	return pmu
}

// SetPermissions sets the "permissions" field.
func (pmu *ProductManagerUpdate) SetPermissions(pr productmanager.Permissions) *ProductManagerUpdate {
	pmu.mutation.SetPermissions(pr)
	return pmu
}

// SetNillablePermissions sets the "permissions" field if the given value is not nil.
func (pmu *ProductManagerUpdate) SetNillablePermissions(pr *productmanager.Permissions) *ProductManagerUpdate {
	if pr != nil {
		pmu.SetPermissions(*pr)
	}
	return pmu
}

// ClearPermissions clears the value of the "permissions" field.
func (pmu *ProductManagerUpdate) ClearPermissions() *ProductManagerUpdate {
	pmu.mutation.ClearPermissions()
	return pmu
}

// SetRemark sets the "remark" field.
func (pmu *ProductManagerUpdate) SetRemark(s string) *ProductManagerUpdate {
	pmu.mutation.SetRemark(s)
	return pmu
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (pmu *ProductManagerUpdate) SetNillableRemark(s *string) *ProductManagerUpdate {
	if s != nil {
		pmu.SetRemark(*s)
	}
	return pmu
}

// ClearRemark clears the value of the "remark" field.
func (pmu *ProductManagerUpdate) ClearRemark() *ProductManagerUpdate {
	pmu.mutation.ClearRemark()
	return pmu
}

// SetUpdatedAt sets the "updated_at" field.
func (pmu *ProductManagerUpdate) SetUpdatedAt(t time.Time) *ProductManagerUpdate {
	pmu.mutation.SetUpdatedAt(t)
	return pmu
}

// SetUser sets the "user" edge to the User entity.
func (pmu *ProductManagerUpdate) SetUser(u *User) *ProductManagerUpdate {
	return pmu.SetUserID(u.ID)
}

// SetProduct sets the "product" edge to the Product entity.
func (pmu *ProductManagerUpdate) SetProduct(p *Product) *ProductManagerUpdate {
	return pmu.SetProductID(p.ID)
}

// Mutation returns the ProductManagerMutation object of the builder.
func (pmu *ProductManagerUpdate) Mutation() *ProductManagerMutation {
	return pmu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (pmu *ProductManagerUpdate) ClearUser() *ProductManagerUpdate {
	pmu.mutation.ClearUser()
	return pmu
}

// ClearProduct clears the "product" edge to the Product entity.
func (pmu *ProductManagerUpdate) ClearProduct() *ProductManagerUpdate {
	pmu.mutation.ClearProduct()
	return pmu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pmu *ProductManagerUpdate) Save(ctx context.Context) (int, error) {
	pmu.defaults()
	return withHooks(ctx, pmu.sqlSave, pmu.mutation, pmu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pmu *ProductManagerUpdate) SaveX(ctx context.Context) int {
	affected, err := pmu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pmu *ProductManagerUpdate) Exec(ctx context.Context) error {
	_, err := pmu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pmu *ProductManagerUpdate) ExecX(ctx context.Context) {
	if err := pmu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pmu *ProductManagerUpdate) defaults() {
	if _, ok := pmu.mutation.UpdatedAt(); !ok {
		v := productmanager.UpdateDefaultUpdatedAt()
		pmu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pmu *ProductManagerUpdate) check() error {
	if v, ok := pmu.mutation.Role(); ok {
		if err := productmanager.RoleValidator(v); err != nil {
			return &ValidationError{Name: "role", err: fmt.Errorf(`ent: validator failed for field "ProductManager.role": %w`, err)}
		}
	}
	if v, ok := pmu.mutation.Permissions(); ok {
		if err := productmanager.PermissionsValidator(v); err != nil {
			return &ValidationError{Name: "permissions", err: fmt.Errorf(`ent: validator failed for field "ProductManager.permissions": %w`, err)}
		}
	}
	if _, ok := pmu.mutation.UserID(); pmu.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ProductManager.user"`)
	}
	if _, ok := pmu.mutation.ProductID(); pmu.mutation.ProductCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ProductManager.product"`)
	}
	return nil
}

func (pmu *ProductManagerUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pmu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(productmanager.Table, productmanager.Columns, sqlgraph.NewFieldSpec(productmanager.FieldID, field.TypeInt))
	if ps := pmu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pmu.mutation.Role(); ok {
		_spec.SetField(productmanager.FieldRole, field.TypeEnum, value)
	}
	if value, ok := pmu.mutation.Permissions(); ok {
		_spec.SetField(productmanager.FieldPermissions, field.TypeEnum, value)
	}
	if pmu.mutation.PermissionsCleared() {
		_spec.ClearField(productmanager.FieldPermissions, field.TypeEnum)
	}
	if value, ok := pmu.mutation.Remark(); ok {
		_spec.SetField(productmanager.FieldRemark, field.TypeString, value)
	}
	if pmu.mutation.RemarkCleared() {
		_spec.ClearField(productmanager.FieldRemark, field.TypeString)
	}
	if value, ok := pmu.mutation.UpdatedAt(); ok {
		_spec.SetField(productmanager.FieldUpdatedAt, field.TypeTime, value)
	}
	if pmu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productmanager.UserTable,
			Columns: []string{productmanager.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pmu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productmanager.UserTable,
			Columns: []string{productmanager.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pmu.mutation.ProductCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productmanager.ProductTable,
			Columns: []string{productmanager.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pmu.mutation.ProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productmanager.ProductTable,
			Columns: []string{productmanager.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pmu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{productmanager.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pmu.mutation.done = true
	return n, nil
}

// ProductManagerUpdateOne is the builder for updating a single ProductManager entity.
type ProductManagerUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProductManagerMutation
}

// SetRole sets the "role" field.
func (pmuo *ProductManagerUpdateOne) SetRole(pr productmanager.Role) *ProductManagerUpdateOne {
	pmuo.mutation.SetRole(pr)
	return pmuo
}

// SetUserID sets the "user_id" field.
func (pmuo *ProductManagerUpdateOne) SetUserID(i int) *ProductManagerUpdateOne {
	pmuo.mutation.SetUserID(i)
	return pmuo
}

// SetProductID sets the "product_id" field.
func (pmuo *ProductManagerUpdateOne) SetProductID(i int) *ProductManagerUpdateOne {
	pmuo.mutation.SetProductID(i)
	return pmuo
}

// SetPermissions sets the "permissions" field.
func (pmuo *ProductManagerUpdateOne) SetPermissions(pr productmanager.Permissions) *ProductManagerUpdateOne {
	pmuo.mutation.SetPermissions(pr)
	return pmuo
}

// SetNillablePermissions sets the "permissions" field if the given value is not nil.
func (pmuo *ProductManagerUpdateOne) SetNillablePermissions(pr *productmanager.Permissions) *ProductManagerUpdateOne {
	if pr != nil {
		pmuo.SetPermissions(*pr)
	}
	return pmuo
}

// ClearPermissions clears the value of the "permissions" field.
func (pmuo *ProductManagerUpdateOne) ClearPermissions() *ProductManagerUpdateOne {
	pmuo.mutation.ClearPermissions()
	return pmuo
}

// SetRemark sets the "remark" field.
func (pmuo *ProductManagerUpdateOne) SetRemark(s string) *ProductManagerUpdateOne {
	pmuo.mutation.SetRemark(s)
	return pmuo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (pmuo *ProductManagerUpdateOne) SetNillableRemark(s *string) *ProductManagerUpdateOne {
	if s != nil {
		pmuo.SetRemark(*s)
	}
	return pmuo
}

// ClearRemark clears the value of the "remark" field.
func (pmuo *ProductManagerUpdateOne) ClearRemark() *ProductManagerUpdateOne {
	pmuo.mutation.ClearRemark()
	return pmuo
}

// SetUpdatedAt sets the "updated_at" field.
func (pmuo *ProductManagerUpdateOne) SetUpdatedAt(t time.Time) *ProductManagerUpdateOne {
	pmuo.mutation.SetUpdatedAt(t)
	return pmuo
}

// SetUser sets the "user" edge to the User entity.
func (pmuo *ProductManagerUpdateOne) SetUser(u *User) *ProductManagerUpdateOne {
	return pmuo.SetUserID(u.ID)
}

// SetProduct sets the "product" edge to the Product entity.
func (pmuo *ProductManagerUpdateOne) SetProduct(p *Product) *ProductManagerUpdateOne {
	return pmuo.SetProductID(p.ID)
}

// Mutation returns the ProductManagerMutation object of the builder.
func (pmuo *ProductManagerUpdateOne) Mutation() *ProductManagerMutation {
	return pmuo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (pmuo *ProductManagerUpdateOne) ClearUser() *ProductManagerUpdateOne {
	pmuo.mutation.ClearUser()
	return pmuo
}

// ClearProduct clears the "product" edge to the Product entity.
func (pmuo *ProductManagerUpdateOne) ClearProduct() *ProductManagerUpdateOne {
	pmuo.mutation.ClearProduct()
	return pmuo
}

// Where appends a list predicates to the ProductManagerUpdate builder.
func (pmuo *ProductManagerUpdateOne) Where(ps ...predicate.ProductManager) *ProductManagerUpdateOne {
	pmuo.mutation.Where(ps...)
	return pmuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pmuo *ProductManagerUpdateOne) Select(field string, fields ...string) *ProductManagerUpdateOne {
	pmuo.fields = append([]string{field}, fields...)
	return pmuo
}

// Save executes the query and returns the updated ProductManager entity.
func (pmuo *ProductManagerUpdateOne) Save(ctx context.Context) (*ProductManager, error) {
	pmuo.defaults()
	return withHooks(ctx, pmuo.sqlSave, pmuo.mutation, pmuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pmuo *ProductManagerUpdateOne) SaveX(ctx context.Context) *ProductManager {
	node, err := pmuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pmuo *ProductManagerUpdateOne) Exec(ctx context.Context) error {
	_, err := pmuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pmuo *ProductManagerUpdateOne) ExecX(ctx context.Context) {
	if err := pmuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pmuo *ProductManagerUpdateOne) defaults() {
	if _, ok := pmuo.mutation.UpdatedAt(); !ok {
		v := productmanager.UpdateDefaultUpdatedAt()
		pmuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pmuo *ProductManagerUpdateOne) check() error {
	if v, ok := pmuo.mutation.Role(); ok {
		if err := productmanager.RoleValidator(v); err != nil {
			return &ValidationError{Name: "role", err: fmt.Errorf(`ent: validator failed for field "ProductManager.role": %w`, err)}
		}
	}
	if v, ok := pmuo.mutation.Permissions(); ok {
		if err := productmanager.PermissionsValidator(v); err != nil {
			return &ValidationError{Name: "permissions", err: fmt.Errorf(`ent: validator failed for field "ProductManager.permissions": %w`, err)}
		}
	}
	if _, ok := pmuo.mutation.UserID(); pmuo.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ProductManager.user"`)
	}
	if _, ok := pmuo.mutation.ProductID(); pmuo.mutation.ProductCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ProductManager.product"`)
	}
	return nil
}

func (pmuo *ProductManagerUpdateOne) sqlSave(ctx context.Context) (_node *ProductManager, err error) {
	if err := pmuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(productmanager.Table, productmanager.Columns, sqlgraph.NewFieldSpec(productmanager.FieldID, field.TypeInt))
	id, ok := pmuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ProductManager.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pmuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, productmanager.FieldID)
		for _, f := range fields {
			if !productmanager.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != productmanager.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pmuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pmuo.mutation.Role(); ok {
		_spec.SetField(productmanager.FieldRole, field.TypeEnum, value)
	}
	if value, ok := pmuo.mutation.Permissions(); ok {
		_spec.SetField(productmanager.FieldPermissions, field.TypeEnum, value)
	}
	if pmuo.mutation.PermissionsCleared() {
		_spec.ClearField(productmanager.FieldPermissions, field.TypeEnum)
	}
	if value, ok := pmuo.mutation.Remark(); ok {
		_spec.SetField(productmanager.FieldRemark, field.TypeString, value)
	}
	if pmuo.mutation.RemarkCleared() {
		_spec.ClearField(productmanager.FieldRemark, field.TypeString)
	}
	if value, ok := pmuo.mutation.UpdatedAt(); ok {
		_spec.SetField(productmanager.FieldUpdatedAt, field.TypeTime, value)
	}
	if pmuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productmanager.UserTable,
			Columns: []string{productmanager.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pmuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productmanager.UserTable,
			Columns: []string{productmanager.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pmuo.mutation.ProductCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productmanager.ProductTable,
			Columns: []string{productmanager.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pmuo.mutation.ProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productmanager.ProductTable,
			Columns: []string{productmanager.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ProductManager{config: pmuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pmuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{productmanager.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	pmuo.mutation.done = true
	return _node, nil
}
