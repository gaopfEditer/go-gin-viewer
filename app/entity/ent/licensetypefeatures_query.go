// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"cambridge-hit.com/gin-base/activateserver/app/entity/ent/licensetype"
	"cambridge-hit.com/gin-base/activateserver/app/entity/ent/licensetypefeatures"
	"cambridge-hit.com/gin-base/activateserver/app/entity/ent/predicate"
	"cambridge-hit.com/gin-base/activateserver/app/entity/ent/productfeature"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// LicenseTypeFeaturesQuery is the builder for querying LicenseTypeFeatures entities.
type LicenseTypeFeaturesQuery struct {
	config
	ctx             *QueryContext
	order           []licensetypefeatures.OrderOption
	inters          []Interceptor
	predicates      []predicate.LicenseTypeFeatures
	withLicenseType *LicenseTypeQuery
	withFeature     *ProductFeatureQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the LicenseTypeFeaturesQuery builder.
func (ltfq *LicenseTypeFeaturesQuery) Where(ps ...predicate.LicenseTypeFeatures) *LicenseTypeFeaturesQuery {
	ltfq.predicates = append(ltfq.predicates, ps...)
	return ltfq
}

// Limit the number of records to be returned by this query.
func (ltfq *LicenseTypeFeaturesQuery) Limit(limit int) *LicenseTypeFeaturesQuery {
	ltfq.ctx.Limit = &limit
	return ltfq
}

// Offset to start from.
func (ltfq *LicenseTypeFeaturesQuery) Offset(offset int) *LicenseTypeFeaturesQuery {
	ltfq.ctx.Offset = &offset
	return ltfq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (ltfq *LicenseTypeFeaturesQuery) Unique(unique bool) *LicenseTypeFeaturesQuery {
	ltfq.ctx.Unique = &unique
	return ltfq
}

// Order specifies how the records should be ordered.
func (ltfq *LicenseTypeFeaturesQuery) Order(o ...licensetypefeatures.OrderOption) *LicenseTypeFeaturesQuery {
	ltfq.order = append(ltfq.order, o...)
	return ltfq
}

// QueryLicenseType chains the current query on the "license_type" edge.
func (ltfq *LicenseTypeFeaturesQuery) QueryLicenseType() *LicenseTypeQuery {
	query := (&LicenseTypeClient{config: ltfq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ltfq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ltfq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(licensetypefeatures.Table, licensetypefeatures.FieldID, selector),
			sqlgraph.To(licensetype.Table, licensetype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, licensetypefeatures.LicenseTypeTable, licensetypefeatures.LicenseTypeColumn),
		)
		fromU = sqlgraph.SetNeighbors(ltfq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryFeature chains the current query on the "feature" edge.
func (ltfq *LicenseTypeFeaturesQuery) QueryFeature() *ProductFeatureQuery {
	query := (&ProductFeatureClient{config: ltfq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ltfq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ltfq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(licensetypefeatures.Table, licensetypefeatures.FieldID, selector),
			sqlgraph.To(productfeature.Table, productfeature.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, licensetypefeatures.FeatureTable, licensetypefeatures.FeatureColumn),
		)
		fromU = sqlgraph.SetNeighbors(ltfq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first LicenseTypeFeatures entity from the query.
// Returns a *NotFoundError when no LicenseTypeFeatures was found.
func (ltfq *LicenseTypeFeaturesQuery) First(ctx context.Context) (*LicenseTypeFeatures, error) {
	nodes, err := ltfq.Limit(1).All(setContextOp(ctx, ltfq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{licensetypefeatures.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (ltfq *LicenseTypeFeaturesQuery) FirstX(ctx context.Context) *LicenseTypeFeatures {
	node, err := ltfq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first LicenseTypeFeatures ID from the query.
// Returns a *NotFoundError when no LicenseTypeFeatures ID was found.
func (ltfq *LicenseTypeFeaturesQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = ltfq.Limit(1).IDs(setContextOp(ctx, ltfq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{licensetypefeatures.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (ltfq *LicenseTypeFeaturesQuery) FirstIDX(ctx context.Context) int {
	id, err := ltfq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single LicenseTypeFeatures entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one LicenseTypeFeatures entity is found.
// Returns a *NotFoundError when no LicenseTypeFeatures entities are found.
func (ltfq *LicenseTypeFeaturesQuery) Only(ctx context.Context) (*LicenseTypeFeatures, error) {
	nodes, err := ltfq.Limit(2).All(setContextOp(ctx, ltfq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{licensetypefeatures.Label}
	default:
		return nil, &NotSingularError{licensetypefeatures.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (ltfq *LicenseTypeFeaturesQuery) OnlyX(ctx context.Context) *LicenseTypeFeatures {
	node, err := ltfq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only LicenseTypeFeatures ID in the query.
// Returns a *NotSingularError when more than one LicenseTypeFeatures ID is found.
// Returns a *NotFoundError when no entities are found.
func (ltfq *LicenseTypeFeaturesQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = ltfq.Limit(2).IDs(setContextOp(ctx, ltfq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{licensetypefeatures.Label}
	default:
		err = &NotSingularError{licensetypefeatures.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (ltfq *LicenseTypeFeaturesQuery) OnlyIDX(ctx context.Context) int {
	id, err := ltfq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of LicenseTypeFeaturesSlice.
func (ltfq *LicenseTypeFeaturesQuery) All(ctx context.Context) ([]*LicenseTypeFeatures, error) {
	ctx = setContextOp(ctx, ltfq.ctx, "All")
	if err := ltfq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*LicenseTypeFeatures, *LicenseTypeFeaturesQuery]()
	return withInterceptors[[]*LicenseTypeFeatures](ctx, ltfq, qr, ltfq.inters)
}

// AllX is like All, but panics if an error occurs.
func (ltfq *LicenseTypeFeaturesQuery) AllX(ctx context.Context) []*LicenseTypeFeatures {
	nodes, err := ltfq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of LicenseTypeFeatures IDs.
func (ltfq *LicenseTypeFeaturesQuery) IDs(ctx context.Context) (ids []int, err error) {
	if ltfq.ctx.Unique == nil && ltfq.path != nil {
		ltfq.Unique(true)
	}
	ctx = setContextOp(ctx, ltfq.ctx, "IDs")
	if err = ltfq.Select(licensetypefeatures.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (ltfq *LicenseTypeFeaturesQuery) IDsX(ctx context.Context) []int {
	ids, err := ltfq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (ltfq *LicenseTypeFeaturesQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, ltfq.ctx, "Count")
	if err := ltfq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, ltfq, querierCount[*LicenseTypeFeaturesQuery](), ltfq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (ltfq *LicenseTypeFeaturesQuery) CountX(ctx context.Context) int {
	count, err := ltfq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (ltfq *LicenseTypeFeaturesQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, ltfq.ctx, "Exist")
	switch _, err := ltfq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (ltfq *LicenseTypeFeaturesQuery) ExistX(ctx context.Context) bool {
	exist, err := ltfq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the LicenseTypeFeaturesQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (ltfq *LicenseTypeFeaturesQuery) Clone() *LicenseTypeFeaturesQuery {
	if ltfq == nil {
		return nil
	}
	return &LicenseTypeFeaturesQuery{
		config:          ltfq.config,
		ctx:             ltfq.ctx.Clone(),
		order:           append([]licensetypefeatures.OrderOption{}, ltfq.order...),
		inters:          append([]Interceptor{}, ltfq.inters...),
		predicates:      append([]predicate.LicenseTypeFeatures{}, ltfq.predicates...),
		withLicenseType: ltfq.withLicenseType.Clone(),
		withFeature:     ltfq.withFeature.Clone(),
		// clone intermediate query.
		sql:  ltfq.sql.Clone(),
		path: ltfq.path,
	}
}

// WithLicenseType tells the query-builder to eager-load the nodes that are connected to
// the "license_type" edge. The optional arguments are used to configure the query builder of the edge.
func (ltfq *LicenseTypeFeaturesQuery) WithLicenseType(opts ...func(*LicenseTypeQuery)) *LicenseTypeFeaturesQuery {
	query := (&LicenseTypeClient{config: ltfq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ltfq.withLicenseType = query
	return ltfq
}

// WithFeature tells the query-builder to eager-load the nodes that are connected to
// the "feature" edge. The optional arguments are used to configure the query builder of the edge.
func (ltfq *LicenseTypeFeaturesQuery) WithFeature(opts ...func(*ProductFeatureQuery)) *LicenseTypeFeaturesQuery {
	query := (&ProductFeatureClient{config: ltfq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ltfq.withFeature = query
	return ltfq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		LicenseTypeID int `json:"license_type_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.LicenseTypeFeatures.Query().
//		GroupBy(licensetypefeatures.FieldLicenseTypeID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (ltfq *LicenseTypeFeaturesQuery) GroupBy(field string, fields ...string) *LicenseTypeFeaturesGroupBy {
	ltfq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &LicenseTypeFeaturesGroupBy{build: ltfq}
	grbuild.flds = &ltfq.ctx.Fields
	grbuild.label = licensetypefeatures.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		LicenseTypeID int `json:"license_type_id,omitempty"`
//	}
//
//	client.LicenseTypeFeatures.Query().
//		Select(licensetypefeatures.FieldLicenseTypeID).
//		Scan(ctx, &v)
func (ltfq *LicenseTypeFeaturesQuery) Select(fields ...string) *LicenseTypeFeaturesSelect {
	ltfq.ctx.Fields = append(ltfq.ctx.Fields, fields...)
	sbuild := &LicenseTypeFeaturesSelect{LicenseTypeFeaturesQuery: ltfq}
	sbuild.label = licensetypefeatures.Label
	sbuild.flds, sbuild.scan = &ltfq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a LicenseTypeFeaturesSelect configured with the given aggregations.
func (ltfq *LicenseTypeFeaturesQuery) Aggregate(fns ...AggregateFunc) *LicenseTypeFeaturesSelect {
	return ltfq.Select().Aggregate(fns...)
}

func (ltfq *LicenseTypeFeaturesQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range ltfq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, ltfq); err != nil {
				return err
			}
		}
	}
	for _, f := range ltfq.ctx.Fields {
		if !licensetypefeatures.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if ltfq.path != nil {
		prev, err := ltfq.path(ctx)
		if err != nil {
			return err
		}
		ltfq.sql = prev
	}
	return nil
}

func (ltfq *LicenseTypeFeaturesQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*LicenseTypeFeatures, error) {
	var (
		nodes       = []*LicenseTypeFeatures{}
		_spec       = ltfq.querySpec()
		loadedTypes = [2]bool{
			ltfq.withLicenseType != nil,
			ltfq.withFeature != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*LicenseTypeFeatures).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &LicenseTypeFeatures{config: ltfq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, ltfq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := ltfq.withLicenseType; query != nil {
		if err := ltfq.loadLicenseType(ctx, query, nodes, nil,
			func(n *LicenseTypeFeatures, e *LicenseType) { n.Edges.LicenseType = e }); err != nil {
			return nil, err
		}
	}
	if query := ltfq.withFeature; query != nil {
		if err := ltfq.loadFeature(ctx, query, nodes, nil,
			func(n *LicenseTypeFeatures, e *ProductFeature) { n.Edges.Feature = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (ltfq *LicenseTypeFeaturesQuery) loadLicenseType(ctx context.Context, query *LicenseTypeQuery, nodes []*LicenseTypeFeatures, init func(*LicenseTypeFeatures), assign func(*LicenseTypeFeatures, *LicenseType)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*LicenseTypeFeatures)
	for i := range nodes {
		fk := nodes[i].LicenseTypeID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(licensetype.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "license_type_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (ltfq *LicenseTypeFeaturesQuery) loadFeature(ctx context.Context, query *ProductFeatureQuery, nodes []*LicenseTypeFeatures, init func(*LicenseTypeFeatures), assign func(*LicenseTypeFeatures, *ProductFeature)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*LicenseTypeFeatures)
	for i := range nodes {
		fk := nodes[i].FeatureID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(productfeature.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "feature_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (ltfq *LicenseTypeFeaturesQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := ltfq.querySpec()
	_spec.Node.Columns = ltfq.ctx.Fields
	if len(ltfq.ctx.Fields) > 0 {
		_spec.Unique = ltfq.ctx.Unique != nil && *ltfq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, ltfq.driver, _spec)
}

func (ltfq *LicenseTypeFeaturesQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(licensetypefeatures.Table, licensetypefeatures.Columns, sqlgraph.NewFieldSpec(licensetypefeatures.FieldID, field.TypeInt))
	_spec.From = ltfq.sql
	if unique := ltfq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if ltfq.path != nil {
		_spec.Unique = true
	}
	if fields := ltfq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, licensetypefeatures.FieldID)
		for i := range fields {
			if fields[i] != licensetypefeatures.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if ltfq.withLicenseType != nil {
			_spec.Node.AddColumnOnce(licensetypefeatures.FieldLicenseTypeID)
		}
		if ltfq.withFeature != nil {
			_spec.Node.AddColumnOnce(licensetypefeatures.FieldFeatureID)
		}
	}
	if ps := ltfq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := ltfq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := ltfq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := ltfq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (ltfq *LicenseTypeFeaturesQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(ltfq.driver.Dialect())
	t1 := builder.Table(licensetypefeatures.Table)
	columns := ltfq.ctx.Fields
	if len(columns) == 0 {
		columns = licensetypefeatures.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if ltfq.sql != nil {
		selector = ltfq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if ltfq.ctx.Unique != nil && *ltfq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range ltfq.predicates {
		p(selector)
	}
	for _, p := range ltfq.order {
		p(selector)
	}
	if offset := ltfq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := ltfq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// LicenseTypeFeaturesGroupBy is the group-by builder for LicenseTypeFeatures entities.
type LicenseTypeFeaturesGroupBy struct {
	selector
	build *LicenseTypeFeaturesQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (ltfgb *LicenseTypeFeaturesGroupBy) Aggregate(fns ...AggregateFunc) *LicenseTypeFeaturesGroupBy {
	ltfgb.fns = append(ltfgb.fns, fns...)
	return ltfgb
}

// Scan applies the selector query and scans the result into the given value.
func (ltfgb *LicenseTypeFeaturesGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ltfgb.build.ctx, "GroupBy")
	if err := ltfgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*LicenseTypeFeaturesQuery, *LicenseTypeFeaturesGroupBy](ctx, ltfgb.build, ltfgb, ltfgb.build.inters, v)
}

func (ltfgb *LicenseTypeFeaturesGroupBy) sqlScan(ctx context.Context, root *LicenseTypeFeaturesQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(ltfgb.fns))
	for _, fn := range ltfgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*ltfgb.flds)+len(ltfgb.fns))
		for _, f := range *ltfgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*ltfgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ltfgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// LicenseTypeFeaturesSelect is the builder for selecting fields of LicenseTypeFeatures entities.
type LicenseTypeFeaturesSelect struct {
	*LicenseTypeFeaturesQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ltfs *LicenseTypeFeaturesSelect) Aggregate(fns ...AggregateFunc) *LicenseTypeFeaturesSelect {
	ltfs.fns = append(ltfs.fns, fns...)
	return ltfs
}

// Scan applies the selector query and scans the result into the given value.
func (ltfs *LicenseTypeFeaturesSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ltfs.ctx, "Select")
	if err := ltfs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*LicenseTypeFeaturesQuery, *LicenseTypeFeaturesSelect](ctx, ltfs.LicenseTypeFeaturesQuery, ltfs, ltfs.inters, v)
}

func (ltfs *LicenseTypeFeaturesSelect) sqlScan(ctx context.Context, root *LicenseTypeFeaturesQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(ltfs.fns))
	for _, fn := range ltfs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*ltfs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ltfs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
