// Code generated by ent, DO NOT EDIT.

package softwareversion

import (
	"time"

	"cambridge-hit.com/gin-base/activateserver/app/entity/ent/predicate"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.SoftwareVersion {
	return predicate.SoftwareVersion(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.SoftwareVersion {
	return predicate.SoftwareVersion(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.SoftwareVersion {
	return predicate.SoftwareVersion(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.SoftwareVersion {
	return predicate.SoftwareVersion(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.SoftwareVersion {
	return predicate.SoftwareVersion(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.SoftwareVersion {
	return predicate.SoftwareVersion(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.SoftwareVersion {
	return predicate.SoftwareVersion(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.SoftwareVersion {
	return predicate.SoftwareVersion(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.SoftwareVersion {
	return predicate.SoftwareVersion(sql.FieldLTE(FieldID, id))
}

// ProductID applies equality check predicate on the "product_id" field. It's identical to ProductIDEQ.
func ProductID(v int) predicate.SoftwareVersion {
	return predicate.SoftwareVersion(sql.FieldEQ(FieldProductID, v))
}

// Version applies equality check predicate on the "version" field. It's identical to VersionEQ.
func Version(v string) predicate.SoftwareVersion {
	return predicate.SoftwareVersion(sql.FieldEQ(FieldVersion, v))
}

// ReleaseDate applies equality check predicate on the "release_date" field. It's identical to ReleaseDateEQ.
func ReleaseDate(v time.Time) predicate.SoftwareVersion {
	return predicate.SoftwareVersion(sql.FieldEQ(FieldReleaseDate, v))
}

// UpdateLog applies equality check predicate on the "update_log" field. It's identical to UpdateLogEQ.
func UpdateLog(v string) predicate.SoftwareVersion {
	return predicate.SoftwareVersion(sql.FieldEQ(FieldUpdateLog, v))
}

// Remark applies equality check predicate on the "remark" field. It's identical to RemarkEQ.
func Remark(v string) predicate.SoftwareVersion {
	return predicate.SoftwareVersion(sql.FieldEQ(FieldRemark, v))
}

// CreatedBy applies equality check predicate on the "created_by" field. It's identical to CreatedByEQ.
func CreatedBy(v int) predicate.SoftwareVersion {
	return predicate.SoftwareVersion(sql.FieldEQ(FieldCreatedBy, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.SoftwareVersion {
	return predicate.SoftwareVersion(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.SoftwareVersion {
	return predicate.SoftwareVersion(sql.FieldEQ(FieldUpdatedAt, v))
}

// ProductIDEQ applies the EQ predicate on the "product_id" field.
func ProductIDEQ(v int) predicate.SoftwareVersion {
	return predicate.SoftwareVersion(sql.FieldEQ(FieldProductID, v))
}

// ProductIDNEQ applies the NEQ predicate on the "product_id" field.
func ProductIDNEQ(v int) predicate.SoftwareVersion {
	return predicate.SoftwareVersion(sql.FieldNEQ(FieldProductID, v))
}

// ProductIDIn applies the In predicate on the "product_id" field.
func ProductIDIn(vs ...int) predicate.SoftwareVersion {
	return predicate.SoftwareVersion(sql.FieldIn(FieldProductID, vs...))
}

// ProductIDNotIn applies the NotIn predicate on the "product_id" field.
func ProductIDNotIn(vs ...int) predicate.SoftwareVersion {
	return predicate.SoftwareVersion(sql.FieldNotIn(FieldProductID, vs...))
}

// VersionEQ applies the EQ predicate on the "version" field.
func VersionEQ(v string) predicate.SoftwareVersion {
	return predicate.SoftwareVersion(sql.FieldEQ(FieldVersion, v))
}

// VersionNEQ applies the NEQ predicate on the "version" field.
func VersionNEQ(v string) predicate.SoftwareVersion {
	return predicate.SoftwareVersion(sql.FieldNEQ(FieldVersion, v))
}

// VersionIn applies the In predicate on the "version" field.
func VersionIn(vs ...string) predicate.SoftwareVersion {
	return predicate.SoftwareVersion(sql.FieldIn(FieldVersion, vs...))
}

// VersionNotIn applies the NotIn predicate on the "version" field.
func VersionNotIn(vs ...string) predicate.SoftwareVersion {
	return predicate.SoftwareVersion(sql.FieldNotIn(FieldVersion, vs...))
}

// VersionGT applies the GT predicate on the "version" field.
func VersionGT(v string) predicate.SoftwareVersion {
	return predicate.SoftwareVersion(sql.FieldGT(FieldVersion, v))
}

// VersionGTE applies the GTE predicate on the "version" field.
func VersionGTE(v string) predicate.SoftwareVersion {
	return predicate.SoftwareVersion(sql.FieldGTE(FieldVersion, v))
}

// VersionLT applies the LT predicate on the "version" field.
func VersionLT(v string) predicate.SoftwareVersion {
	return predicate.SoftwareVersion(sql.FieldLT(FieldVersion, v))
}

// VersionLTE applies the LTE predicate on the "version" field.
func VersionLTE(v string) predicate.SoftwareVersion {
	return predicate.SoftwareVersion(sql.FieldLTE(FieldVersion, v))
}

// VersionContains applies the Contains predicate on the "version" field.
func VersionContains(v string) predicate.SoftwareVersion {
	return predicate.SoftwareVersion(sql.FieldContains(FieldVersion, v))
}

// VersionHasPrefix applies the HasPrefix predicate on the "version" field.
func VersionHasPrefix(v string) predicate.SoftwareVersion {
	return predicate.SoftwareVersion(sql.FieldHasPrefix(FieldVersion, v))
}

// VersionHasSuffix applies the HasSuffix predicate on the "version" field.
func VersionHasSuffix(v string) predicate.SoftwareVersion {
	return predicate.SoftwareVersion(sql.FieldHasSuffix(FieldVersion, v))
}

// VersionEqualFold applies the EqualFold predicate on the "version" field.
func VersionEqualFold(v string) predicate.SoftwareVersion {
	return predicate.SoftwareVersion(sql.FieldEqualFold(FieldVersion, v))
}

// VersionContainsFold applies the ContainsFold predicate on the "version" field.
func VersionContainsFold(v string) predicate.SoftwareVersion {
	return predicate.SoftwareVersion(sql.FieldContainsFold(FieldVersion, v))
}

// ReleaseDateEQ applies the EQ predicate on the "release_date" field.
func ReleaseDateEQ(v time.Time) predicate.SoftwareVersion {
	return predicate.SoftwareVersion(sql.FieldEQ(FieldReleaseDate, v))
}

// ReleaseDateNEQ applies the NEQ predicate on the "release_date" field.
func ReleaseDateNEQ(v time.Time) predicate.SoftwareVersion {
	return predicate.SoftwareVersion(sql.FieldNEQ(FieldReleaseDate, v))
}

// ReleaseDateIn applies the In predicate on the "release_date" field.
func ReleaseDateIn(vs ...time.Time) predicate.SoftwareVersion {
	return predicate.SoftwareVersion(sql.FieldIn(FieldReleaseDate, vs...))
}

// ReleaseDateNotIn applies the NotIn predicate on the "release_date" field.
func ReleaseDateNotIn(vs ...time.Time) predicate.SoftwareVersion {
	return predicate.SoftwareVersion(sql.FieldNotIn(FieldReleaseDate, vs...))
}

// ReleaseDateGT applies the GT predicate on the "release_date" field.
func ReleaseDateGT(v time.Time) predicate.SoftwareVersion {
	return predicate.SoftwareVersion(sql.FieldGT(FieldReleaseDate, v))
}

// ReleaseDateGTE applies the GTE predicate on the "release_date" field.
func ReleaseDateGTE(v time.Time) predicate.SoftwareVersion {
	return predicate.SoftwareVersion(sql.FieldGTE(FieldReleaseDate, v))
}

// ReleaseDateLT applies the LT predicate on the "release_date" field.
func ReleaseDateLT(v time.Time) predicate.SoftwareVersion {
	return predicate.SoftwareVersion(sql.FieldLT(FieldReleaseDate, v))
}

// ReleaseDateLTE applies the LTE predicate on the "release_date" field.
func ReleaseDateLTE(v time.Time) predicate.SoftwareVersion {
	return predicate.SoftwareVersion(sql.FieldLTE(FieldReleaseDate, v))
}

// UpdateLogEQ applies the EQ predicate on the "update_log" field.
func UpdateLogEQ(v string) predicate.SoftwareVersion {
	return predicate.SoftwareVersion(sql.FieldEQ(FieldUpdateLog, v))
}

// UpdateLogNEQ applies the NEQ predicate on the "update_log" field.
func UpdateLogNEQ(v string) predicate.SoftwareVersion {
	return predicate.SoftwareVersion(sql.FieldNEQ(FieldUpdateLog, v))
}

// UpdateLogIn applies the In predicate on the "update_log" field.
func UpdateLogIn(vs ...string) predicate.SoftwareVersion {
	return predicate.SoftwareVersion(sql.FieldIn(FieldUpdateLog, vs...))
}

// UpdateLogNotIn applies the NotIn predicate on the "update_log" field.
func UpdateLogNotIn(vs ...string) predicate.SoftwareVersion {
	return predicate.SoftwareVersion(sql.FieldNotIn(FieldUpdateLog, vs...))
}

// UpdateLogGT applies the GT predicate on the "update_log" field.
func UpdateLogGT(v string) predicate.SoftwareVersion {
	return predicate.SoftwareVersion(sql.FieldGT(FieldUpdateLog, v))
}

// UpdateLogGTE applies the GTE predicate on the "update_log" field.
func UpdateLogGTE(v string) predicate.SoftwareVersion {
	return predicate.SoftwareVersion(sql.FieldGTE(FieldUpdateLog, v))
}

// UpdateLogLT applies the LT predicate on the "update_log" field.
func UpdateLogLT(v string) predicate.SoftwareVersion {
	return predicate.SoftwareVersion(sql.FieldLT(FieldUpdateLog, v))
}

// UpdateLogLTE applies the LTE predicate on the "update_log" field.
func UpdateLogLTE(v string) predicate.SoftwareVersion {
	return predicate.SoftwareVersion(sql.FieldLTE(FieldUpdateLog, v))
}

// UpdateLogContains applies the Contains predicate on the "update_log" field.
func UpdateLogContains(v string) predicate.SoftwareVersion {
	return predicate.SoftwareVersion(sql.FieldContains(FieldUpdateLog, v))
}

// UpdateLogHasPrefix applies the HasPrefix predicate on the "update_log" field.
func UpdateLogHasPrefix(v string) predicate.SoftwareVersion {
	return predicate.SoftwareVersion(sql.FieldHasPrefix(FieldUpdateLog, v))
}

// UpdateLogHasSuffix applies the HasSuffix predicate on the "update_log" field.
func UpdateLogHasSuffix(v string) predicate.SoftwareVersion {
	return predicate.SoftwareVersion(sql.FieldHasSuffix(FieldUpdateLog, v))
}

// UpdateLogIsNil applies the IsNil predicate on the "update_log" field.
func UpdateLogIsNil() predicate.SoftwareVersion {
	return predicate.SoftwareVersion(sql.FieldIsNull(FieldUpdateLog))
}

// UpdateLogNotNil applies the NotNil predicate on the "update_log" field.
func UpdateLogNotNil() predicate.SoftwareVersion {
	return predicate.SoftwareVersion(sql.FieldNotNull(FieldUpdateLog))
}

// UpdateLogEqualFold applies the EqualFold predicate on the "update_log" field.
func UpdateLogEqualFold(v string) predicate.SoftwareVersion {
	return predicate.SoftwareVersion(sql.FieldEqualFold(FieldUpdateLog, v))
}

// UpdateLogContainsFold applies the ContainsFold predicate on the "update_log" field.
func UpdateLogContainsFold(v string) predicate.SoftwareVersion {
	return predicate.SoftwareVersion(sql.FieldContainsFold(FieldUpdateLog, v))
}

// RemarkEQ applies the EQ predicate on the "remark" field.
func RemarkEQ(v string) predicate.SoftwareVersion {
	return predicate.SoftwareVersion(sql.FieldEQ(FieldRemark, v))
}

// RemarkNEQ applies the NEQ predicate on the "remark" field.
func RemarkNEQ(v string) predicate.SoftwareVersion {
	return predicate.SoftwareVersion(sql.FieldNEQ(FieldRemark, v))
}

// RemarkIn applies the In predicate on the "remark" field.
func RemarkIn(vs ...string) predicate.SoftwareVersion {
	return predicate.SoftwareVersion(sql.FieldIn(FieldRemark, vs...))
}

// RemarkNotIn applies the NotIn predicate on the "remark" field.
func RemarkNotIn(vs ...string) predicate.SoftwareVersion {
	return predicate.SoftwareVersion(sql.FieldNotIn(FieldRemark, vs...))
}

// RemarkGT applies the GT predicate on the "remark" field.
func RemarkGT(v string) predicate.SoftwareVersion {
	return predicate.SoftwareVersion(sql.FieldGT(FieldRemark, v))
}

// RemarkGTE applies the GTE predicate on the "remark" field.
func RemarkGTE(v string) predicate.SoftwareVersion {
	return predicate.SoftwareVersion(sql.FieldGTE(FieldRemark, v))
}

// RemarkLT applies the LT predicate on the "remark" field.
func RemarkLT(v string) predicate.SoftwareVersion {
	return predicate.SoftwareVersion(sql.FieldLT(FieldRemark, v))
}

// RemarkLTE applies the LTE predicate on the "remark" field.
func RemarkLTE(v string) predicate.SoftwareVersion {
	return predicate.SoftwareVersion(sql.FieldLTE(FieldRemark, v))
}

// RemarkContains applies the Contains predicate on the "remark" field.
func RemarkContains(v string) predicate.SoftwareVersion {
	return predicate.SoftwareVersion(sql.FieldContains(FieldRemark, v))
}

// RemarkHasPrefix applies the HasPrefix predicate on the "remark" field.
func RemarkHasPrefix(v string) predicate.SoftwareVersion {
	return predicate.SoftwareVersion(sql.FieldHasPrefix(FieldRemark, v))
}

// RemarkHasSuffix applies the HasSuffix predicate on the "remark" field.
func RemarkHasSuffix(v string) predicate.SoftwareVersion {
	return predicate.SoftwareVersion(sql.FieldHasSuffix(FieldRemark, v))
}

// RemarkIsNil applies the IsNil predicate on the "remark" field.
func RemarkIsNil() predicate.SoftwareVersion {
	return predicate.SoftwareVersion(sql.FieldIsNull(FieldRemark))
}

// RemarkNotNil applies the NotNil predicate on the "remark" field.
func RemarkNotNil() predicate.SoftwareVersion {
	return predicate.SoftwareVersion(sql.FieldNotNull(FieldRemark))
}

// RemarkEqualFold applies the EqualFold predicate on the "remark" field.
func RemarkEqualFold(v string) predicate.SoftwareVersion {
	return predicate.SoftwareVersion(sql.FieldEqualFold(FieldRemark, v))
}

// RemarkContainsFold applies the ContainsFold predicate on the "remark" field.
func RemarkContainsFold(v string) predicate.SoftwareVersion {
	return predicate.SoftwareVersion(sql.FieldContainsFold(FieldRemark, v))
}

// CreatedByEQ applies the EQ predicate on the "created_by" field.
func CreatedByEQ(v int) predicate.SoftwareVersion {
	return predicate.SoftwareVersion(sql.FieldEQ(FieldCreatedBy, v))
}

// CreatedByNEQ applies the NEQ predicate on the "created_by" field.
func CreatedByNEQ(v int) predicate.SoftwareVersion {
	return predicate.SoftwareVersion(sql.FieldNEQ(FieldCreatedBy, v))
}

// CreatedByIn applies the In predicate on the "created_by" field.
func CreatedByIn(vs ...int) predicate.SoftwareVersion {
	return predicate.SoftwareVersion(sql.FieldIn(FieldCreatedBy, vs...))
}

// CreatedByNotIn applies the NotIn predicate on the "created_by" field.
func CreatedByNotIn(vs ...int) predicate.SoftwareVersion {
	return predicate.SoftwareVersion(sql.FieldNotIn(FieldCreatedBy, vs...))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.SoftwareVersion {
	return predicate.SoftwareVersion(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.SoftwareVersion {
	return predicate.SoftwareVersion(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.SoftwareVersion {
	return predicate.SoftwareVersion(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.SoftwareVersion {
	return predicate.SoftwareVersion(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.SoftwareVersion {
	return predicate.SoftwareVersion(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.SoftwareVersion {
	return predicate.SoftwareVersion(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.SoftwareVersion {
	return predicate.SoftwareVersion(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.SoftwareVersion {
	return predicate.SoftwareVersion(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.SoftwareVersion {
	return predicate.SoftwareVersion(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.SoftwareVersion {
	return predicate.SoftwareVersion(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.SoftwareVersion {
	return predicate.SoftwareVersion(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.SoftwareVersion {
	return predicate.SoftwareVersion(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.SoftwareVersion {
	return predicate.SoftwareVersion(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.SoftwareVersion {
	return predicate.SoftwareVersion(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.SoftwareVersion {
	return predicate.SoftwareVersion(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.SoftwareVersion {
	return predicate.SoftwareVersion(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasFeatures applies the HasEdge predicate on the "features" edge.
func HasFeatures() predicate.SoftwareVersion {
	return predicate.SoftwareVersion(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, FeaturesTable, FeaturesPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFeaturesWith applies the HasEdge predicate on the "features" edge with a given conditions (other predicates).
func HasFeaturesWith(preds ...predicate.ProductFeature) predicate.SoftwareVersion {
	return predicate.SoftwareVersion(func(s *sql.Selector) {
		step := newFeaturesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasFirmwareVersions applies the HasEdge predicate on the "firmware_versions" edge.
func HasFirmwareVersions() predicate.SoftwareVersion {
	return predicate.SoftwareVersion(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, FirmwareVersionsTable, FirmwareVersionsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFirmwareVersionsWith applies the HasEdge predicate on the "firmware_versions" edge with a given conditions (other predicates).
func HasFirmwareVersionsWith(preds ...predicate.FirmwareVersion) predicate.SoftwareVersion {
	return predicate.SoftwareVersion(func(s *sql.Selector) {
		step := newFirmwareVersionsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasProduct applies the HasEdge predicate on the "product" edge.
func HasProduct() predicate.SoftwareVersion {
	return predicate.SoftwareVersion(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ProductTable, ProductColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProductWith applies the HasEdge predicate on the "product" edge with a given conditions (other predicates).
func HasProductWith(preds ...predicate.Product) predicate.SoftwareVersion {
	return predicate.SoftwareVersion(func(s *sql.Selector) {
		step := newProductStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCreator applies the HasEdge predicate on the "creator" edge.
func HasCreator() predicate.SoftwareVersion {
	return predicate.SoftwareVersion(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, CreatorTable, CreatorColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCreatorWith applies the HasEdge predicate on the "creator" edge with a given conditions (other predicates).
func HasCreatorWith(preds ...predicate.User) predicate.SoftwareVersion {
	return predicate.SoftwareVersion(func(s *sql.Selector) {
		step := newCreatorStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.SoftwareVersion) predicate.SoftwareVersion {
	return predicate.SoftwareVersion(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.SoftwareVersion) predicate.SoftwareVersion {
	return predicate.SoftwareVersion(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.SoftwareVersion) predicate.SoftwareVersion {
	return predicate.SoftwareVersion(sql.NotPredicates(p))
}
