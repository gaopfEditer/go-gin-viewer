// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"cambridge-hit.com/gin-base/activateserver/app/entity/ent/migrate"

	"cambridge-hit.com/gin-base/activateserver/app/entity/ent/auditlog"
	"cambridge-hit.com/gin-base/activateserver/app/entity/ent/device"
	"cambridge-hit.com/gin-base/activateserver/app/entity/ent/firmwareversion"
	"cambridge-hit.com/gin-base/activateserver/app/entity/ent/licensetype"
	"cambridge-hit.com/gin-base/activateserver/app/entity/ent/licensetypefeatures"
	"cambridge-hit.com/gin-base/activateserver/app/entity/ent/product"
	"cambridge-hit.com/gin-base/activateserver/app/entity/ent/productfeature"
	"cambridge-hit.com/gin-base/activateserver/app/entity/ent/productmanager"
	"cambridge-hit.com/gin-base/activateserver/app/entity/ent/softwareversion"
	"cambridge-hit.com/gin-base/activateserver/app/entity/ent/user"
	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// AuditLog is the client for interacting with the AuditLog builders.
	AuditLog *AuditLogClient
	// Device is the client for interacting with the Device builders.
	Device *DeviceClient
	// FirmwareVersion is the client for interacting with the FirmwareVersion builders.
	FirmwareVersion *FirmwareVersionClient
	// LicenseType is the client for interacting with the LicenseType builders.
	LicenseType *LicenseTypeClient
	// LicenseTypeFeatures is the client for interacting with the LicenseTypeFeatures builders.
	LicenseTypeFeatures *LicenseTypeFeaturesClient
	// Product is the client for interacting with the Product builders.
	Product *ProductClient
	// ProductFeature is the client for interacting with the ProductFeature builders.
	ProductFeature *ProductFeatureClient
	// ProductManager is the client for interacting with the ProductManager builders.
	ProductManager *ProductManagerClient
	// SoftwareVersion is the client for interacting with the SoftwareVersion builders.
	SoftwareVersion *SoftwareVersionClient
	// User is the client for interacting with the User builders.
	User *UserClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.AuditLog = NewAuditLogClient(c.config)
	c.Device = NewDeviceClient(c.config)
	c.FirmwareVersion = NewFirmwareVersionClient(c.config)
	c.LicenseType = NewLicenseTypeClient(c.config)
	c.LicenseTypeFeatures = NewLicenseTypeFeaturesClient(c.config)
	c.Product = NewProductClient(c.config)
	c.ProductFeature = NewProductFeatureClient(c.config)
	c.ProductManager = NewProductManagerClient(c.config)
	c.SoftwareVersion = NewSoftwareVersionClient(c.config)
	c.User = NewUserClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:                 ctx,
		config:              cfg,
		AuditLog:            NewAuditLogClient(cfg),
		Device:              NewDeviceClient(cfg),
		FirmwareVersion:     NewFirmwareVersionClient(cfg),
		LicenseType:         NewLicenseTypeClient(cfg),
		LicenseTypeFeatures: NewLicenseTypeFeaturesClient(cfg),
		Product:             NewProductClient(cfg),
		ProductFeature:      NewProductFeatureClient(cfg),
		ProductManager:      NewProductManagerClient(cfg),
		SoftwareVersion:     NewSoftwareVersionClient(cfg),
		User:                NewUserClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:                 ctx,
		config:              cfg,
		AuditLog:            NewAuditLogClient(cfg),
		Device:              NewDeviceClient(cfg),
		FirmwareVersion:     NewFirmwareVersionClient(cfg),
		LicenseType:         NewLicenseTypeClient(cfg),
		LicenseTypeFeatures: NewLicenseTypeFeaturesClient(cfg),
		Product:             NewProductClient(cfg),
		ProductFeature:      NewProductFeatureClient(cfg),
		ProductManager:      NewProductManagerClient(cfg),
		SoftwareVersion:     NewSoftwareVersionClient(cfg),
		User:                NewUserClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		AuditLog.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	for _, n := range []interface{ Use(...Hook) }{
		c.AuditLog, c.Device, c.FirmwareVersion, c.LicenseType, c.LicenseTypeFeatures,
		c.Product, c.ProductFeature, c.ProductManager, c.SoftwareVersion, c.User,
	} {
		n.Use(hooks...)
	}
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	for _, n := range []interface{ Intercept(...Interceptor) }{
		c.AuditLog, c.Device, c.FirmwareVersion, c.LicenseType, c.LicenseTypeFeatures,
		c.Product, c.ProductFeature, c.ProductManager, c.SoftwareVersion, c.User,
	} {
		n.Intercept(interceptors...)
	}
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *AuditLogMutation:
		return c.AuditLog.mutate(ctx, m)
	case *DeviceMutation:
		return c.Device.mutate(ctx, m)
	case *FirmwareVersionMutation:
		return c.FirmwareVersion.mutate(ctx, m)
	case *LicenseTypeMutation:
		return c.LicenseType.mutate(ctx, m)
	case *LicenseTypeFeaturesMutation:
		return c.LicenseTypeFeatures.mutate(ctx, m)
	case *ProductMutation:
		return c.Product.mutate(ctx, m)
	case *ProductFeatureMutation:
		return c.ProductFeature.mutate(ctx, m)
	case *ProductManagerMutation:
		return c.ProductManager.mutate(ctx, m)
	case *SoftwareVersionMutation:
		return c.SoftwareVersion.mutate(ctx, m)
	case *UserMutation:
		return c.User.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// AuditLogClient is a client for the AuditLog schema.
type AuditLogClient struct {
	config
}

// NewAuditLogClient returns a client for the AuditLog from the given config.
func NewAuditLogClient(c config) *AuditLogClient {
	return &AuditLogClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `auditlog.Hooks(f(g(h())))`.
func (c *AuditLogClient) Use(hooks ...Hook) {
	c.hooks.AuditLog = append(c.hooks.AuditLog, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `auditlog.Intercept(f(g(h())))`.
func (c *AuditLogClient) Intercept(interceptors ...Interceptor) {
	c.inters.AuditLog = append(c.inters.AuditLog, interceptors...)
}

// Create returns a builder for creating a AuditLog entity.
func (c *AuditLogClient) Create() *AuditLogCreate {
	mutation := newAuditLogMutation(c.config, OpCreate)
	return &AuditLogCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AuditLog entities.
func (c *AuditLogClient) CreateBulk(builders ...*AuditLogCreate) *AuditLogCreateBulk {
	return &AuditLogCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *AuditLogClient) MapCreateBulk(slice any, setFunc func(*AuditLogCreate, int)) *AuditLogCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &AuditLogCreateBulk{err: fmt.Errorf("calling to AuditLogClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*AuditLogCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &AuditLogCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AuditLog.
func (c *AuditLogClient) Update() *AuditLogUpdate {
	mutation := newAuditLogMutation(c.config, OpUpdate)
	return &AuditLogUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AuditLogClient) UpdateOne(al *AuditLog) *AuditLogUpdateOne {
	mutation := newAuditLogMutation(c.config, OpUpdateOne, withAuditLog(al))
	return &AuditLogUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AuditLogClient) UpdateOneID(id int) *AuditLogUpdateOne {
	mutation := newAuditLogMutation(c.config, OpUpdateOne, withAuditLogID(id))
	return &AuditLogUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AuditLog.
func (c *AuditLogClient) Delete() *AuditLogDelete {
	mutation := newAuditLogMutation(c.config, OpDelete)
	return &AuditLogDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AuditLogClient) DeleteOne(al *AuditLog) *AuditLogDeleteOne {
	return c.DeleteOneID(al.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AuditLogClient) DeleteOneID(id int) *AuditLogDeleteOne {
	builder := c.Delete().Where(auditlog.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AuditLogDeleteOne{builder}
}

// Query returns a query builder for AuditLog.
func (c *AuditLogClient) Query() *AuditLogQuery {
	return &AuditLogQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAuditLog},
		inters: c.Interceptors(),
	}
}

// Get returns a AuditLog entity by its id.
func (c *AuditLogClient) Get(ctx context.Context, id int) (*AuditLog, error) {
	return c.Query().Where(auditlog.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AuditLogClient) GetX(ctx context.Context, id int) *AuditLog {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOperator queries the operator edge of a AuditLog.
func (c *AuditLogClient) QueryOperator(al *AuditLog) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := al.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(auditlog.Table, auditlog.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, auditlog.OperatorTable, auditlog.OperatorColumn),
		)
		fromV = sqlgraph.Neighbors(al.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProduct queries the product edge of a AuditLog.
func (c *AuditLogClient) QueryProduct(al *AuditLog) *ProductQuery {
	query := (&ProductClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := al.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(auditlog.Table, auditlog.FieldID, id),
			sqlgraph.To(product.Table, product.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, auditlog.ProductTable, auditlog.ProductColumn),
		)
		fromV = sqlgraph.Neighbors(al.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AuditLogClient) Hooks() []Hook {
	return c.hooks.AuditLog
}

// Interceptors returns the client interceptors.
func (c *AuditLogClient) Interceptors() []Interceptor {
	return c.inters.AuditLog
}

func (c *AuditLogClient) mutate(ctx context.Context, m *AuditLogMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AuditLogCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AuditLogUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AuditLogUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AuditLogDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown AuditLog mutation op: %q", m.Op())
	}
}

// DeviceClient is a client for the Device schema.
type DeviceClient struct {
	config
}

// NewDeviceClient returns a client for the Device from the given config.
func NewDeviceClient(c config) *DeviceClient {
	return &DeviceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `device.Hooks(f(g(h())))`.
func (c *DeviceClient) Use(hooks ...Hook) {
	c.hooks.Device = append(c.hooks.Device, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `device.Intercept(f(g(h())))`.
func (c *DeviceClient) Intercept(interceptors ...Interceptor) {
	c.inters.Device = append(c.inters.Device, interceptors...)
}

// Create returns a builder for creating a Device entity.
func (c *DeviceClient) Create() *DeviceCreate {
	mutation := newDeviceMutation(c.config, OpCreate)
	return &DeviceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Device entities.
func (c *DeviceClient) CreateBulk(builders ...*DeviceCreate) *DeviceCreateBulk {
	return &DeviceCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *DeviceClient) MapCreateBulk(slice any, setFunc func(*DeviceCreate, int)) *DeviceCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &DeviceCreateBulk{err: fmt.Errorf("calling to DeviceClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*DeviceCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &DeviceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Device.
func (c *DeviceClient) Update() *DeviceUpdate {
	mutation := newDeviceMutation(c.config, OpUpdate)
	return &DeviceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DeviceClient) UpdateOne(d *Device) *DeviceUpdateOne {
	mutation := newDeviceMutation(c.config, OpUpdateOne, withDevice(d))
	return &DeviceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DeviceClient) UpdateOneID(id int) *DeviceUpdateOne {
	mutation := newDeviceMutation(c.config, OpUpdateOne, withDeviceID(id))
	return &DeviceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Device.
func (c *DeviceClient) Delete() *DeviceDelete {
	mutation := newDeviceMutation(c.config, OpDelete)
	return &DeviceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *DeviceClient) DeleteOne(d *Device) *DeviceDeleteOne {
	return c.DeleteOneID(d.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *DeviceClient) DeleteOneID(id int) *DeviceDeleteOne {
	builder := c.Delete().Where(device.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DeviceDeleteOne{builder}
}

// Query returns a query builder for Device.
func (c *DeviceClient) Query() *DeviceQuery {
	return &DeviceQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeDevice},
		inters: c.Interceptors(),
	}
}

// Get returns a Device entity by its id.
func (c *DeviceClient) Get(ctx context.Context, id int) (*Device, error) {
	return c.Query().Where(device.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DeviceClient) GetX(ctx context.Context, id int) *Device {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryProduct queries the product edge of a Device.
func (c *DeviceClient) QueryProduct(d *Device) *ProductQuery {
	query := (&ProductClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := d.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(device.Table, device.FieldID, id),
			sqlgraph.To(product.Table, product.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, device.ProductTable, device.ProductColumn),
		)
		fromV = sqlgraph.Neighbors(d.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryLicenseType queries the license_type edge of a Device.
func (c *DeviceClient) QueryLicenseType(d *Device) *LicenseTypeQuery {
	query := (&LicenseTypeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := d.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(device.Table, device.FieldID, id),
			sqlgraph.To(licensetype.Table, licensetype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, device.LicenseTypeTable, device.LicenseTypeColumn),
		)
		fromV = sqlgraph.Neighbors(d.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCreator queries the creator edge of a Device.
func (c *DeviceClient) QueryCreator(d *Device) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := d.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(device.Table, device.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, device.CreatorTable, device.CreatorColumn),
		)
		fromV = sqlgraph.Neighbors(d.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUpdater queries the updater edge of a Device.
func (c *DeviceClient) QueryUpdater(d *Device) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := d.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(device.Table, device.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, device.UpdaterTable, device.UpdaterColumn),
		)
		fromV = sqlgraph.Neighbors(d.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *DeviceClient) Hooks() []Hook {
	return c.hooks.Device
}

// Interceptors returns the client interceptors.
func (c *DeviceClient) Interceptors() []Interceptor {
	return c.inters.Device
}

func (c *DeviceClient) mutate(ctx context.Context, m *DeviceMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&DeviceCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&DeviceUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&DeviceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&DeviceDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Device mutation op: %q", m.Op())
	}
}

// FirmwareVersionClient is a client for the FirmwareVersion schema.
type FirmwareVersionClient struct {
	config
}

// NewFirmwareVersionClient returns a client for the FirmwareVersion from the given config.
func NewFirmwareVersionClient(c config) *FirmwareVersionClient {
	return &FirmwareVersionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `firmwareversion.Hooks(f(g(h())))`.
func (c *FirmwareVersionClient) Use(hooks ...Hook) {
	c.hooks.FirmwareVersion = append(c.hooks.FirmwareVersion, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `firmwareversion.Intercept(f(g(h())))`.
func (c *FirmwareVersionClient) Intercept(interceptors ...Interceptor) {
	c.inters.FirmwareVersion = append(c.inters.FirmwareVersion, interceptors...)
}

// Create returns a builder for creating a FirmwareVersion entity.
func (c *FirmwareVersionClient) Create() *FirmwareVersionCreate {
	mutation := newFirmwareVersionMutation(c.config, OpCreate)
	return &FirmwareVersionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of FirmwareVersion entities.
func (c *FirmwareVersionClient) CreateBulk(builders ...*FirmwareVersionCreate) *FirmwareVersionCreateBulk {
	return &FirmwareVersionCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *FirmwareVersionClient) MapCreateBulk(slice any, setFunc func(*FirmwareVersionCreate, int)) *FirmwareVersionCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &FirmwareVersionCreateBulk{err: fmt.Errorf("calling to FirmwareVersionClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*FirmwareVersionCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &FirmwareVersionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for FirmwareVersion.
func (c *FirmwareVersionClient) Update() *FirmwareVersionUpdate {
	mutation := newFirmwareVersionMutation(c.config, OpUpdate)
	return &FirmwareVersionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *FirmwareVersionClient) UpdateOne(fv *FirmwareVersion) *FirmwareVersionUpdateOne {
	mutation := newFirmwareVersionMutation(c.config, OpUpdateOne, withFirmwareVersion(fv))
	return &FirmwareVersionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *FirmwareVersionClient) UpdateOneID(id int) *FirmwareVersionUpdateOne {
	mutation := newFirmwareVersionMutation(c.config, OpUpdateOne, withFirmwareVersionID(id))
	return &FirmwareVersionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for FirmwareVersion.
func (c *FirmwareVersionClient) Delete() *FirmwareVersionDelete {
	mutation := newFirmwareVersionMutation(c.config, OpDelete)
	return &FirmwareVersionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *FirmwareVersionClient) DeleteOne(fv *FirmwareVersion) *FirmwareVersionDeleteOne {
	return c.DeleteOneID(fv.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *FirmwareVersionClient) DeleteOneID(id int) *FirmwareVersionDeleteOne {
	builder := c.Delete().Where(firmwareversion.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &FirmwareVersionDeleteOne{builder}
}

// Query returns a query builder for FirmwareVersion.
func (c *FirmwareVersionClient) Query() *FirmwareVersionQuery {
	return &FirmwareVersionQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeFirmwareVersion},
		inters: c.Interceptors(),
	}
}

// Get returns a FirmwareVersion entity by its id.
func (c *FirmwareVersionClient) Get(ctx context.Context, id int) (*FirmwareVersion, error) {
	return c.Query().Where(firmwareversion.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *FirmwareVersionClient) GetX(ctx context.Context, id int) *FirmwareVersion {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySoftwareVersions queries the software_versions edge of a FirmwareVersion.
func (c *FirmwareVersionClient) QuerySoftwareVersions(fv *FirmwareVersion) *SoftwareVersionQuery {
	query := (&SoftwareVersionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := fv.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(firmwareversion.Table, firmwareversion.FieldID, id),
			sqlgraph.To(softwareversion.Table, softwareversion.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, firmwareversion.SoftwareVersionsTable, firmwareversion.SoftwareVersionsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(fv.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProduct queries the product edge of a FirmwareVersion.
func (c *FirmwareVersionClient) QueryProduct(fv *FirmwareVersion) *ProductQuery {
	query := (&ProductClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := fv.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(firmwareversion.Table, firmwareversion.FieldID, id),
			sqlgraph.To(product.Table, product.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, firmwareversion.ProductTable, firmwareversion.ProductColumn),
		)
		fromV = sqlgraph.Neighbors(fv.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCreator queries the creator edge of a FirmwareVersion.
func (c *FirmwareVersionClient) QueryCreator(fv *FirmwareVersion) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := fv.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(firmwareversion.Table, firmwareversion.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, firmwareversion.CreatorTable, firmwareversion.CreatorColumn),
		)
		fromV = sqlgraph.Neighbors(fv.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *FirmwareVersionClient) Hooks() []Hook {
	return c.hooks.FirmwareVersion
}

// Interceptors returns the client interceptors.
func (c *FirmwareVersionClient) Interceptors() []Interceptor {
	return c.inters.FirmwareVersion
}

func (c *FirmwareVersionClient) mutate(ctx context.Context, m *FirmwareVersionMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&FirmwareVersionCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&FirmwareVersionUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&FirmwareVersionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&FirmwareVersionDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown FirmwareVersion mutation op: %q", m.Op())
	}
}

// LicenseTypeClient is a client for the LicenseType schema.
type LicenseTypeClient struct {
	config
}

// NewLicenseTypeClient returns a client for the LicenseType from the given config.
func NewLicenseTypeClient(c config) *LicenseTypeClient {
	return &LicenseTypeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `licensetype.Hooks(f(g(h())))`.
func (c *LicenseTypeClient) Use(hooks ...Hook) {
	c.hooks.LicenseType = append(c.hooks.LicenseType, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `licensetype.Intercept(f(g(h())))`.
func (c *LicenseTypeClient) Intercept(interceptors ...Interceptor) {
	c.inters.LicenseType = append(c.inters.LicenseType, interceptors...)
}

// Create returns a builder for creating a LicenseType entity.
func (c *LicenseTypeClient) Create() *LicenseTypeCreate {
	mutation := newLicenseTypeMutation(c.config, OpCreate)
	return &LicenseTypeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of LicenseType entities.
func (c *LicenseTypeClient) CreateBulk(builders ...*LicenseTypeCreate) *LicenseTypeCreateBulk {
	return &LicenseTypeCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *LicenseTypeClient) MapCreateBulk(slice any, setFunc func(*LicenseTypeCreate, int)) *LicenseTypeCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &LicenseTypeCreateBulk{err: fmt.Errorf("calling to LicenseTypeClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*LicenseTypeCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &LicenseTypeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for LicenseType.
func (c *LicenseTypeClient) Update() *LicenseTypeUpdate {
	mutation := newLicenseTypeMutation(c.config, OpUpdate)
	return &LicenseTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *LicenseTypeClient) UpdateOne(lt *LicenseType) *LicenseTypeUpdateOne {
	mutation := newLicenseTypeMutation(c.config, OpUpdateOne, withLicenseType(lt))
	return &LicenseTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *LicenseTypeClient) UpdateOneID(id int) *LicenseTypeUpdateOne {
	mutation := newLicenseTypeMutation(c.config, OpUpdateOne, withLicenseTypeID(id))
	return &LicenseTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for LicenseType.
func (c *LicenseTypeClient) Delete() *LicenseTypeDelete {
	mutation := newLicenseTypeMutation(c.config, OpDelete)
	return &LicenseTypeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *LicenseTypeClient) DeleteOne(lt *LicenseType) *LicenseTypeDeleteOne {
	return c.DeleteOneID(lt.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *LicenseTypeClient) DeleteOneID(id int) *LicenseTypeDeleteOne {
	builder := c.Delete().Where(licensetype.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &LicenseTypeDeleteOne{builder}
}

// Query returns a query builder for LicenseType.
func (c *LicenseTypeClient) Query() *LicenseTypeQuery {
	return &LicenseTypeQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeLicenseType},
		inters: c.Interceptors(),
	}
}

// Get returns a LicenseType entity by its id.
func (c *LicenseTypeClient) Get(ctx context.Context, id int) (*LicenseType, error) {
	return c.Query().Where(licensetype.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *LicenseTypeClient) GetX(ctx context.Context, id int) *LicenseType {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryProduct queries the product edge of a LicenseType.
func (c *LicenseTypeClient) QueryProduct(lt *LicenseType) *ProductQuery {
	query := (&ProductClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := lt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(licensetype.Table, licensetype.FieldID, id),
			sqlgraph.To(product.Table, product.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, licensetype.ProductTable, licensetype.ProductColumn),
		)
		fromV = sqlgraph.Neighbors(lt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFeatures queries the features edge of a LicenseType.
func (c *LicenseTypeClient) QueryFeatures(lt *LicenseType) *ProductFeatureQuery {
	query := (&ProductFeatureClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := lt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(licensetype.Table, licensetype.FieldID, id),
			sqlgraph.To(productfeature.Table, productfeature.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, licensetype.FeaturesTable, licensetype.FeaturesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(lt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDevices queries the devices edge of a LicenseType.
func (c *LicenseTypeClient) QueryDevices(lt *LicenseType) *DeviceQuery {
	query := (&DeviceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := lt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(licensetype.Table, licensetype.FieldID, id),
			sqlgraph.To(device.Table, device.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, licensetype.DevicesTable, licensetype.DevicesColumn),
		)
		fromV = sqlgraph.Neighbors(lt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryLicenseTypeFeatures queries the license_type_features edge of a LicenseType.
func (c *LicenseTypeClient) QueryLicenseTypeFeatures(lt *LicenseType) *LicenseTypeFeaturesQuery {
	query := (&LicenseTypeFeaturesClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := lt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(licensetype.Table, licensetype.FieldID, id),
			sqlgraph.To(licensetypefeatures.Table, licensetypefeatures.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, licensetype.LicenseTypeFeaturesTable, licensetype.LicenseTypeFeaturesColumn),
		)
		fromV = sqlgraph.Neighbors(lt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *LicenseTypeClient) Hooks() []Hook {
	return c.hooks.LicenseType
}

// Interceptors returns the client interceptors.
func (c *LicenseTypeClient) Interceptors() []Interceptor {
	return c.inters.LicenseType
}

func (c *LicenseTypeClient) mutate(ctx context.Context, m *LicenseTypeMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&LicenseTypeCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&LicenseTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&LicenseTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&LicenseTypeDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown LicenseType mutation op: %q", m.Op())
	}
}

// LicenseTypeFeaturesClient is a client for the LicenseTypeFeatures schema.
type LicenseTypeFeaturesClient struct {
	config
}

// NewLicenseTypeFeaturesClient returns a client for the LicenseTypeFeatures from the given config.
func NewLicenseTypeFeaturesClient(c config) *LicenseTypeFeaturesClient {
	return &LicenseTypeFeaturesClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `licensetypefeatures.Hooks(f(g(h())))`.
func (c *LicenseTypeFeaturesClient) Use(hooks ...Hook) {
	c.hooks.LicenseTypeFeatures = append(c.hooks.LicenseTypeFeatures, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `licensetypefeatures.Intercept(f(g(h())))`.
func (c *LicenseTypeFeaturesClient) Intercept(interceptors ...Interceptor) {
	c.inters.LicenseTypeFeatures = append(c.inters.LicenseTypeFeatures, interceptors...)
}

// Create returns a builder for creating a LicenseTypeFeatures entity.
func (c *LicenseTypeFeaturesClient) Create() *LicenseTypeFeaturesCreate {
	mutation := newLicenseTypeFeaturesMutation(c.config, OpCreate)
	return &LicenseTypeFeaturesCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of LicenseTypeFeatures entities.
func (c *LicenseTypeFeaturesClient) CreateBulk(builders ...*LicenseTypeFeaturesCreate) *LicenseTypeFeaturesCreateBulk {
	return &LicenseTypeFeaturesCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *LicenseTypeFeaturesClient) MapCreateBulk(slice any, setFunc func(*LicenseTypeFeaturesCreate, int)) *LicenseTypeFeaturesCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &LicenseTypeFeaturesCreateBulk{err: fmt.Errorf("calling to LicenseTypeFeaturesClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*LicenseTypeFeaturesCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &LicenseTypeFeaturesCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for LicenseTypeFeatures.
func (c *LicenseTypeFeaturesClient) Update() *LicenseTypeFeaturesUpdate {
	mutation := newLicenseTypeFeaturesMutation(c.config, OpUpdate)
	return &LicenseTypeFeaturesUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *LicenseTypeFeaturesClient) UpdateOne(ltf *LicenseTypeFeatures) *LicenseTypeFeaturesUpdateOne {
	mutation := newLicenseTypeFeaturesMutation(c.config, OpUpdateOne, withLicenseTypeFeatures(ltf))
	return &LicenseTypeFeaturesUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *LicenseTypeFeaturesClient) UpdateOneID(id int) *LicenseTypeFeaturesUpdateOne {
	mutation := newLicenseTypeFeaturesMutation(c.config, OpUpdateOne, withLicenseTypeFeaturesID(id))
	return &LicenseTypeFeaturesUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for LicenseTypeFeatures.
func (c *LicenseTypeFeaturesClient) Delete() *LicenseTypeFeaturesDelete {
	mutation := newLicenseTypeFeaturesMutation(c.config, OpDelete)
	return &LicenseTypeFeaturesDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *LicenseTypeFeaturesClient) DeleteOne(ltf *LicenseTypeFeatures) *LicenseTypeFeaturesDeleteOne {
	return c.DeleteOneID(ltf.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *LicenseTypeFeaturesClient) DeleteOneID(id int) *LicenseTypeFeaturesDeleteOne {
	builder := c.Delete().Where(licensetypefeatures.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &LicenseTypeFeaturesDeleteOne{builder}
}

// Query returns a query builder for LicenseTypeFeatures.
func (c *LicenseTypeFeaturesClient) Query() *LicenseTypeFeaturesQuery {
	return &LicenseTypeFeaturesQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeLicenseTypeFeatures},
		inters: c.Interceptors(),
	}
}

// Get returns a LicenseTypeFeatures entity by its id.
func (c *LicenseTypeFeaturesClient) Get(ctx context.Context, id int) (*LicenseTypeFeatures, error) {
	return c.Query().Where(licensetypefeatures.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *LicenseTypeFeaturesClient) GetX(ctx context.Context, id int) *LicenseTypeFeatures {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryLicenseType queries the license_type edge of a LicenseTypeFeatures.
func (c *LicenseTypeFeaturesClient) QueryLicenseType(ltf *LicenseTypeFeatures) *LicenseTypeQuery {
	query := (&LicenseTypeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ltf.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(licensetypefeatures.Table, licensetypefeatures.FieldID, id),
			sqlgraph.To(licensetype.Table, licensetype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, licensetypefeatures.LicenseTypeTable, licensetypefeatures.LicenseTypeColumn),
		)
		fromV = sqlgraph.Neighbors(ltf.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFeature queries the feature edge of a LicenseTypeFeatures.
func (c *LicenseTypeFeaturesClient) QueryFeature(ltf *LicenseTypeFeatures) *ProductFeatureQuery {
	query := (&ProductFeatureClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ltf.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(licensetypefeatures.Table, licensetypefeatures.FieldID, id),
			sqlgraph.To(productfeature.Table, productfeature.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, licensetypefeatures.FeatureTable, licensetypefeatures.FeatureColumn),
		)
		fromV = sqlgraph.Neighbors(ltf.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *LicenseTypeFeaturesClient) Hooks() []Hook {
	return c.hooks.LicenseTypeFeatures
}

// Interceptors returns the client interceptors.
func (c *LicenseTypeFeaturesClient) Interceptors() []Interceptor {
	return c.inters.LicenseTypeFeatures
}

func (c *LicenseTypeFeaturesClient) mutate(ctx context.Context, m *LicenseTypeFeaturesMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&LicenseTypeFeaturesCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&LicenseTypeFeaturesUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&LicenseTypeFeaturesUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&LicenseTypeFeaturesDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown LicenseTypeFeatures mutation op: %q", m.Op())
	}
}

// ProductClient is a client for the Product schema.
type ProductClient struct {
	config
}

// NewProductClient returns a client for the Product from the given config.
func NewProductClient(c config) *ProductClient {
	return &ProductClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `product.Hooks(f(g(h())))`.
func (c *ProductClient) Use(hooks ...Hook) {
	c.hooks.Product = append(c.hooks.Product, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `product.Intercept(f(g(h())))`.
func (c *ProductClient) Intercept(interceptors ...Interceptor) {
	c.inters.Product = append(c.inters.Product, interceptors...)
}

// Create returns a builder for creating a Product entity.
func (c *ProductClient) Create() *ProductCreate {
	mutation := newProductMutation(c.config, OpCreate)
	return &ProductCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Product entities.
func (c *ProductClient) CreateBulk(builders ...*ProductCreate) *ProductCreateBulk {
	return &ProductCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ProductClient) MapCreateBulk(slice any, setFunc func(*ProductCreate, int)) *ProductCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ProductCreateBulk{err: fmt.Errorf("calling to ProductClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ProductCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ProductCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Product.
func (c *ProductClient) Update() *ProductUpdate {
	mutation := newProductMutation(c.config, OpUpdate)
	return &ProductUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProductClient) UpdateOne(pr *Product) *ProductUpdateOne {
	mutation := newProductMutation(c.config, OpUpdateOne, withProduct(pr))
	return &ProductUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProductClient) UpdateOneID(id int) *ProductUpdateOne {
	mutation := newProductMutation(c.config, OpUpdateOne, withProductID(id))
	return &ProductUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Product.
func (c *ProductClient) Delete() *ProductDelete {
	mutation := newProductMutation(c.config, OpDelete)
	return &ProductDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ProductClient) DeleteOne(pr *Product) *ProductDeleteOne {
	return c.DeleteOneID(pr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ProductClient) DeleteOneID(id int) *ProductDeleteOne {
	builder := c.Delete().Where(product.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProductDeleteOne{builder}
}

// Query returns a query builder for Product.
func (c *ProductClient) Query() *ProductQuery {
	return &ProductQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeProduct},
		inters: c.Interceptors(),
	}
}

// Get returns a Product entity by its id.
func (c *ProductClient) Get(ctx context.Context, id int) (*Product, error) {
	return c.Query().Where(product.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProductClient) GetX(ctx context.Context, id int) *Product {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryManagers queries the managers edge of a Product.
func (c *ProductClient) QueryManagers(pr *Product) *ProductManagerQuery {
	query := (&ProductManagerClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(product.Table, product.FieldID, id),
			sqlgraph.To(productmanager.Table, productmanager.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, product.ManagersTable, product.ManagersColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryLicenseTypes queries the license_types edge of a Product.
func (c *ProductClient) QueryLicenseTypes(pr *Product) *LicenseTypeQuery {
	query := (&LicenseTypeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(product.Table, product.FieldID, id),
			sqlgraph.To(licensetype.Table, licensetype.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, product.LicenseTypesTable, product.LicenseTypesColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFeatures queries the features edge of a Product.
func (c *ProductClient) QueryFeatures(pr *Product) *ProductFeatureQuery {
	query := (&ProductFeatureClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(product.Table, product.FieldID, id),
			sqlgraph.To(productfeature.Table, productfeature.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, product.FeaturesTable, product.FeaturesColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFirmwareVersions queries the firmware_versions edge of a Product.
func (c *ProductClient) QueryFirmwareVersions(pr *Product) *FirmwareVersionQuery {
	query := (&FirmwareVersionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(product.Table, product.FieldID, id),
			sqlgraph.To(firmwareversion.Table, firmwareversion.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, product.FirmwareVersionsTable, product.FirmwareVersionsColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySoftwareVersions queries the software_versions edge of a Product.
func (c *ProductClient) QuerySoftwareVersions(pr *Product) *SoftwareVersionQuery {
	query := (&SoftwareVersionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(product.Table, product.FieldID, id),
			sqlgraph.To(softwareversion.Table, softwareversion.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, product.SoftwareVersionsTable, product.SoftwareVersionsColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDevices queries the devices edge of a Product.
func (c *ProductClient) QueryDevices(pr *Product) *DeviceQuery {
	query := (&DeviceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(product.Table, product.FieldID, id),
			sqlgraph.To(device.Table, device.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, product.DevicesTable, product.DevicesColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAuditLogs queries the audit_logs edge of a Product.
func (c *ProductClient) QueryAuditLogs(pr *Product) *AuditLogQuery {
	query := (&AuditLogClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(product.Table, product.FieldID, id),
			sqlgraph.To(auditlog.Table, auditlog.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, product.AuditLogsTable, product.AuditLogsColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ProductClient) Hooks() []Hook {
	return c.hooks.Product
}

// Interceptors returns the client interceptors.
func (c *ProductClient) Interceptors() []Interceptor {
	return c.inters.Product
}

func (c *ProductClient) mutate(ctx context.Context, m *ProductMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ProductCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ProductUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ProductUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ProductDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Product mutation op: %q", m.Op())
	}
}

// ProductFeatureClient is a client for the ProductFeature schema.
type ProductFeatureClient struct {
	config
}

// NewProductFeatureClient returns a client for the ProductFeature from the given config.
func NewProductFeatureClient(c config) *ProductFeatureClient {
	return &ProductFeatureClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `productfeature.Hooks(f(g(h())))`.
func (c *ProductFeatureClient) Use(hooks ...Hook) {
	c.hooks.ProductFeature = append(c.hooks.ProductFeature, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `productfeature.Intercept(f(g(h())))`.
func (c *ProductFeatureClient) Intercept(interceptors ...Interceptor) {
	c.inters.ProductFeature = append(c.inters.ProductFeature, interceptors...)
}

// Create returns a builder for creating a ProductFeature entity.
func (c *ProductFeatureClient) Create() *ProductFeatureCreate {
	mutation := newProductFeatureMutation(c.config, OpCreate)
	return &ProductFeatureCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ProductFeature entities.
func (c *ProductFeatureClient) CreateBulk(builders ...*ProductFeatureCreate) *ProductFeatureCreateBulk {
	return &ProductFeatureCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ProductFeatureClient) MapCreateBulk(slice any, setFunc func(*ProductFeatureCreate, int)) *ProductFeatureCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ProductFeatureCreateBulk{err: fmt.Errorf("calling to ProductFeatureClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ProductFeatureCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ProductFeatureCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ProductFeature.
func (c *ProductFeatureClient) Update() *ProductFeatureUpdate {
	mutation := newProductFeatureMutation(c.config, OpUpdate)
	return &ProductFeatureUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProductFeatureClient) UpdateOne(pf *ProductFeature) *ProductFeatureUpdateOne {
	mutation := newProductFeatureMutation(c.config, OpUpdateOne, withProductFeature(pf))
	return &ProductFeatureUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProductFeatureClient) UpdateOneID(id int) *ProductFeatureUpdateOne {
	mutation := newProductFeatureMutation(c.config, OpUpdateOne, withProductFeatureID(id))
	return &ProductFeatureUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ProductFeature.
func (c *ProductFeatureClient) Delete() *ProductFeatureDelete {
	mutation := newProductFeatureMutation(c.config, OpDelete)
	return &ProductFeatureDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ProductFeatureClient) DeleteOne(pf *ProductFeature) *ProductFeatureDeleteOne {
	return c.DeleteOneID(pf.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ProductFeatureClient) DeleteOneID(id int) *ProductFeatureDeleteOne {
	builder := c.Delete().Where(productfeature.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProductFeatureDeleteOne{builder}
}

// Query returns a query builder for ProductFeature.
func (c *ProductFeatureClient) Query() *ProductFeatureQuery {
	return &ProductFeatureQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeProductFeature},
		inters: c.Interceptors(),
	}
}

// Get returns a ProductFeature entity by its id.
func (c *ProductFeatureClient) Get(ctx context.Context, id int) (*ProductFeature, error) {
	return c.Query().Where(productfeature.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProductFeatureClient) GetX(ctx context.Context, id int) *ProductFeature {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryProduct queries the product edge of a ProductFeature.
func (c *ProductFeatureClient) QueryProduct(pf *ProductFeature) *ProductQuery {
	query := (&ProductClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pf.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(productfeature.Table, productfeature.FieldID, id),
			sqlgraph.To(product.Table, product.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, productfeature.ProductTable, productfeature.ProductColumn),
		)
		fromV = sqlgraph.Neighbors(pf.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryLicenseTypes queries the license_types edge of a ProductFeature.
func (c *ProductFeatureClient) QueryLicenseTypes(pf *ProductFeature) *LicenseTypeQuery {
	query := (&LicenseTypeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pf.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(productfeature.Table, productfeature.FieldID, id),
			sqlgraph.To(licensetype.Table, licensetype.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, productfeature.LicenseTypesTable, productfeature.LicenseTypesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(pf.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySoftwareVersions queries the software_versions edge of a ProductFeature.
func (c *ProductFeatureClient) QuerySoftwareVersions(pf *ProductFeature) *SoftwareVersionQuery {
	query := (&SoftwareVersionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pf.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(productfeature.Table, productfeature.FieldID, id),
			sqlgraph.To(softwareversion.Table, softwareversion.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, productfeature.SoftwareVersionsTable, productfeature.SoftwareVersionsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(pf.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryLicenseTypeFeatures queries the license_type_features edge of a ProductFeature.
func (c *ProductFeatureClient) QueryLicenseTypeFeatures(pf *ProductFeature) *LicenseTypeFeaturesQuery {
	query := (&LicenseTypeFeaturesClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pf.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(productfeature.Table, productfeature.FieldID, id),
			sqlgraph.To(licensetypefeatures.Table, licensetypefeatures.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, productfeature.LicenseTypeFeaturesTable, productfeature.LicenseTypeFeaturesColumn),
		)
		fromV = sqlgraph.Neighbors(pf.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ProductFeatureClient) Hooks() []Hook {
	return c.hooks.ProductFeature
}

// Interceptors returns the client interceptors.
func (c *ProductFeatureClient) Interceptors() []Interceptor {
	return c.inters.ProductFeature
}

func (c *ProductFeatureClient) mutate(ctx context.Context, m *ProductFeatureMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ProductFeatureCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ProductFeatureUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ProductFeatureUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ProductFeatureDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ProductFeature mutation op: %q", m.Op())
	}
}

// ProductManagerClient is a client for the ProductManager schema.
type ProductManagerClient struct {
	config
}

// NewProductManagerClient returns a client for the ProductManager from the given config.
func NewProductManagerClient(c config) *ProductManagerClient {
	return &ProductManagerClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `productmanager.Hooks(f(g(h())))`.
func (c *ProductManagerClient) Use(hooks ...Hook) {
	c.hooks.ProductManager = append(c.hooks.ProductManager, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `productmanager.Intercept(f(g(h())))`.
func (c *ProductManagerClient) Intercept(interceptors ...Interceptor) {
	c.inters.ProductManager = append(c.inters.ProductManager, interceptors...)
}

// Create returns a builder for creating a ProductManager entity.
func (c *ProductManagerClient) Create() *ProductManagerCreate {
	mutation := newProductManagerMutation(c.config, OpCreate)
	return &ProductManagerCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ProductManager entities.
func (c *ProductManagerClient) CreateBulk(builders ...*ProductManagerCreate) *ProductManagerCreateBulk {
	return &ProductManagerCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ProductManagerClient) MapCreateBulk(slice any, setFunc func(*ProductManagerCreate, int)) *ProductManagerCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ProductManagerCreateBulk{err: fmt.Errorf("calling to ProductManagerClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ProductManagerCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ProductManagerCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ProductManager.
func (c *ProductManagerClient) Update() *ProductManagerUpdate {
	mutation := newProductManagerMutation(c.config, OpUpdate)
	return &ProductManagerUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProductManagerClient) UpdateOne(pm *ProductManager) *ProductManagerUpdateOne {
	mutation := newProductManagerMutation(c.config, OpUpdateOne, withProductManager(pm))
	return &ProductManagerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProductManagerClient) UpdateOneID(id int) *ProductManagerUpdateOne {
	mutation := newProductManagerMutation(c.config, OpUpdateOne, withProductManagerID(id))
	return &ProductManagerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ProductManager.
func (c *ProductManagerClient) Delete() *ProductManagerDelete {
	mutation := newProductManagerMutation(c.config, OpDelete)
	return &ProductManagerDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ProductManagerClient) DeleteOne(pm *ProductManager) *ProductManagerDeleteOne {
	return c.DeleteOneID(pm.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ProductManagerClient) DeleteOneID(id int) *ProductManagerDeleteOne {
	builder := c.Delete().Where(productmanager.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProductManagerDeleteOne{builder}
}

// Query returns a query builder for ProductManager.
func (c *ProductManagerClient) Query() *ProductManagerQuery {
	return &ProductManagerQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeProductManager},
		inters: c.Interceptors(),
	}
}

// Get returns a ProductManager entity by its id.
func (c *ProductManagerClient) Get(ctx context.Context, id int) (*ProductManager, error) {
	return c.Query().Where(productmanager.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProductManagerClient) GetX(ctx context.Context, id int) *ProductManager {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a ProductManager.
func (c *ProductManagerClient) QueryUser(pm *ProductManager) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pm.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(productmanager.Table, productmanager.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, productmanager.UserTable, productmanager.UserColumn),
		)
		fromV = sqlgraph.Neighbors(pm.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProduct queries the product edge of a ProductManager.
func (c *ProductManagerClient) QueryProduct(pm *ProductManager) *ProductQuery {
	query := (&ProductClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pm.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(productmanager.Table, productmanager.FieldID, id),
			sqlgraph.To(product.Table, product.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, productmanager.ProductTable, productmanager.ProductColumn),
		)
		fromV = sqlgraph.Neighbors(pm.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ProductManagerClient) Hooks() []Hook {
	return c.hooks.ProductManager
}

// Interceptors returns the client interceptors.
func (c *ProductManagerClient) Interceptors() []Interceptor {
	return c.inters.ProductManager
}

func (c *ProductManagerClient) mutate(ctx context.Context, m *ProductManagerMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ProductManagerCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ProductManagerUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ProductManagerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ProductManagerDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ProductManager mutation op: %q", m.Op())
	}
}

// SoftwareVersionClient is a client for the SoftwareVersion schema.
type SoftwareVersionClient struct {
	config
}

// NewSoftwareVersionClient returns a client for the SoftwareVersion from the given config.
func NewSoftwareVersionClient(c config) *SoftwareVersionClient {
	return &SoftwareVersionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `softwareversion.Hooks(f(g(h())))`.
func (c *SoftwareVersionClient) Use(hooks ...Hook) {
	c.hooks.SoftwareVersion = append(c.hooks.SoftwareVersion, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `softwareversion.Intercept(f(g(h())))`.
func (c *SoftwareVersionClient) Intercept(interceptors ...Interceptor) {
	c.inters.SoftwareVersion = append(c.inters.SoftwareVersion, interceptors...)
}

// Create returns a builder for creating a SoftwareVersion entity.
func (c *SoftwareVersionClient) Create() *SoftwareVersionCreate {
	mutation := newSoftwareVersionMutation(c.config, OpCreate)
	return &SoftwareVersionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SoftwareVersion entities.
func (c *SoftwareVersionClient) CreateBulk(builders ...*SoftwareVersionCreate) *SoftwareVersionCreateBulk {
	return &SoftwareVersionCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *SoftwareVersionClient) MapCreateBulk(slice any, setFunc func(*SoftwareVersionCreate, int)) *SoftwareVersionCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &SoftwareVersionCreateBulk{err: fmt.Errorf("calling to SoftwareVersionClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*SoftwareVersionCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &SoftwareVersionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SoftwareVersion.
func (c *SoftwareVersionClient) Update() *SoftwareVersionUpdate {
	mutation := newSoftwareVersionMutation(c.config, OpUpdate)
	return &SoftwareVersionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SoftwareVersionClient) UpdateOne(sv *SoftwareVersion) *SoftwareVersionUpdateOne {
	mutation := newSoftwareVersionMutation(c.config, OpUpdateOne, withSoftwareVersion(sv))
	return &SoftwareVersionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SoftwareVersionClient) UpdateOneID(id int) *SoftwareVersionUpdateOne {
	mutation := newSoftwareVersionMutation(c.config, OpUpdateOne, withSoftwareVersionID(id))
	return &SoftwareVersionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SoftwareVersion.
func (c *SoftwareVersionClient) Delete() *SoftwareVersionDelete {
	mutation := newSoftwareVersionMutation(c.config, OpDelete)
	return &SoftwareVersionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SoftwareVersionClient) DeleteOne(sv *SoftwareVersion) *SoftwareVersionDeleteOne {
	return c.DeleteOneID(sv.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SoftwareVersionClient) DeleteOneID(id int) *SoftwareVersionDeleteOne {
	builder := c.Delete().Where(softwareversion.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SoftwareVersionDeleteOne{builder}
}

// Query returns a query builder for SoftwareVersion.
func (c *SoftwareVersionClient) Query() *SoftwareVersionQuery {
	return &SoftwareVersionQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSoftwareVersion},
		inters: c.Interceptors(),
	}
}

// Get returns a SoftwareVersion entity by its id.
func (c *SoftwareVersionClient) Get(ctx context.Context, id int) (*SoftwareVersion, error) {
	return c.Query().Where(softwareversion.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SoftwareVersionClient) GetX(ctx context.Context, id int) *SoftwareVersion {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryFeatures queries the features edge of a SoftwareVersion.
func (c *SoftwareVersionClient) QueryFeatures(sv *SoftwareVersion) *ProductFeatureQuery {
	query := (&ProductFeatureClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sv.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(softwareversion.Table, softwareversion.FieldID, id),
			sqlgraph.To(productfeature.Table, productfeature.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, softwareversion.FeaturesTable, softwareversion.FeaturesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(sv.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFirmwareVersions queries the firmware_versions edge of a SoftwareVersion.
func (c *SoftwareVersionClient) QueryFirmwareVersions(sv *SoftwareVersion) *FirmwareVersionQuery {
	query := (&FirmwareVersionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sv.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(softwareversion.Table, softwareversion.FieldID, id),
			sqlgraph.To(firmwareversion.Table, firmwareversion.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, softwareversion.FirmwareVersionsTable, softwareversion.FirmwareVersionsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(sv.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProduct queries the product edge of a SoftwareVersion.
func (c *SoftwareVersionClient) QueryProduct(sv *SoftwareVersion) *ProductQuery {
	query := (&ProductClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sv.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(softwareversion.Table, softwareversion.FieldID, id),
			sqlgraph.To(product.Table, product.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, softwareversion.ProductTable, softwareversion.ProductColumn),
		)
		fromV = sqlgraph.Neighbors(sv.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCreator queries the creator edge of a SoftwareVersion.
func (c *SoftwareVersionClient) QueryCreator(sv *SoftwareVersion) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sv.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(softwareversion.Table, softwareversion.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, softwareversion.CreatorTable, softwareversion.CreatorColumn),
		)
		fromV = sqlgraph.Neighbors(sv.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SoftwareVersionClient) Hooks() []Hook {
	return c.hooks.SoftwareVersion
}

// Interceptors returns the client interceptors.
func (c *SoftwareVersionClient) Interceptors() []Interceptor {
	return c.inters.SoftwareVersion
}

func (c *SoftwareVersionClient) mutate(ctx context.Context, m *SoftwareVersionMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SoftwareVersionCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SoftwareVersionUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SoftwareVersionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SoftwareVersionDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown SoftwareVersion mutation op: %q", m.Op())
	}
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `user.Intercept(f(g(h())))`.
func (c *UserClient) Intercept(interceptors ...Interceptor) {
	c.inters.User = append(c.inters.User, interceptors...)
}

// Create returns a builder for creating a User entity.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UserClient) MapCreateBulk(slice any, setFunc func(*UserCreate, int)) *UserCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UserCreateBulk{err: fmt.Errorf("calling to UserClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UserCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id int) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserClient) DeleteOneID(id int) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUser},
		inters: c.Interceptors(),
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id int) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id int) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryProducts queries the products edge of a User.
func (c *UserClient) QueryProducts(u *User) *ProductManagerQuery {
	query := (&ProductManagerClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(productmanager.Table, productmanager.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.ProductsTable, user.ProductsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAuditLogs queries the audit_logs edge of a User.
func (c *UserClient) QueryAuditLogs(u *User) *AuditLogQuery {
	query := (&AuditLogClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(auditlog.Table, auditlog.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.AuditLogsTable, user.AuditLogsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCreatedDevices queries the created_devices edge of a User.
func (c *UserClient) QueryCreatedDevices(u *User) *DeviceQuery {
	query := (&DeviceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(device.Table, device.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, user.CreatedDevicesTable, user.CreatedDevicesColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUpdatedDevices queries the updated_devices edge of a User.
func (c *UserClient) QueryUpdatedDevices(u *User) *DeviceQuery {
	query := (&DeviceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(device.Table, device.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, user.UpdatedDevicesTable, user.UpdatedDevicesColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}

// Interceptors returns the client interceptors.
func (c *UserClient) Interceptors() []Interceptor {
	return c.inters.User
}

func (c *UserClient) mutate(ctx context.Context, m *UserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown User mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		AuditLog, Device, FirmwareVersion, LicenseType, LicenseTypeFeatures, Product,
		ProductFeature, ProductManager, SoftwareVersion, User []ent.Hook
	}
	inters struct {
		AuditLog, Device, FirmwareVersion, LicenseType, LicenseTypeFeatures, Product,
		ProductFeature, ProductManager, SoftwareVersion, User []ent.Interceptor
	}
)
