// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"cambridge-hit.com/gin-base/activateserver/app/entity/ent/firmwareversion"
	"cambridge-hit.com/gin-base/activateserver/app/entity/ent/product"
	"cambridge-hit.com/gin-base/activateserver/app/entity/ent/softwareversion"
	"cambridge-hit.com/gin-base/activateserver/app/entity/ent/user"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// FirmwareVersionCreate is the builder for creating a FirmwareVersion entity.
type FirmwareVersionCreate struct {
	config
	mutation *FirmwareVersionMutation
	hooks    []Hook
}

// SetProductID sets the "product_id" field.
func (fvc *FirmwareVersionCreate) SetProductID(i int) *FirmwareVersionCreate {
	fvc.mutation.SetProductID(i)
	return fvc
}

// SetVersion sets the "version" field.
func (fvc *FirmwareVersionCreate) SetVersion(s string) *FirmwareVersionCreate {
	fvc.mutation.SetVersion(s)
	return fvc
}

// SetReleaseDate sets the "release_date" field.
func (fvc *FirmwareVersionCreate) SetReleaseDate(t time.Time) *FirmwareVersionCreate {
	fvc.mutation.SetReleaseDate(t)
	return fvc
}

// SetNillableReleaseDate sets the "release_date" field if the given value is not nil.
func (fvc *FirmwareVersionCreate) SetNillableReleaseDate(t *time.Time) *FirmwareVersionCreate {
	if t != nil {
		fvc.SetReleaseDate(*t)
	}
	return fvc
}

// SetRemark sets the "remark" field.
func (fvc *FirmwareVersionCreate) SetRemark(s string) *FirmwareVersionCreate {
	fvc.mutation.SetRemark(s)
	return fvc
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (fvc *FirmwareVersionCreate) SetNillableRemark(s *string) *FirmwareVersionCreate {
	if s != nil {
		fvc.SetRemark(*s)
	}
	return fvc
}

// SetCreatedBy sets the "created_by" field.
func (fvc *FirmwareVersionCreate) SetCreatedBy(i int) *FirmwareVersionCreate {
	fvc.mutation.SetCreatedBy(i)
	return fvc
}

// SetCreatedAt sets the "created_at" field.
func (fvc *FirmwareVersionCreate) SetCreatedAt(t time.Time) *FirmwareVersionCreate {
	fvc.mutation.SetCreatedAt(t)
	return fvc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (fvc *FirmwareVersionCreate) SetNillableCreatedAt(t *time.Time) *FirmwareVersionCreate {
	if t != nil {
		fvc.SetCreatedAt(*t)
	}
	return fvc
}

// SetUpdatedAt sets the "updated_at" field.
func (fvc *FirmwareVersionCreate) SetUpdatedAt(t time.Time) *FirmwareVersionCreate {
	fvc.mutation.SetUpdatedAt(t)
	return fvc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (fvc *FirmwareVersionCreate) SetNillableUpdatedAt(t *time.Time) *FirmwareVersionCreate {
	if t != nil {
		fvc.SetUpdatedAt(*t)
	}
	return fvc
}

// AddSoftwareVersionIDs adds the "software_versions" edge to the SoftwareVersion entity by IDs.
func (fvc *FirmwareVersionCreate) AddSoftwareVersionIDs(ids ...int) *FirmwareVersionCreate {
	fvc.mutation.AddSoftwareVersionIDs(ids...)
	return fvc
}

// AddSoftwareVersions adds the "software_versions" edges to the SoftwareVersion entity.
func (fvc *FirmwareVersionCreate) AddSoftwareVersions(s ...*SoftwareVersion) *FirmwareVersionCreate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return fvc.AddSoftwareVersionIDs(ids...)
}

// SetProduct sets the "product" edge to the Product entity.
func (fvc *FirmwareVersionCreate) SetProduct(p *Product) *FirmwareVersionCreate {
	return fvc.SetProductID(p.ID)
}

// SetCreatorID sets the "creator" edge to the User entity by ID.
func (fvc *FirmwareVersionCreate) SetCreatorID(id int) *FirmwareVersionCreate {
	fvc.mutation.SetCreatorID(id)
	return fvc
}

// SetCreator sets the "creator" edge to the User entity.
func (fvc *FirmwareVersionCreate) SetCreator(u *User) *FirmwareVersionCreate {
	return fvc.SetCreatorID(u.ID)
}

// Mutation returns the FirmwareVersionMutation object of the builder.
func (fvc *FirmwareVersionCreate) Mutation() *FirmwareVersionMutation {
	return fvc.mutation
}

// Save creates the FirmwareVersion in the database.
func (fvc *FirmwareVersionCreate) Save(ctx context.Context) (*FirmwareVersion, error) {
	fvc.defaults()
	return withHooks(ctx, fvc.sqlSave, fvc.mutation, fvc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (fvc *FirmwareVersionCreate) SaveX(ctx context.Context) *FirmwareVersion {
	v, err := fvc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fvc *FirmwareVersionCreate) Exec(ctx context.Context) error {
	_, err := fvc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fvc *FirmwareVersionCreate) ExecX(ctx context.Context) {
	if err := fvc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fvc *FirmwareVersionCreate) defaults() {
	if _, ok := fvc.mutation.ReleaseDate(); !ok {
		v := firmwareversion.DefaultReleaseDate()
		fvc.mutation.SetReleaseDate(v)
	}
	if _, ok := fvc.mutation.CreatedAt(); !ok {
		v := firmwareversion.DefaultCreatedAt()
		fvc.mutation.SetCreatedAt(v)
	}
	if _, ok := fvc.mutation.UpdatedAt(); !ok {
		v := firmwareversion.DefaultUpdatedAt()
		fvc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fvc *FirmwareVersionCreate) check() error {
	if _, ok := fvc.mutation.ProductID(); !ok {
		return &ValidationError{Name: "product_id", err: errors.New(`ent: missing required field "FirmwareVersion.product_id"`)}
	}
	if _, ok := fvc.mutation.Version(); !ok {
		return &ValidationError{Name: "version", err: errors.New(`ent: missing required field "FirmwareVersion.version"`)}
	}
	if v, ok := fvc.mutation.Version(); ok {
		if err := firmwareversion.VersionValidator(v); err != nil {
			return &ValidationError{Name: "version", err: fmt.Errorf(`ent: validator failed for field "FirmwareVersion.version": %w`, err)}
		}
	}
	if _, ok := fvc.mutation.ReleaseDate(); !ok {
		return &ValidationError{Name: "release_date", err: errors.New(`ent: missing required field "FirmwareVersion.release_date"`)}
	}
	if _, ok := fvc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`ent: missing required field "FirmwareVersion.created_by"`)}
	}
	if _, ok := fvc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "FirmwareVersion.created_at"`)}
	}
	if _, ok := fvc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "FirmwareVersion.updated_at"`)}
	}
	if _, ok := fvc.mutation.ProductID(); !ok {
		return &ValidationError{Name: "product", err: errors.New(`ent: missing required edge "FirmwareVersion.product"`)}
	}
	if _, ok := fvc.mutation.CreatorID(); !ok {
		return &ValidationError{Name: "creator", err: errors.New(`ent: missing required edge "FirmwareVersion.creator"`)}
	}
	return nil
}

func (fvc *FirmwareVersionCreate) sqlSave(ctx context.Context) (*FirmwareVersion, error) {
	if err := fvc.check(); err != nil {
		return nil, err
	}
	_node, _spec := fvc.createSpec()
	if err := sqlgraph.CreateNode(ctx, fvc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	fvc.mutation.id = &_node.ID
	fvc.mutation.done = true
	return _node, nil
}

func (fvc *FirmwareVersionCreate) createSpec() (*FirmwareVersion, *sqlgraph.CreateSpec) {
	var (
		_node = &FirmwareVersion{config: fvc.config}
		_spec = sqlgraph.NewCreateSpec(firmwareversion.Table, sqlgraph.NewFieldSpec(firmwareversion.FieldID, field.TypeInt))
	)
	if value, ok := fvc.mutation.Version(); ok {
		_spec.SetField(firmwareversion.FieldVersion, field.TypeString, value)
		_node.Version = value
	}
	if value, ok := fvc.mutation.ReleaseDate(); ok {
		_spec.SetField(firmwareversion.FieldReleaseDate, field.TypeTime, value)
		_node.ReleaseDate = value
	}
	if value, ok := fvc.mutation.Remark(); ok {
		_spec.SetField(firmwareversion.FieldRemark, field.TypeString, value)
		_node.Remark = value
	}
	if value, ok := fvc.mutation.CreatedAt(); ok {
		_spec.SetField(firmwareversion.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := fvc.mutation.UpdatedAt(); ok {
		_spec.SetField(firmwareversion.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := fvc.mutation.SoftwareVersionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   firmwareversion.SoftwareVersionsTable,
			Columns: firmwareversion.SoftwareVersionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(softwareversion.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := fvc.mutation.ProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   firmwareversion.ProductTable,
			Columns: []string{firmwareversion.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ProductID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := fvc.mutation.CreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   firmwareversion.CreatorTable,
			Columns: []string{firmwareversion.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CreatedBy = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// FirmwareVersionCreateBulk is the builder for creating many FirmwareVersion entities in bulk.
type FirmwareVersionCreateBulk struct {
	config
	err      error
	builders []*FirmwareVersionCreate
}

// Save creates the FirmwareVersion entities in the database.
func (fvcb *FirmwareVersionCreateBulk) Save(ctx context.Context) ([]*FirmwareVersion, error) {
	if fvcb.err != nil {
		return nil, fvcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(fvcb.builders))
	nodes := make([]*FirmwareVersion, len(fvcb.builders))
	mutators := make([]Mutator, len(fvcb.builders))
	for i := range fvcb.builders {
		func(i int, root context.Context) {
			builder := fvcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FirmwareVersionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, fvcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, fvcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, fvcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (fvcb *FirmwareVersionCreateBulk) SaveX(ctx context.Context) []*FirmwareVersion {
	v, err := fvcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fvcb *FirmwareVersionCreateBulk) Exec(ctx context.Context) error {
	_, err := fvcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fvcb *FirmwareVersionCreateBulk) ExecX(ctx context.Context) {
	if err := fvcb.Exec(ctx); err != nil {
		panic(err)
	}
}
