// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"cambridge-hit.com/gin-base/activateserver/app/entity/ent/licensetype"
	"cambridge-hit.com/gin-base/activateserver/app/entity/ent/licensetypefeatures"
	"cambridge-hit.com/gin-base/activateserver/app/entity/ent/predicate"
	"cambridge-hit.com/gin-base/activateserver/app/entity/ent/product"
	"cambridge-hit.com/gin-base/activateserver/app/entity/ent/productfeature"
	"cambridge-hit.com/gin-base/activateserver/app/entity/ent/softwareversion"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ProductFeatureQuery is the builder for querying ProductFeature entities.
type ProductFeatureQuery struct {
	config
	ctx                     *QueryContext
	order                   []productfeature.OrderOption
	inters                  []Interceptor
	predicates              []predicate.ProductFeature
	withProduct             *ProductQuery
	withLicenseTypes        *LicenseTypeQuery
	withSoftwareVersions    *SoftwareVersionQuery
	withLicenseTypeFeatures *LicenseTypeFeaturesQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ProductFeatureQuery builder.
func (pfq *ProductFeatureQuery) Where(ps ...predicate.ProductFeature) *ProductFeatureQuery {
	pfq.predicates = append(pfq.predicates, ps...)
	return pfq
}

// Limit the number of records to be returned by this query.
func (pfq *ProductFeatureQuery) Limit(limit int) *ProductFeatureQuery {
	pfq.ctx.Limit = &limit
	return pfq
}

// Offset to start from.
func (pfq *ProductFeatureQuery) Offset(offset int) *ProductFeatureQuery {
	pfq.ctx.Offset = &offset
	return pfq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (pfq *ProductFeatureQuery) Unique(unique bool) *ProductFeatureQuery {
	pfq.ctx.Unique = &unique
	return pfq
}

// Order specifies how the records should be ordered.
func (pfq *ProductFeatureQuery) Order(o ...productfeature.OrderOption) *ProductFeatureQuery {
	pfq.order = append(pfq.order, o...)
	return pfq
}

// QueryProduct chains the current query on the "product" edge.
func (pfq *ProductFeatureQuery) QueryProduct() *ProductQuery {
	query := (&ProductClient{config: pfq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pfq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pfq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(productfeature.Table, productfeature.FieldID, selector),
			sqlgraph.To(product.Table, product.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, productfeature.ProductTable, productfeature.ProductColumn),
		)
		fromU = sqlgraph.SetNeighbors(pfq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryLicenseTypes chains the current query on the "license_types" edge.
func (pfq *ProductFeatureQuery) QueryLicenseTypes() *LicenseTypeQuery {
	query := (&LicenseTypeClient{config: pfq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pfq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pfq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(productfeature.Table, productfeature.FieldID, selector),
			sqlgraph.To(licensetype.Table, licensetype.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, productfeature.LicenseTypesTable, productfeature.LicenseTypesPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(pfq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySoftwareVersions chains the current query on the "software_versions" edge.
func (pfq *ProductFeatureQuery) QuerySoftwareVersions() *SoftwareVersionQuery {
	query := (&SoftwareVersionClient{config: pfq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pfq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pfq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(productfeature.Table, productfeature.FieldID, selector),
			sqlgraph.To(softwareversion.Table, softwareversion.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, productfeature.SoftwareVersionsTable, productfeature.SoftwareVersionsPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(pfq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryLicenseTypeFeatures chains the current query on the "license_type_features" edge.
func (pfq *ProductFeatureQuery) QueryLicenseTypeFeatures() *LicenseTypeFeaturesQuery {
	query := (&LicenseTypeFeaturesClient{config: pfq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pfq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pfq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(productfeature.Table, productfeature.FieldID, selector),
			sqlgraph.To(licensetypefeatures.Table, licensetypefeatures.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, productfeature.LicenseTypeFeaturesTable, productfeature.LicenseTypeFeaturesColumn),
		)
		fromU = sqlgraph.SetNeighbors(pfq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first ProductFeature entity from the query.
// Returns a *NotFoundError when no ProductFeature was found.
func (pfq *ProductFeatureQuery) First(ctx context.Context) (*ProductFeature, error) {
	nodes, err := pfq.Limit(1).All(setContextOp(ctx, pfq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{productfeature.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (pfq *ProductFeatureQuery) FirstX(ctx context.Context) *ProductFeature {
	node, err := pfq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first ProductFeature ID from the query.
// Returns a *NotFoundError when no ProductFeature ID was found.
func (pfq *ProductFeatureQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = pfq.Limit(1).IDs(setContextOp(ctx, pfq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{productfeature.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (pfq *ProductFeatureQuery) FirstIDX(ctx context.Context) int {
	id, err := pfq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single ProductFeature entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one ProductFeature entity is found.
// Returns a *NotFoundError when no ProductFeature entities are found.
func (pfq *ProductFeatureQuery) Only(ctx context.Context) (*ProductFeature, error) {
	nodes, err := pfq.Limit(2).All(setContextOp(ctx, pfq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{productfeature.Label}
	default:
		return nil, &NotSingularError{productfeature.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (pfq *ProductFeatureQuery) OnlyX(ctx context.Context) *ProductFeature {
	node, err := pfq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only ProductFeature ID in the query.
// Returns a *NotSingularError when more than one ProductFeature ID is found.
// Returns a *NotFoundError when no entities are found.
func (pfq *ProductFeatureQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = pfq.Limit(2).IDs(setContextOp(ctx, pfq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{productfeature.Label}
	default:
		err = &NotSingularError{productfeature.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (pfq *ProductFeatureQuery) OnlyIDX(ctx context.Context) int {
	id, err := pfq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of ProductFeatures.
func (pfq *ProductFeatureQuery) All(ctx context.Context) ([]*ProductFeature, error) {
	ctx = setContextOp(ctx, pfq.ctx, "All")
	if err := pfq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*ProductFeature, *ProductFeatureQuery]()
	return withInterceptors[[]*ProductFeature](ctx, pfq, qr, pfq.inters)
}

// AllX is like All, but panics if an error occurs.
func (pfq *ProductFeatureQuery) AllX(ctx context.Context) []*ProductFeature {
	nodes, err := pfq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of ProductFeature IDs.
func (pfq *ProductFeatureQuery) IDs(ctx context.Context) (ids []int, err error) {
	if pfq.ctx.Unique == nil && pfq.path != nil {
		pfq.Unique(true)
	}
	ctx = setContextOp(ctx, pfq.ctx, "IDs")
	if err = pfq.Select(productfeature.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (pfq *ProductFeatureQuery) IDsX(ctx context.Context) []int {
	ids, err := pfq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (pfq *ProductFeatureQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, pfq.ctx, "Count")
	if err := pfq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, pfq, querierCount[*ProductFeatureQuery](), pfq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (pfq *ProductFeatureQuery) CountX(ctx context.Context) int {
	count, err := pfq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (pfq *ProductFeatureQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, pfq.ctx, "Exist")
	switch _, err := pfq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (pfq *ProductFeatureQuery) ExistX(ctx context.Context) bool {
	exist, err := pfq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ProductFeatureQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (pfq *ProductFeatureQuery) Clone() *ProductFeatureQuery {
	if pfq == nil {
		return nil
	}
	return &ProductFeatureQuery{
		config:                  pfq.config,
		ctx:                     pfq.ctx.Clone(),
		order:                   append([]productfeature.OrderOption{}, pfq.order...),
		inters:                  append([]Interceptor{}, pfq.inters...),
		predicates:              append([]predicate.ProductFeature{}, pfq.predicates...),
		withProduct:             pfq.withProduct.Clone(),
		withLicenseTypes:        pfq.withLicenseTypes.Clone(),
		withSoftwareVersions:    pfq.withSoftwareVersions.Clone(),
		withLicenseTypeFeatures: pfq.withLicenseTypeFeatures.Clone(),
		// clone intermediate query.
		sql:  pfq.sql.Clone(),
		path: pfq.path,
	}
}

// WithProduct tells the query-builder to eager-load the nodes that are connected to
// the "product" edge. The optional arguments are used to configure the query builder of the edge.
func (pfq *ProductFeatureQuery) WithProduct(opts ...func(*ProductQuery)) *ProductFeatureQuery {
	query := (&ProductClient{config: pfq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pfq.withProduct = query
	return pfq
}

// WithLicenseTypes tells the query-builder to eager-load the nodes that are connected to
// the "license_types" edge. The optional arguments are used to configure the query builder of the edge.
func (pfq *ProductFeatureQuery) WithLicenseTypes(opts ...func(*LicenseTypeQuery)) *ProductFeatureQuery {
	query := (&LicenseTypeClient{config: pfq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pfq.withLicenseTypes = query
	return pfq
}

// WithSoftwareVersions tells the query-builder to eager-load the nodes that are connected to
// the "software_versions" edge. The optional arguments are used to configure the query builder of the edge.
func (pfq *ProductFeatureQuery) WithSoftwareVersions(opts ...func(*SoftwareVersionQuery)) *ProductFeatureQuery {
	query := (&SoftwareVersionClient{config: pfq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pfq.withSoftwareVersions = query
	return pfq
}

// WithLicenseTypeFeatures tells the query-builder to eager-load the nodes that are connected to
// the "license_type_features" edge. The optional arguments are used to configure the query builder of the edge.
func (pfq *ProductFeatureQuery) WithLicenseTypeFeatures(opts ...func(*LicenseTypeFeaturesQuery)) *ProductFeatureQuery {
	query := (&LicenseTypeFeaturesClient{config: pfq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pfq.withLicenseTypeFeatures = query
	return pfq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		FeatureName string `json:"feature_name,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.ProductFeature.Query().
//		GroupBy(productfeature.FieldFeatureName).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (pfq *ProductFeatureQuery) GroupBy(field string, fields ...string) *ProductFeatureGroupBy {
	pfq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &ProductFeatureGroupBy{build: pfq}
	grbuild.flds = &pfq.ctx.Fields
	grbuild.label = productfeature.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		FeatureName string `json:"feature_name,omitempty"`
//	}
//
//	client.ProductFeature.Query().
//		Select(productfeature.FieldFeatureName).
//		Scan(ctx, &v)
func (pfq *ProductFeatureQuery) Select(fields ...string) *ProductFeatureSelect {
	pfq.ctx.Fields = append(pfq.ctx.Fields, fields...)
	sbuild := &ProductFeatureSelect{ProductFeatureQuery: pfq}
	sbuild.label = productfeature.Label
	sbuild.flds, sbuild.scan = &pfq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a ProductFeatureSelect configured with the given aggregations.
func (pfq *ProductFeatureQuery) Aggregate(fns ...AggregateFunc) *ProductFeatureSelect {
	return pfq.Select().Aggregate(fns...)
}

func (pfq *ProductFeatureQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range pfq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, pfq); err != nil {
				return err
			}
		}
	}
	for _, f := range pfq.ctx.Fields {
		if !productfeature.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if pfq.path != nil {
		prev, err := pfq.path(ctx)
		if err != nil {
			return err
		}
		pfq.sql = prev
	}
	return nil
}

func (pfq *ProductFeatureQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*ProductFeature, error) {
	var (
		nodes       = []*ProductFeature{}
		_spec       = pfq.querySpec()
		loadedTypes = [4]bool{
			pfq.withProduct != nil,
			pfq.withLicenseTypes != nil,
			pfq.withSoftwareVersions != nil,
			pfq.withLicenseTypeFeatures != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*ProductFeature).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &ProductFeature{config: pfq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, pfq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := pfq.withProduct; query != nil {
		if err := pfq.loadProduct(ctx, query, nodes, nil,
			func(n *ProductFeature, e *Product) { n.Edges.Product = e }); err != nil {
			return nil, err
		}
	}
	if query := pfq.withLicenseTypes; query != nil {
		if err := pfq.loadLicenseTypes(ctx, query, nodes,
			func(n *ProductFeature) { n.Edges.LicenseTypes = []*LicenseType{} },
			func(n *ProductFeature, e *LicenseType) { n.Edges.LicenseTypes = append(n.Edges.LicenseTypes, e) }); err != nil {
			return nil, err
		}
	}
	if query := pfq.withSoftwareVersions; query != nil {
		if err := pfq.loadSoftwareVersions(ctx, query, nodes,
			func(n *ProductFeature) { n.Edges.SoftwareVersions = []*SoftwareVersion{} },
			func(n *ProductFeature, e *SoftwareVersion) {
				n.Edges.SoftwareVersions = append(n.Edges.SoftwareVersions, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := pfq.withLicenseTypeFeatures; query != nil {
		if err := pfq.loadLicenseTypeFeatures(ctx, query, nodes,
			func(n *ProductFeature) { n.Edges.LicenseTypeFeatures = []*LicenseTypeFeatures{} },
			func(n *ProductFeature, e *LicenseTypeFeatures) {
				n.Edges.LicenseTypeFeatures = append(n.Edges.LicenseTypeFeatures, e)
			}); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (pfq *ProductFeatureQuery) loadProduct(ctx context.Context, query *ProductQuery, nodes []*ProductFeature, init func(*ProductFeature), assign func(*ProductFeature, *Product)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*ProductFeature)
	for i := range nodes {
		fk := nodes[i].ProductID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(product.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "product_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (pfq *ProductFeatureQuery) loadLicenseTypes(ctx context.Context, query *LicenseTypeQuery, nodes []*ProductFeature, init func(*ProductFeature), assign func(*ProductFeature, *LicenseType)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[int]*ProductFeature)
	nids := make(map[int]map[*ProductFeature]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(productfeature.LicenseTypesTable)
		s.Join(joinT).On(s.C(licensetype.FieldID), joinT.C(productfeature.LicenseTypesPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(productfeature.LicenseTypesPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(productfeature.LicenseTypesPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullInt64)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := int(values[0].(*sql.NullInt64).Int64)
				inValue := int(values[1].(*sql.NullInt64).Int64)
				if nids[inValue] == nil {
					nids[inValue] = map[*ProductFeature]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*LicenseType](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "license_types" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (pfq *ProductFeatureQuery) loadSoftwareVersions(ctx context.Context, query *SoftwareVersionQuery, nodes []*ProductFeature, init func(*ProductFeature), assign func(*ProductFeature, *SoftwareVersion)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[int]*ProductFeature)
	nids := make(map[int]map[*ProductFeature]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(productfeature.SoftwareVersionsTable)
		s.Join(joinT).On(s.C(softwareversion.FieldID), joinT.C(productfeature.SoftwareVersionsPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(productfeature.SoftwareVersionsPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(productfeature.SoftwareVersionsPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullInt64)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := int(values[0].(*sql.NullInt64).Int64)
				inValue := int(values[1].(*sql.NullInt64).Int64)
				if nids[inValue] == nil {
					nids[inValue] = map[*ProductFeature]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*SoftwareVersion](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "software_versions" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (pfq *ProductFeatureQuery) loadLicenseTypeFeatures(ctx context.Context, query *LicenseTypeFeaturesQuery, nodes []*ProductFeature, init func(*ProductFeature), assign func(*ProductFeature, *LicenseTypeFeatures)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*ProductFeature)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(licensetypefeatures.FieldFeatureID)
	}
	query.Where(predicate.LicenseTypeFeatures(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(productfeature.LicenseTypeFeaturesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.FeatureID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "feature_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (pfq *ProductFeatureQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := pfq.querySpec()
	_spec.Node.Columns = pfq.ctx.Fields
	if len(pfq.ctx.Fields) > 0 {
		_spec.Unique = pfq.ctx.Unique != nil && *pfq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, pfq.driver, _spec)
}

func (pfq *ProductFeatureQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(productfeature.Table, productfeature.Columns, sqlgraph.NewFieldSpec(productfeature.FieldID, field.TypeInt))
	_spec.From = pfq.sql
	if unique := pfq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if pfq.path != nil {
		_spec.Unique = true
	}
	if fields := pfq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, productfeature.FieldID)
		for i := range fields {
			if fields[i] != productfeature.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if pfq.withProduct != nil {
			_spec.Node.AddColumnOnce(productfeature.FieldProductID)
		}
	}
	if ps := pfq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := pfq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := pfq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := pfq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (pfq *ProductFeatureQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(pfq.driver.Dialect())
	t1 := builder.Table(productfeature.Table)
	columns := pfq.ctx.Fields
	if len(columns) == 0 {
		columns = productfeature.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if pfq.sql != nil {
		selector = pfq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if pfq.ctx.Unique != nil && *pfq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range pfq.predicates {
		p(selector)
	}
	for _, p := range pfq.order {
		p(selector)
	}
	if offset := pfq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := pfq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ProductFeatureGroupBy is the group-by builder for ProductFeature entities.
type ProductFeatureGroupBy struct {
	selector
	build *ProductFeatureQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (pfgb *ProductFeatureGroupBy) Aggregate(fns ...AggregateFunc) *ProductFeatureGroupBy {
	pfgb.fns = append(pfgb.fns, fns...)
	return pfgb
}

// Scan applies the selector query and scans the result into the given value.
func (pfgb *ProductFeatureGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, pfgb.build.ctx, "GroupBy")
	if err := pfgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ProductFeatureQuery, *ProductFeatureGroupBy](ctx, pfgb.build, pfgb, pfgb.build.inters, v)
}

func (pfgb *ProductFeatureGroupBy) sqlScan(ctx context.Context, root *ProductFeatureQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(pfgb.fns))
	for _, fn := range pfgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*pfgb.flds)+len(pfgb.fns))
		for _, f := range *pfgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*pfgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := pfgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// ProductFeatureSelect is the builder for selecting fields of ProductFeature entities.
type ProductFeatureSelect struct {
	*ProductFeatureQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (pfs *ProductFeatureSelect) Aggregate(fns ...AggregateFunc) *ProductFeatureSelect {
	pfs.fns = append(pfs.fns, fns...)
	return pfs
}

// Scan applies the selector query and scans the result into the given value.
func (pfs *ProductFeatureSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, pfs.ctx, "Select")
	if err := pfs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ProductFeatureQuery, *ProductFeatureSelect](ctx, pfs.ProductFeatureQuery, pfs, pfs.inters, v)
}

func (pfs *ProductFeatureSelect) sqlScan(ctx context.Context, root *ProductFeatureQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(pfs.fns))
	for _, fn := range pfs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*pfs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := pfs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
