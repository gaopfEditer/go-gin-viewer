// Code generated by ent, DO NOT EDIT.

package licensetypefeatures

import (
	"time"

	"cambridge-hit.com/gin-base/activateserver/app/entity/ent/predicate"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.LicenseTypeFeatures {
	return predicate.LicenseTypeFeatures(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.LicenseTypeFeatures {
	return predicate.LicenseTypeFeatures(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.LicenseTypeFeatures {
	return predicate.LicenseTypeFeatures(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.LicenseTypeFeatures {
	return predicate.LicenseTypeFeatures(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.LicenseTypeFeatures {
	return predicate.LicenseTypeFeatures(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.LicenseTypeFeatures {
	return predicate.LicenseTypeFeatures(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.LicenseTypeFeatures {
	return predicate.LicenseTypeFeatures(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.LicenseTypeFeatures {
	return predicate.LicenseTypeFeatures(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.LicenseTypeFeatures {
	return predicate.LicenseTypeFeatures(sql.FieldLTE(FieldID, id))
}

// LicenseTypeID applies equality check predicate on the "license_type_id" field. It's identical to LicenseTypeIDEQ.
func LicenseTypeID(v int) predicate.LicenseTypeFeatures {
	return predicate.LicenseTypeFeatures(sql.FieldEQ(FieldLicenseTypeID, v))
}

// FeatureID applies equality check predicate on the "feature_id" field. It's identical to FeatureIDEQ.
func FeatureID(v int) predicate.LicenseTypeFeatures {
	return predicate.LicenseTypeFeatures(sql.FieldEQ(FieldFeatureID, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.LicenseTypeFeatures {
	return predicate.LicenseTypeFeatures(sql.FieldEQ(FieldCreatedAt, v))
}

// LicenseTypeIDEQ applies the EQ predicate on the "license_type_id" field.
func LicenseTypeIDEQ(v int) predicate.LicenseTypeFeatures {
	return predicate.LicenseTypeFeatures(sql.FieldEQ(FieldLicenseTypeID, v))
}

// LicenseTypeIDNEQ applies the NEQ predicate on the "license_type_id" field.
func LicenseTypeIDNEQ(v int) predicate.LicenseTypeFeatures {
	return predicate.LicenseTypeFeatures(sql.FieldNEQ(FieldLicenseTypeID, v))
}

// LicenseTypeIDIn applies the In predicate on the "license_type_id" field.
func LicenseTypeIDIn(vs ...int) predicate.LicenseTypeFeatures {
	return predicate.LicenseTypeFeatures(sql.FieldIn(FieldLicenseTypeID, vs...))
}

// LicenseTypeIDNotIn applies the NotIn predicate on the "license_type_id" field.
func LicenseTypeIDNotIn(vs ...int) predicate.LicenseTypeFeatures {
	return predicate.LicenseTypeFeatures(sql.FieldNotIn(FieldLicenseTypeID, vs...))
}

// FeatureIDEQ applies the EQ predicate on the "feature_id" field.
func FeatureIDEQ(v int) predicate.LicenseTypeFeatures {
	return predicate.LicenseTypeFeatures(sql.FieldEQ(FieldFeatureID, v))
}

// FeatureIDNEQ applies the NEQ predicate on the "feature_id" field.
func FeatureIDNEQ(v int) predicate.LicenseTypeFeatures {
	return predicate.LicenseTypeFeatures(sql.FieldNEQ(FieldFeatureID, v))
}

// FeatureIDIn applies the In predicate on the "feature_id" field.
func FeatureIDIn(vs ...int) predicate.LicenseTypeFeatures {
	return predicate.LicenseTypeFeatures(sql.FieldIn(FieldFeatureID, vs...))
}

// FeatureIDNotIn applies the NotIn predicate on the "feature_id" field.
func FeatureIDNotIn(vs ...int) predicate.LicenseTypeFeatures {
	return predicate.LicenseTypeFeatures(sql.FieldNotIn(FieldFeatureID, vs...))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.LicenseTypeFeatures {
	return predicate.LicenseTypeFeatures(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.LicenseTypeFeatures {
	return predicate.LicenseTypeFeatures(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.LicenseTypeFeatures {
	return predicate.LicenseTypeFeatures(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.LicenseTypeFeatures {
	return predicate.LicenseTypeFeatures(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.LicenseTypeFeatures {
	return predicate.LicenseTypeFeatures(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.LicenseTypeFeatures {
	return predicate.LicenseTypeFeatures(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.LicenseTypeFeatures {
	return predicate.LicenseTypeFeatures(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.LicenseTypeFeatures {
	return predicate.LicenseTypeFeatures(sql.FieldLTE(FieldCreatedAt, v))
}

// HasLicenseType applies the HasEdge predicate on the "license_type" edge.
func HasLicenseType() predicate.LicenseTypeFeatures {
	return predicate.LicenseTypeFeatures(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, LicenseTypeTable, LicenseTypeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasLicenseTypeWith applies the HasEdge predicate on the "license_type" edge with a given conditions (other predicates).
func HasLicenseTypeWith(preds ...predicate.LicenseType) predicate.LicenseTypeFeatures {
	return predicate.LicenseTypeFeatures(func(s *sql.Selector) {
		step := newLicenseTypeStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasFeature applies the HasEdge predicate on the "feature" edge.
func HasFeature() predicate.LicenseTypeFeatures {
	return predicate.LicenseTypeFeatures(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, FeatureTable, FeatureColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFeatureWith applies the HasEdge predicate on the "feature" edge with a given conditions (other predicates).
func HasFeatureWith(preds ...predicate.ProductFeature) predicate.LicenseTypeFeatures {
	return predicate.LicenseTypeFeatures(func(s *sql.Selector) {
		step := newFeatureStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.LicenseTypeFeatures) predicate.LicenseTypeFeatures {
	return predicate.LicenseTypeFeatures(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.LicenseTypeFeatures) predicate.LicenseTypeFeatures {
	return predicate.LicenseTypeFeatures(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.LicenseTypeFeatures) predicate.LicenseTypeFeatures {
	return predicate.LicenseTypeFeatures(sql.NotPredicates(p))
}
