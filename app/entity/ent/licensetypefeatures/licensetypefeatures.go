// Code generated by ent, DO NOT EDIT.

package licensetypefeatures

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the licensetypefeatures type in the database.
	Label = "license_type_features"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldLicenseTypeID holds the string denoting the license_type_id field in the database.
	FieldLicenseTypeID = "license_type_id"
	// FieldFeatureID holds the string denoting the feature_id field in the database.
	FieldFeatureID = "feature_id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeLicenseType holds the string denoting the license_type edge name in mutations.
	EdgeLicenseType = "license_type"
	// EdgeFeature holds the string denoting the feature edge name in mutations.
	EdgeFeature = "feature"
	// Table holds the table name of the licensetypefeatures in the database.
	Table = "license_type_features"
	// LicenseTypeTable is the table that holds the license_type relation/edge.
	LicenseTypeTable = "license_type_features"
	// LicenseTypeInverseTable is the table name for the LicenseType entity.
	// It exists in this package in order to avoid circular dependency with the "licensetype" package.
	LicenseTypeInverseTable = "license_types"
	// LicenseTypeColumn is the table column denoting the license_type relation/edge.
	LicenseTypeColumn = "license_type_id"
	// FeatureTable is the table that holds the feature relation/edge.
	FeatureTable = "license_type_features"
	// FeatureInverseTable is the table name for the ProductFeature entity.
	// It exists in this package in order to avoid circular dependency with the "productfeature" package.
	FeatureInverseTable = "product_features"
	// FeatureColumn is the table column denoting the feature relation/edge.
	FeatureColumn = "feature_id"
)

// Columns holds all SQL columns for licensetypefeatures fields.
var Columns = []string{
	FieldID,
	FieldLicenseTypeID,
	FieldFeatureID,
	FieldCreatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(int) error
)

// OrderOption defines the ordering options for the LicenseTypeFeatures queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByLicenseTypeID orders the results by the license_type_id field.
func ByLicenseTypeID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLicenseTypeID, opts...).ToFunc()
}

// ByFeatureID orders the results by the feature_id field.
func ByFeatureID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFeatureID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByLicenseTypeField orders the results by license_type field.
func ByLicenseTypeField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newLicenseTypeStep(), sql.OrderByField(field, opts...))
	}
}

// ByFeatureField orders the results by feature field.
func ByFeatureField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newFeatureStep(), sql.OrderByField(field, opts...))
	}
}
func newLicenseTypeStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(LicenseTypeInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, LicenseTypeTable, LicenseTypeColumn),
	)
}
func newFeatureStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(FeatureInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, FeatureTable, FeatureColumn),
	)
}
