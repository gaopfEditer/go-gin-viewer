// Code generated by ent, DO NOT EDIT.

package licensetype

import (
	"time"

	"cambridge-hit.com/gin-base/activateserver/app/entity/ent/predicate"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.LicenseType {
	return predicate.LicenseType(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.LicenseType {
	return predicate.LicenseType(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.LicenseType {
	return predicate.LicenseType(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.LicenseType {
	return predicate.LicenseType(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.LicenseType {
	return predicate.LicenseType(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.LicenseType {
	return predicate.LicenseType(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.LicenseType {
	return predicate.LicenseType(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.LicenseType {
	return predicate.LicenseType(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.LicenseType {
	return predicate.LicenseType(sql.FieldLTE(FieldID, id))
}

// TypeName applies equality check predicate on the "type_name" field. It's identical to TypeNameEQ.
func TypeName(v string) predicate.LicenseType {
	return predicate.LicenseType(sql.FieldEQ(FieldTypeName, v))
}

// LicenseType applies equality check predicate on the "license_type" field. It's identical to LicenseTypeEQ.
func LicenseType(v string) predicate.LicenseType {
	return predicate.LicenseType(sql.FieldEQ(FieldLicenseType, v))
}

// ProductID applies equality check predicate on the "product_id" field. It's identical to ProductIDEQ.
func ProductID(v int) predicate.LicenseType {
	return predicate.LicenseType(sql.FieldEQ(FieldProductID, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.LicenseType {
	return predicate.LicenseType(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.LicenseType {
	return predicate.LicenseType(sql.FieldEQ(FieldUpdatedAt, v))
}

// TypeNameEQ applies the EQ predicate on the "type_name" field.
func TypeNameEQ(v string) predicate.LicenseType {
	return predicate.LicenseType(sql.FieldEQ(FieldTypeName, v))
}

// TypeNameNEQ applies the NEQ predicate on the "type_name" field.
func TypeNameNEQ(v string) predicate.LicenseType {
	return predicate.LicenseType(sql.FieldNEQ(FieldTypeName, v))
}

// TypeNameIn applies the In predicate on the "type_name" field.
func TypeNameIn(vs ...string) predicate.LicenseType {
	return predicate.LicenseType(sql.FieldIn(FieldTypeName, vs...))
}

// TypeNameNotIn applies the NotIn predicate on the "type_name" field.
func TypeNameNotIn(vs ...string) predicate.LicenseType {
	return predicate.LicenseType(sql.FieldNotIn(FieldTypeName, vs...))
}

// TypeNameGT applies the GT predicate on the "type_name" field.
func TypeNameGT(v string) predicate.LicenseType {
	return predicate.LicenseType(sql.FieldGT(FieldTypeName, v))
}

// TypeNameGTE applies the GTE predicate on the "type_name" field.
func TypeNameGTE(v string) predicate.LicenseType {
	return predicate.LicenseType(sql.FieldGTE(FieldTypeName, v))
}

// TypeNameLT applies the LT predicate on the "type_name" field.
func TypeNameLT(v string) predicate.LicenseType {
	return predicate.LicenseType(sql.FieldLT(FieldTypeName, v))
}

// TypeNameLTE applies the LTE predicate on the "type_name" field.
func TypeNameLTE(v string) predicate.LicenseType {
	return predicate.LicenseType(sql.FieldLTE(FieldTypeName, v))
}

// TypeNameContains applies the Contains predicate on the "type_name" field.
func TypeNameContains(v string) predicate.LicenseType {
	return predicate.LicenseType(sql.FieldContains(FieldTypeName, v))
}

// TypeNameHasPrefix applies the HasPrefix predicate on the "type_name" field.
func TypeNameHasPrefix(v string) predicate.LicenseType {
	return predicate.LicenseType(sql.FieldHasPrefix(FieldTypeName, v))
}

// TypeNameHasSuffix applies the HasSuffix predicate on the "type_name" field.
func TypeNameHasSuffix(v string) predicate.LicenseType {
	return predicate.LicenseType(sql.FieldHasSuffix(FieldTypeName, v))
}

// TypeNameEqualFold applies the EqualFold predicate on the "type_name" field.
func TypeNameEqualFold(v string) predicate.LicenseType {
	return predicate.LicenseType(sql.FieldEqualFold(FieldTypeName, v))
}

// TypeNameContainsFold applies the ContainsFold predicate on the "type_name" field.
func TypeNameContainsFold(v string) predicate.LicenseType {
	return predicate.LicenseType(sql.FieldContainsFold(FieldTypeName, v))
}

// LicenseTypeEQ applies the EQ predicate on the "license_type" field.
func LicenseTypeEQ(v string) predicate.LicenseType {
	return predicate.LicenseType(sql.FieldEQ(FieldLicenseType, v))
}

// LicenseTypeNEQ applies the NEQ predicate on the "license_type" field.
func LicenseTypeNEQ(v string) predicate.LicenseType {
	return predicate.LicenseType(sql.FieldNEQ(FieldLicenseType, v))
}

// LicenseTypeIn applies the In predicate on the "license_type" field.
func LicenseTypeIn(vs ...string) predicate.LicenseType {
	return predicate.LicenseType(sql.FieldIn(FieldLicenseType, vs...))
}

// LicenseTypeNotIn applies the NotIn predicate on the "license_type" field.
func LicenseTypeNotIn(vs ...string) predicate.LicenseType {
	return predicate.LicenseType(sql.FieldNotIn(FieldLicenseType, vs...))
}

// LicenseTypeGT applies the GT predicate on the "license_type" field.
func LicenseTypeGT(v string) predicate.LicenseType {
	return predicate.LicenseType(sql.FieldGT(FieldLicenseType, v))
}

// LicenseTypeGTE applies the GTE predicate on the "license_type" field.
func LicenseTypeGTE(v string) predicate.LicenseType {
	return predicate.LicenseType(sql.FieldGTE(FieldLicenseType, v))
}

// LicenseTypeLT applies the LT predicate on the "license_type" field.
func LicenseTypeLT(v string) predicate.LicenseType {
	return predicate.LicenseType(sql.FieldLT(FieldLicenseType, v))
}

// LicenseTypeLTE applies the LTE predicate on the "license_type" field.
func LicenseTypeLTE(v string) predicate.LicenseType {
	return predicate.LicenseType(sql.FieldLTE(FieldLicenseType, v))
}

// LicenseTypeContains applies the Contains predicate on the "license_type" field.
func LicenseTypeContains(v string) predicate.LicenseType {
	return predicate.LicenseType(sql.FieldContains(FieldLicenseType, v))
}

// LicenseTypeHasPrefix applies the HasPrefix predicate on the "license_type" field.
func LicenseTypeHasPrefix(v string) predicate.LicenseType {
	return predicate.LicenseType(sql.FieldHasPrefix(FieldLicenseType, v))
}

// LicenseTypeHasSuffix applies the HasSuffix predicate on the "license_type" field.
func LicenseTypeHasSuffix(v string) predicate.LicenseType {
	return predicate.LicenseType(sql.FieldHasSuffix(FieldLicenseType, v))
}

// LicenseTypeEqualFold applies the EqualFold predicate on the "license_type" field.
func LicenseTypeEqualFold(v string) predicate.LicenseType {
	return predicate.LicenseType(sql.FieldEqualFold(FieldLicenseType, v))
}

// LicenseTypeContainsFold applies the ContainsFold predicate on the "license_type" field.
func LicenseTypeContainsFold(v string) predicate.LicenseType {
	return predicate.LicenseType(sql.FieldContainsFold(FieldLicenseType, v))
}

// ProductIDEQ applies the EQ predicate on the "product_id" field.
func ProductIDEQ(v int) predicate.LicenseType {
	return predicate.LicenseType(sql.FieldEQ(FieldProductID, v))
}

// ProductIDNEQ applies the NEQ predicate on the "product_id" field.
func ProductIDNEQ(v int) predicate.LicenseType {
	return predicate.LicenseType(sql.FieldNEQ(FieldProductID, v))
}

// ProductIDIn applies the In predicate on the "product_id" field.
func ProductIDIn(vs ...int) predicate.LicenseType {
	return predicate.LicenseType(sql.FieldIn(FieldProductID, vs...))
}

// ProductIDNotIn applies the NotIn predicate on the "product_id" field.
func ProductIDNotIn(vs ...int) predicate.LicenseType {
	return predicate.LicenseType(sql.FieldNotIn(FieldProductID, vs...))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.LicenseType {
	return predicate.LicenseType(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.LicenseType {
	return predicate.LicenseType(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.LicenseType {
	return predicate.LicenseType(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.LicenseType {
	return predicate.LicenseType(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.LicenseType {
	return predicate.LicenseType(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.LicenseType {
	return predicate.LicenseType(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.LicenseType {
	return predicate.LicenseType(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.LicenseType {
	return predicate.LicenseType(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.LicenseType {
	return predicate.LicenseType(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.LicenseType {
	return predicate.LicenseType(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.LicenseType {
	return predicate.LicenseType(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.LicenseType {
	return predicate.LicenseType(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.LicenseType {
	return predicate.LicenseType(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.LicenseType {
	return predicate.LicenseType(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.LicenseType {
	return predicate.LicenseType(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.LicenseType {
	return predicate.LicenseType(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasProduct applies the HasEdge predicate on the "product" edge.
func HasProduct() predicate.LicenseType {
	return predicate.LicenseType(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ProductTable, ProductColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProductWith applies the HasEdge predicate on the "product" edge with a given conditions (other predicates).
func HasProductWith(preds ...predicate.Product) predicate.LicenseType {
	return predicate.LicenseType(func(s *sql.Selector) {
		step := newProductStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasFeatures applies the HasEdge predicate on the "features" edge.
func HasFeatures() predicate.LicenseType {
	return predicate.LicenseType(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, FeaturesTable, FeaturesPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFeaturesWith applies the HasEdge predicate on the "features" edge with a given conditions (other predicates).
func HasFeaturesWith(preds ...predicate.ProductFeature) predicate.LicenseType {
	return predicate.LicenseType(func(s *sql.Selector) {
		step := newFeaturesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDevices applies the HasEdge predicate on the "devices" edge.
func HasDevices() predicate.LicenseType {
	return predicate.LicenseType(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, DevicesTable, DevicesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDevicesWith applies the HasEdge predicate on the "devices" edge with a given conditions (other predicates).
func HasDevicesWith(preds ...predicate.Device) predicate.LicenseType {
	return predicate.LicenseType(func(s *sql.Selector) {
		step := newDevicesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasLicenseTypeFeatures applies the HasEdge predicate on the "license_type_features" edge.
func HasLicenseTypeFeatures() predicate.LicenseType {
	return predicate.LicenseType(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, LicenseTypeFeaturesTable, LicenseTypeFeaturesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasLicenseTypeFeaturesWith applies the HasEdge predicate on the "license_type_features" edge with a given conditions (other predicates).
func HasLicenseTypeFeaturesWith(preds ...predicate.LicenseTypeFeatures) predicate.LicenseType {
	return predicate.LicenseType(func(s *sql.Selector) {
		step := newLicenseTypeFeaturesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.LicenseType) predicate.LicenseType {
	return predicate.LicenseType(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.LicenseType) predicate.LicenseType {
	return predicate.LicenseType(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.LicenseType) predicate.LicenseType {
	return predicate.LicenseType(sql.NotPredicates(p))
}
