// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"cambridge-hit.com/gin-base/activateserver/app/entity/ent/licensetype"
	"cambridge-hit.com/gin-base/activateserver/app/entity/ent/licensetypefeatures"
	"cambridge-hit.com/gin-base/activateserver/app/entity/ent/product"
	"cambridge-hit.com/gin-base/activateserver/app/entity/ent/productfeature"
	"cambridge-hit.com/gin-base/activateserver/app/entity/ent/softwareversion"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ProductFeatureCreate is the builder for creating a ProductFeature entity.
type ProductFeatureCreate struct {
	config
	mutation *ProductFeatureMutation
	hooks    []Hook
}

// SetFeatureName sets the "feature_name" field.
func (pfc *ProductFeatureCreate) SetFeatureName(s string) *ProductFeatureCreate {
	pfc.mutation.SetFeatureName(s)
	return pfc
}

// SetFeatureCode sets the "feature_code" field.
func (pfc *ProductFeatureCreate) SetFeatureCode(s string) *ProductFeatureCreate {
	pfc.mutation.SetFeatureCode(s)
	return pfc
}

// SetProductID sets the "product_id" field.
func (pfc *ProductFeatureCreate) SetProductID(i int) *ProductFeatureCreate {
	pfc.mutation.SetProductID(i)
	return pfc
}

// SetCreatedAt sets the "created_at" field.
func (pfc *ProductFeatureCreate) SetCreatedAt(t time.Time) *ProductFeatureCreate {
	pfc.mutation.SetCreatedAt(t)
	return pfc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pfc *ProductFeatureCreate) SetNillableCreatedAt(t *time.Time) *ProductFeatureCreate {
	if t != nil {
		pfc.SetCreatedAt(*t)
	}
	return pfc
}

// SetUpdatedAt sets the "updated_at" field.
func (pfc *ProductFeatureCreate) SetUpdatedAt(t time.Time) *ProductFeatureCreate {
	pfc.mutation.SetUpdatedAt(t)
	return pfc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pfc *ProductFeatureCreate) SetNillableUpdatedAt(t *time.Time) *ProductFeatureCreate {
	if t != nil {
		pfc.SetUpdatedAt(*t)
	}
	return pfc
}

// SetID sets the "id" field.
func (pfc *ProductFeatureCreate) SetID(i int) *ProductFeatureCreate {
	pfc.mutation.SetID(i)
	return pfc
}

// SetProduct sets the "product" edge to the Product entity.
func (pfc *ProductFeatureCreate) SetProduct(p *Product) *ProductFeatureCreate {
	return pfc.SetProductID(p.ID)
}

// AddLicenseTypeIDs adds the "license_types" edge to the LicenseType entity by IDs.
func (pfc *ProductFeatureCreate) AddLicenseTypeIDs(ids ...int) *ProductFeatureCreate {
	pfc.mutation.AddLicenseTypeIDs(ids...)
	return pfc
}

// AddLicenseTypes adds the "license_types" edges to the LicenseType entity.
func (pfc *ProductFeatureCreate) AddLicenseTypes(l ...*LicenseType) *ProductFeatureCreate {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return pfc.AddLicenseTypeIDs(ids...)
}

// AddSoftwareVersionIDs adds the "software_versions" edge to the SoftwareVersion entity by IDs.
func (pfc *ProductFeatureCreate) AddSoftwareVersionIDs(ids ...int) *ProductFeatureCreate {
	pfc.mutation.AddSoftwareVersionIDs(ids...)
	return pfc
}

// AddSoftwareVersions adds the "software_versions" edges to the SoftwareVersion entity.
func (pfc *ProductFeatureCreate) AddSoftwareVersions(s ...*SoftwareVersion) *ProductFeatureCreate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return pfc.AddSoftwareVersionIDs(ids...)
}

// AddLicenseTypeFeatureIDs adds the "license_type_features" edge to the LicenseTypeFeatures entity by IDs.
func (pfc *ProductFeatureCreate) AddLicenseTypeFeatureIDs(ids ...int) *ProductFeatureCreate {
	pfc.mutation.AddLicenseTypeFeatureIDs(ids...)
	return pfc
}

// AddLicenseTypeFeatures adds the "license_type_features" edges to the LicenseTypeFeatures entity.
func (pfc *ProductFeatureCreate) AddLicenseTypeFeatures(l ...*LicenseTypeFeatures) *ProductFeatureCreate {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return pfc.AddLicenseTypeFeatureIDs(ids...)
}

// Mutation returns the ProductFeatureMutation object of the builder.
func (pfc *ProductFeatureCreate) Mutation() *ProductFeatureMutation {
	return pfc.mutation
}

// Save creates the ProductFeature in the database.
func (pfc *ProductFeatureCreate) Save(ctx context.Context) (*ProductFeature, error) {
	pfc.defaults()
	return withHooks(ctx, pfc.sqlSave, pfc.mutation, pfc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pfc *ProductFeatureCreate) SaveX(ctx context.Context) *ProductFeature {
	v, err := pfc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pfc *ProductFeatureCreate) Exec(ctx context.Context) error {
	_, err := pfc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pfc *ProductFeatureCreate) ExecX(ctx context.Context) {
	if err := pfc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pfc *ProductFeatureCreate) defaults() {
	if _, ok := pfc.mutation.CreatedAt(); !ok {
		v := productfeature.DefaultCreatedAt()
		pfc.mutation.SetCreatedAt(v)
	}
	if _, ok := pfc.mutation.UpdatedAt(); !ok {
		v := productfeature.DefaultUpdatedAt()
		pfc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pfc *ProductFeatureCreate) check() error {
	if _, ok := pfc.mutation.FeatureName(); !ok {
		return &ValidationError{Name: "feature_name", err: errors.New(`ent: missing required field "ProductFeature.feature_name"`)}
	}
	if v, ok := pfc.mutation.FeatureName(); ok {
		if err := productfeature.FeatureNameValidator(v); err != nil {
			return &ValidationError{Name: "feature_name", err: fmt.Errorf(`ent: validator failed for field "ProductFeature.feature_name": %w`, err)}
		}
	}
	if _, ok := pfc.mutation.FeatureCode(); !ok {
		return &ValidationError{Name: "feature_code", err: errors.New(`ent: missing required field "ProductFeature.feature_code"`)}
	}
	if v, ok := pfc.mutation.FeatureCode(); ok {
		if err := productfeature.FeatureCodeValidator(v); err != nil {
			return &ValidationError{Name: "feature_code", err: fmt.Errorf(`ent: validator failed for field "ProductFeature.feature_code": %w`, err)}
		}
	}
	if _, ok := pfc.mutation.ProductID(); !ok {
		return &ValidationError{Name: "product_id", err: errors.New(`ent: missing required field "ProductFeature.product_id"`)}
	}
	if _, ok := pfc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "ProductFeature.created_at"`)}
	}
	if _, ok := pfc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "ProductFeature.updated_at"`)}
	}
	if v, ok := pfc.mutation.ID(); ok {
		if err := productfeature.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "ProductFeature.id": %w`, err)}
		}
	}
	if _, ok := pfc.mutation.ProductID(); !ok {
		return &ValidationError{Name: "product", err: errors.New(`ent: missing required edge "ProductFeature.product"`)}
	}
	return nil
}

func (pfc *ProductFeatureCreate) sqlSave(ctx context.Context) (*ProductFeature, error) {
	if err := pfc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pfc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pfc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	pfc.mutation.id = &_node.ID
	pfc.mutation.done = true
	return _node, nil
}

func (pfc *ProductFeatureCreate) createSpec() (*ProductFeature, *sqlgraph.CreateSpec) {
	var (
		_node = &ProductFeature{config: pfc.config}
		_spec = sqlgraph.NewCreateSpec(productfeature.Table, sqlgraph.NewFieldSpec(productfeature.FieldID, field.TypeInt))
	)
	if id, ok := pfc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := pfc.mutation.FeatureName(); ok {
		_spec.SetField(productfeature.FieldFeatureName, field.TypeString, value)
		_node.FeatureName = value
	}
	if value, ok := pfc.mutation.FeatureCode(); ok {
		_spec.SetField(productfeature.FieldFeatureCode, field.TypeString, value)
		_node.FeatureCode = value
	}
	if value, ok := pfc.mutation.CreatedAt(); ok {
		_spec.SetField(productfeature.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := pfc.mutation.UpdatedAt(); ok {
		_spec.SetField(productfeature.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := pfc.mutation.ProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productfeature.ProductTable,
			Columns: []string{productfeature.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ProductID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pfc.mutation.LicenseTypesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   productfeature.LicenseTypesTable,
			Columns: productfeature.LicenseTypesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(licensetype.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &LicenseTypeFeaturesCreate{config: pfc.config, mutation: newLicenseTypeFeaturesMutation(pfc.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pfc.mutation.SoftwareVersionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   productfeature.SoftwareVersionsTable,
			Columns: productfeature.SoftwareVersionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(softwareversion.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pfc.mutation.LicenseTypeFeaturesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   productfeature.LicenseTypeFeaturesTable,
			Columns: []string{productfeature.LicenseTypeFeaturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(licensetypefeatures.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ProductFeatureCreateBulk is the builder for creating many ProductFeature entities in bulk.
type ProductFeatureCreateBulk struct {
	config
	err      error
	builders []*ProductFeatureCreate
}

// Save creates the ProductFeature entities in the database.
func (pfcb *ProductFeatureCreateBulk) Save(ctx context.Context) ([]*ProductFeature, error) {
	if pfcb.err != nil {
		return nil, pfcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pfcb.builders))
	nodes := make([]*ProductFeature, len(pfcb.builders))
	mutators := make([]Mutator, len(pfcb.builders))
	for i := range pfcb.builders {
		func(i int, root context.Context) {
			builder := pfcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProductFeatureMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pfcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pfcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pfcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pfcb *ProductFeatureCreateBulk) SaveX(ctx context.Context) []*ProductFeature {
	v, err := pfcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pfcb *ProductFeatureCreateBulk) Exec(ctx context.Context) error {
	_, err := pfcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pfcb *ProductFeatureCreateBulk) ExecX(ctx context.Context) {
	if err := pfcb.Exec(ctx); err != nil {
		panic(err)
	}
}
