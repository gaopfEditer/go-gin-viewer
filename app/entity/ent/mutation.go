// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"cambridge-hit.com/gin-base/activateserver/app/entity/ent/auditlog"
	"cambridge-hit.com/gin-base/activateserver/app/entity/ent/device"
	"cambridge-hit.com/gin-base/activateserver/app/entity/ent/firmwareversion"
	"cambridge-hit.com/gin-base/activateserver/app/entity/ent/licensetype"
	"cambridge-hit.com/gin-base/activateserver/app/entity/ent/licensetypefeatures"
	"cambridge-hit.com/gin-base/activateserver/app/entity/ent/predicate"
	"cambridge-hit.com/gin-base/activateserver/app/entity/ent/product"
	"cambridge-hit.com/gin-base/activateserver/app/entity/ent/productfeature"
	"cambridge-hit.com/gin-base/activateserver/app/entity/ent/productmanager"
	"cambridge-hit.com/gin-base/activateserver/app/entity/ent/softwareversion"
	"cambridge-hit.com/gin-base/activateserver/app/entity/ent/user"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeAuditLog            = "AuditLog"
	TypeDevice              = "Device"
	TypeFirmwareVersion     = "FirmwareVersion"
	TypeLicenseType         = "LicenseType"
	TypeLicenseTypeFeatures = "LicenseTypeFeatures"
	TypeProduct             = "Product"
	TypeProductFeature      = "ProductFeature"
	TypeProductManager      = "ProductManager"
	TypeSoftwareVersion     = "SoftwareVersion"
	TypeUser                = "User"
)

// AuditLogMutation represents an operation that mutates the AuditLog nodes in the graph.
type AuditLogMutation struct {
	config
	op              Op
	typ             string
	id              *int
	module          *string
	action_type     *string
	details         *string
	ip_address      *string
	created_at      *time.Time
	clearedFields   map[string]struct{}
	operator        *int
	clearedoperator bool
	product         *int
	clearedproduct  bool
	done            bool
	oldValue        func(context.Context) (*AuditLog, error)
	predicates      []predicate.AuditLog
}

var _ ent.Mutation = (*AuditLogMutation)(nil)

// auditlogOption allows management of the mutation configuration using functional options.
type auditlogOption func(*AuditLogMutation)

// newAuditLogMutation creates new mutation for the AuditLog entity.
func newAuditLogMutation(c config, op Op, opts ...auditlogOption) *AuditLogMutation {
	m := &AuditLogMutation{
		config:        c,
		op:            op,
		typ:           TypeAuditLog,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAuditLogID sets the ID field of the mutation.
func withAuditLogID(id int) auditlogOption {
	return func(m *AuditLogMutation) {
		var (
			err   error
			once  sync.Once
			value *AuditLog
		)
		m.oldValue = func(ctx context.Context) (*AuditLog, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().AuditLog.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAuditLog sets the old AuditLog of the mutation.
func withAuditLog(node *AuditLog) auditlogOption {
	return func(m *AuditLogMutation) {
		m.oldValue = func(context.Context) (*AuditLog, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AuditLogMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AuditLogMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of AuditLog entities.
func (m *AuditLogMutation) SetID(id int) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *AuditLogMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *AuditLogMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().AuditLog.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetOperatorID sets the "operator_id" field.
func (m *AuditLogMutation) SetOperatorID(i int) {
	m.operator = &i
}

// OperatorID returns the value of the "operator_id" field in the mutation.
func (m *AuditLogMutation) OperatorID() (r int, exists bool) {
	v := m.operator
	if v == nil {
		return
	}
	return *v, true
}

// OldOperatorID returns the old "operator_id" field's value of the AuditLog entity.
// If the AuditLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AuditLogMutation) OldOperatorID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOperatorID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOperatorID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOperatorID: %w", err)
	}
	return oldValue.OperatorID, nil
}

// ResetOperatorID resets all changes to the "operator_id" field.
func (m *AuditLogMutation) ResetOperatorID() {
	m.operator = nil
}

// SetModule sets the "module" field.
func (m *AuditLogMutation) SetModule(s string) {
	m.module = &s
}

// Module returns the value of the "module" field in the mutation.
func (m *AuditLogMutation) Module() (r string, exists bool) {
	v := m.module
	if v == nil {
		return
	}
	return *v, true
}

// OldModule returns the old "module" field's value of the AuditLog entity.
// If the AuditLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AuditLogMutation) OldModule(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldModule is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldModule requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldModule: %w", err)
	}
	return oldValue.Module, nil
}

// ResetModule resets all changes to the "module" field.
func (m *AuditLogMutation) ResetModule() {
	m.module = nil
}

// SetActionType sets the "action_type" field.
func (m *AuditLogMutation) SetActionType(s string) {
	m.action_type = &s
}

// ActionType returns the value of the "action_type" field in the mutation.
func (m *AuditLogMutation) ActionType() (r string, exists bool) {
	v := m.action_type
	if v == nil {
		return
	}
	return *v, true
}

// OldActionType returns the old "action_type" field's value of the AuditLog entity.
// If the AuditLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AuditLogMutation) OldActionType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldActionType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldActionType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldActionType: %w", err)
	}
	return oldValue.ActionType, nil
}

// ResetActionType resets all changes to the "action_type" field.
func (m *AuditLogMutation) ResetActionType() {
	m.action_type = nil
}

// SetProductID sets the "product_id" field.
func (m *AuditLogMutation) SetProductID(i int) {
	m.product = &i
}

// ProductID returns the value of the "product_id" field in the mutation.
func (m *AuditLogMutation) ProductID() (r int, exists bool) {
	v := m.product
	if v == nil {
		return
	}
	return *v, true
}

// OldProductID returns the old "product_id" field's value of the AuditLog entity.
// If the AuditLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AuditLogMutation) OldProductID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProductID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProductID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProductID: %w", err)
	}
	return oldValue.ProductID, nil
}

// ClearProductID clears the value of the "product_id" field.
func (m *AuditLogMutation) ClearProductID() {
	m.product = nil
	m.clearedFields[auditlog.FieldProductID] = struct{}{}
}

// ProductIDCleared returns if the "product_id" field was cleared in this mutation.
func (m *AuditLogMutation) ProductIDCleared() bool {
	_, ok := m.clearedFields[auditlog.FieldProductID]
	return ok
}

// ResetProductID resets all changes to the "product_id" field.
func (m *AuditLogMutation) ResetProductID() {
	m.product = nil
	delete(m.clearedFields, auditlog.FieldProductID)
}

// SetDetails sets the "details" field.
func (m *AuditLogMutation) SetDetails(s string) {
	m.details = &s
}

// Details returns the value of the "details" field in the mutation.
func (m *AuditLogMutation) Details() (r string, exists bool) {
	v := m.details
	if v == nil {
		return
	}
	return *v, true
}

// OldDetails returns the old "details" field's value of the AuditLog entity.
// If the AuditLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AuditLogMutation) OldDetails(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDetails is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDetails requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDetails: %w", err)
	}
	return oldValue.Details, nil
}

// ClearDetails clears the value of the "details" field.
func (m *AuditLogMutation) ClearDetails() {
	m.details = nil
	m.clearedFields[auditlog.FieldDetails] = struct{}{}
}

// DetailsCleared returns if the "details" field was cleared in this mutation.
func (m *AuditLogMutation) DetailsCleared() bool {
	_, ok := m.clearedFields[auditlog.FieldDetails]
	return ok
}

// ResetDetails resets all changes to the "details" field.
func (m *AuditLogMutation) ResetDetails() {
	m.details = nil
	delete(m.clearedFields, auditlog.FieldDetails)
}

// SetIPAddress sets the "ip_address" field.
func (m *AuditLogMutation) SetIPAddress(s string) {
	m.ip_address = &s
}

// IPAddress returns the value of the "ip_address" field in the mutation.
func (m *AuditLogMutation) IPAddress() (r string, exists bool) {
	v := m.ip_address
	if v == nil {
		return
	}
	return *v, true
}

// OldIPAddress returns the old "ip_address" field's value of the AuditLog entity.
// If the AuditLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AuditLogMutation) OldIPAddress(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIPAddress is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIPAddress requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIPAddress: %w", err)
	}
	return oldValue.IPAddress, nil
}

// ClearIPAddress clears the value of the "ip_address" field.
func (m *AuditLogMutation) ClearIPAddress() {
	m.ip_address = nil
	m.clearedFields[auditlog.FieldIPAddress] = struct{}{}
}

// IPAddressCleared returns if the "ip_address" field was cleared in this mutation.
func (m *AuditLogMutation) IPAddressCleared() bool {
	_, ok := m.clearedFields[auditlog.FieldIPAddress]
	return ok
}

// ResetIPAddress resets all changes to the "ip_address" field.
func (m *AuditLogMutation) ResetIPAddress() {
	m.ip_address = nil
	delete(m.clearedFields, auditlog.FieldIPAddress)
}

// SetCreatedAt sets the "created_at" field.
func (m *AuditLogMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *AuditLogMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the AuditLog entity.
// If the AuditLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AuditLogMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *AuditLogMutation) ResetCreatedAt() {
	m.created_at = nil
}

// ClearOperator clears the "operator" edge to the User entity.
func (m *AuditLogMutation) ClearOperator() {
	m.clearedoperator = true
	m.clearedFields[auditlog.FieldOperatorID] = struct{}{}
}

// OperatorCleared reports if the "operator" edge to the User entity was cleared.
func (m *AuditLogMutation) OperatorCleared() bool {
	return m.clearedoperator
}

// OperatorIDs returns the "operator" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// OperatorID instead. It exists only for internal usage by the builders.
func (m *AuditLogMutation) OperatorIDs() (ids []int) {
	if id := m.operator; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetOperator resets all changes to the "operator" edge.
func (m *AuditLogMutation) ResetOperator() {
	m.operator = nil
	m.clearedoperator = false
}

// ClearProduct clears the "product" edge to the Product entity.
func (m *AuditLogMutation) ClearProduct() {
	m.clearedproduct = true
	m.clearedFields[auditlog.FieldProductID] = struct{}{}
}

// ProductCleared reports if the "product" edge to the Product entity was cleared.
func (m *AuditLogMutation) ProductCleared() bool {
	return m.ProductIDCleared() || m.clearedproduct
}

// ProductIDs returns the "product" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ProductID instead. It exists only for internal usage by the builders.
func (m *AuditLogMutation) ProductIDs() (ids []int) {
	if id := m.product; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetProduct resets all changes to the "product" edge.
func (m *AuditLogMutation) ResetProduct() {
	m.product = nil
	m.clearedproduct = false
}

// Where appends a list predicates to the AuditLogMutation builder.
func (m *AuditLogMutation) Where(ps ...predicate.AuditLog) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the AuditLogMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *AuditLogMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.AuditLog, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *AuditLogMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *AuditLogMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (AuditLog).
func (m *AuditLogMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *AuditLogMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.operator != nil {
		fields = append(fields, auditlog.FieldOperatorID)
	}
	if m.module != nil {
		fields = append(fields, auditlog.FieldModule)
	}
	if m.action_type != nil {
		fields = append(fields, auditlog.FieldActionType)
	}
	if m.product != nil {
		fields = append(fields, auditlog.FieldProductID)
	}
	if m.details != nil {
		fields = append(fields, auditlog.FieldDetails)
	}
	if m.ip_address != nil {
		fields = append(fields, auditlog.FieldIPAddress)
	}
	if m.created_at != nil {
		fields = append(fields, auditlog.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *AuditLogMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case auditlog.FieldOperatorID:
		return m.OperatorID()
	case auditlog.FieldModule:
		return m.Module()
	case auditlog.FieldActionType:
		return m.ActionType()
	case auditlog.FieldProductID:
		return m.ProductID()
	case auditlog.FieldDetails:
		return m.Details()
	case auditlog.FieldIPAddress:
		return m.IPAddress()
	case auditlog.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *AuditLogMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case auditlog.FieldOperatorID:
		return m.OldOperatorID(ctx)
	case auditlog.FieldModule:
		return m.OldModule(ctx)
	case auditlog.FieldActionType:
		return m.OldActionType(ctx)
	case auditlog.FieldProductID:
		return m.OldProductID(ctx)
	case auditlog.FieldDetails:
		return m.OldDetails(ctx)
	case auditlog.FieldIPAddress:
		return m.OldIPAddress(ctx)
	case auditlog.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown AuditLog field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AuditLogMutation) SetField(name string, value ent.Value) error {
	switch name {
	case auditlog.FieldOperatorID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOperatorID(v)
		return nil
	case auditlog.FieldModule:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetModule(v)
		return nil
	case auditlog.FieldActionType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetActionType(v)
		return nil
	case auditlog.FieldProductID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProductID(v)
		return nil
	case auditlog.FieldDetails:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDetails(v)
		return nil
	case auditlog.FieldIPAddress:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIPAddress(v)
		return nil
	case auditlog.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown AuditLog field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *AuditLogMutation) AddedFields() []string {
	var fields []string
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *AuditLogMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AuditLogMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown AuditLog numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *AuditLogMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(auditlog.FieldProductID) {
		fields = append(fields, auditlog.FieldProductID)
	}
	if m.FieldCleared(auditlog.FieldDetails) {
		fields = append(fields, auditlog.FieldDetails)
	}
	if m.FieldCleared(auditlog.FieldIPAddress) {
		fields = append(fields, auditlog.FieldIPAddress)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *AuditLogMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *AuditLogMutation) ClearField(name string) error {
	switch name {
	case auditlog.FieldProductID:
		m.ClearProductID()
		return nil
	case auditlog.FieldDetails:
		m.ClearDetails()
		return nil
	case auditlog.FieldIPAddress:
		m.ClearIPAddress()
		return nil
	}
	return fmt.Errorf("unknown AuditLog nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *AuditLogMutation) ResetField(name string) error {
	switch name {
	case auditlog.FieldOperatorID:
		m.ResetOperatorID()
		return nil
	case auditlog.FieldModule:
		m.ResetModule()
		return nil
	case auditlog.FieldActionType:
		m.ResetActionType()
		return nil
	case auditlog.FieldProductID:
		m.ResetProductID()
		return nil
	case auditlog.FieldDetails:
		m.ResetDetails()
		return nil
	case auditlog.FieldIPAddress:
		m.ResetIPAddress()
		return nil
	case auditlog.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown AuditLog field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *AuditLogMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.operator != nil {
		edges = append(edges, auditlog.EdgeOperator)
	}
	if m.product != nil {
		edges = append(edges, auditlog.EdgeProduct)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *AuditLogMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case auditlog.EdgeOperator:
		if id := m.operator; id != nil {
			return []ent.Value{*id}
		}
	case auditlog.EdgeProduct:
		if id := m.product; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *AuditLogMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *AuditLogMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *AuditLogMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedoperator {
		edges = append(edges, auditlog.EdgeOperator)
	}
	if m.clearedproduct {
		edges = append(edges, auditlog.EdgeProduct)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *AuditLogMutation) EdgeCleared(name string) bool {
	switch name {
	case auditlog.EdgeOperator:
		return m.clearedoperator
	case auditlog.EdgeProduct:
		return m.clearedproduct
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *AuditLogMutation) ClearEdge(name string) error {
	switch name {
	case auditlog.EdgeOperator:
		m.ClearOperator()
		return nil
	case auditlog.EdgeProduct:
		m.ClearProduct()
		return nil
	}
	return fmt.Errorf("unknown AuditLog unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *AuditLogMutation) ResetEdge(name string) error {
	switch name {
	case auditlog.EdgeOperator:
		m.ResetOperator()
		return nil
	case auditlog.EdgeProduct:
		m.ResetProduct()
		return nil
	}
	return fmt.Errorf("unknown AuditLog edge %s", name)
}

// DeviceMutation represents an operation that mutates the Device nodes in the graph.
type DeviceMutation struct {
	config
	op                  Op
	typ                 string
	id                  *int
	sn                  *string
	oem_tag             *string
	remark              *string
	created_at          *time.Time
	updated_at          *time.Time
	clearedFields       map[string]struct{}
	product             *int
	clearedproduct      bool
	license_type        *int
	clearedlicense_type bool
	creator             *int
	clearedcreator      bool
	updater             *int
	clearedupdater      bool
	done                bool
	oldValue            func(context.Context) (*Device, error)
	predicates          []predicate.Device
}

var _ ent.Mutation = (*DeviceMutation)(nil)

// deviceOption allows management of the mutation configuration using functional options.
type deviceOption func(*DeviceMutation)

// newDeviceMutation creates new mutation for the Device entity.
func newDeviceMutation(c config, op Op, opts ...deviceOption) *DeviceMutation {
	m := &DeviceMutation{
		config:        c,
		op:            op,
		typ:           TypeDevice,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withDeviceID sets the ID field of the mutation.
func withDeviceID(id int) deviceOption {
	return func(m *DeviceMutation) {
		var (
			err   error
			once  sync.Once
			value *Device
		)
		m.oldValue = func(ctx context.Context) (*Device, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Device.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withDevice sets the old Device of the mutation.
func withDevice(node *Device) deviceOption {
	return func(m *DeviceMutation) {
		m.oldValue = func(context.Context) (*Device, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m DeviceMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m DeviceMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Device entities.
func (m *DeviceMutation) SetID(id int) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *DeviceMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *DeviceMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Device.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetSn sets the "sn" field.
func (m *DeviceMutation) SetSn(s string) {
	m.sn = &s
}

// Sn returns the value of the "sn" field in the mutation.
func (m *DeviceMutation) Sn() (r string, exists bool) {
	v := m.sn
	if v == nil {
		return
	}
	return *v, true
}

// OldSn returns the old "sn" field's value of the Device entity.
// If the Device object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DeviceMutation) OldSn(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSn is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSn requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSn: %w", err)
	}
	return oldValue.Sn, nil
}

// ResetSn resets all changes to the "sn" field.
func (m *DeviceMutation) ResetSn() {
	m.sn = nil
}

// SetProductID sets the "product_id" field.
func (m *DeviceMutation) SetProductID(i int) {
	m.product = &i
}

// ProductID returns the value of the "product_id" field in the mutation.
func (m *DeviceMutation) ProductID() (r int, exists bool) {
	v := m.product
	if v == nil {
		return
	}
	return *v, true
}

// OldProductID returns the old "product_id" field's value of the Device entity.
// If the Device object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DeviceMutation) OldProductID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProductID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProductID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProductID: %w", err)
	}
	return oldValue.ProductID, nil
}

// ResetProductID resets all changes to the "product_id" field.
func (m *DeviceMutation) ResetProductID() {
	m.product = nil
}

// SetLicenseTypeID sets the "license_type_id" field.
func (m *DeviceMutation) SetLicenseTypeID(i int) {
	m.license_type = &i
}

// LicenseTypeID returns the value of the "license_type_id" field in the mutation.
func (m *DeviceMutation) LicenseTypeID() (r int, exists bool) {
	v := m.license_type
	if v == nil {
		return
	}
	return *v, true
}

// OldLicenseTypeID returns the old "license_type_id" field's value of the Device entity.
// If the Device object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DeviceMutation) OldLicenseTypeID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLicenseTypeID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLicenseTypeID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLicenseTypeID: %w", err)
	}
	return oldValue.LicenseTypeID, nil
}

// ClearLicenseTypeID clears the value of the "license_type_id" field.
func (m *DeviceMutation) ClearLicenseTypeID() {
	m.license_type = nil
	m.clearedFields[device.FieldLicenseTypeID] = struct{}{}
}

// LicenseTypeIDCleared returns if the "license_type_id" field was cleared in this mutation.
func (m *DeviceMutation) LicenseTypeIDCleared() bool {
	_, ok := m.clearedFields[device.FieldLicenseTypeID]
	return ok
}

// ResetLicenseTypeID resets all changes to the "license_type_id" field.
func (m *DeviceMutation) ResetLicenseTypeID() {
	m.license_type = nil
	delete(m.clearedFields, device.FieldLicenseTypeID)
}

// SetOemTag sets the "oem_tag" field.
func (m *DeviceMutation) SetOemTag(s string) {
	m.oem_tag = &s
}

// OemTag returns the value of the "oem_tag" field in the mutation.
func (m *DeviceMutation) OemTag() (r string, exists bool) {
	v := m.oem_tag
	if v == nil {
		return
	}
	return *v, true
}

// OldOemTag returns the old "oem_tag" field's value of the Device entity.
// If the Device object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DeviceMutation) OldOemTag(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOemTag is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOemTag requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOemTag: %w", err)
	}
	return oldValue.OemTag, nil
}

// ClearOemTag clears the value of the "oem_tag" field.
func (m *DeviceMutation) ClearOemTag() {
	m.oem_tag = nil
	m.clearedFields[device.FieldOemTag] = struct{}{}
}

// OemTagCleared returns if the "oem_tag" field was cleared in this mutation.
func (m *DeviceMutation) OemTagCleared() bool {
	_, ok := m.clearedFields[device.FieldOemTag]
	return ok
}

// ResetOemTag resets all changes to the "oem_tag" field.
func (m *DeviceMutation) ResetOemTag() {
	m.oem_tag = nil
	delete(m.clearedFields, device.FieldOemTag)
}

// SetRemark sets the "remark" field.
func (m *DeviceMutation) SetRemark(s string) {
	m.remark = &s
}

// Remark returns the value of the "remark" field in the mutation.
func (m *DeviceMutation) Remark() (r string, exists bool) {
	v := m.remark
	if v == nil {
		return
	}
	return *v, true
}

// OldRemark returns the old "remark" field's value of the Device entity.
// If the Device object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DeviceMutation) OldRemark(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRemark is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRemark requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRemark: %w", err)
	}
	return oldValue.Remark, nil
}

// ClearRemark clears the value of the "remark" field.
func (m *DeviceMutation) ClearRemark() {
	m.remark = nil
	m.clearedFields[device.FieldRemark] = struct{}{}
}

// RemarkCleared returns if the "remark" field was cleared in this mutation.
func (m *DeviceMutation) RemarkCleared() bool {
	_, ok := m.clearedFields[device.FieldRemark]
	return ok
}

// ResetRemark resets all changes to the "remark" field.
func (m *DeviceMutation) ResetRemark() {
	m.remark = nil
	delete(m.clearedFields, device.FieldRemark)
}

// SetCreatedAt sets the "created_at" field.
func (m *DeviceMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *DeviceMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Device entity.
// If the Device object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DeviceMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *DeviceMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetCreatedBy sets the "created_by" field.
func (m *DeviceMutation) SetCreatedBy(i int) {
	m.creator = &i
}

// CreatedBy returns the value of the "created_by" field in the mutation.
func (m *DeviceMutation) CreatedBy() (r int, exists bool) {
	v := m.creator
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedBy returns the old "created_by" field's value of the Device entity.
// If the Device object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DeviceMutation) OldCreatedBy(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedBy: %w", err)
	}
	return oldValue.CreatedBy, nil
}

// ClearCreatedBy clears the value of the "created_by" field.
func (m *DeviceMutation) ClearCreatedBy() {
	m.creator = nil
	m.clearedFields[device.FieldCreatedBy] = struct{}{}
}

// CreatedByCleared returns if the "created_by" field was cleared in this mutation.
func (m *DeviceMutation) CreatedByCleared() bool {
	_, ok := m.clearedFields[device.FieldCreatedBy]
	return ok
}

// ResetCreatedBy resets all changes to the "created_by" field.
func (m *DeviceMutation) ResetCreatedBy() {
	m.creator = nil
	delete(m.clearedFields, device.FieldCreatedBy)
}

// SetUpdatedAt sets the "updated_at" field.
func (m *DeviceMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *DeviceMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Device entity.
// If the Device object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DeviceMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *DeviceMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetUpdatedBy sets the "updated_by" field.
func (m *DeviceMutation) SetUpdatedBy(i int) {
	m.updater = &i
}

// UpdatedBy returns the value of the "updated_by" field in the mutation.
func (m *DeviceMutation) UpdatedBy() (r int, exists bool) {
	v := m.updater
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedBy returns the old "updated_by" field's value of the Device entity.
// If the Device object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DeviceMutation) OldUpdatedBy(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedBy: %w", err)
	}
	return oldValue.UpdatedBy, nil
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (m *DeviceMutation) ClearUpdatedBy() {
	m.updater = nil
	m.clearedFields[device.FieldUpdatedBy] = struct{}{}
}

// UpdatedByCleared returns if the "updated_by" field was cleared in this mutation.
func (m *DeviceMutation) UpdatedByCleared() bool {
	_, ok := m.clearedFields[device.FieldUpdatedBy]
	return ok
}

// ResetUpdatedBy resets all changes to the "updated_by" field.
func (m *DeviceMutation) ResetUpdatedBy() {
	m.updater = nil
	delete(m.clearedFields, device.FieldUpdatedBy)
}

// ClearProduct clears the "product" edge to the Product entity.
func (m *DeviceMutation) ClearProduct() {
	m.clearedproduct = true
	m.clearedFields[device.FieldProductID] = struct{}{}
}

// ProductCleared reports if the "product" edge to the Product entity was cleared.
func (m *DeviceMutation) ProductCleared() bool {
	return m.clearedproduct
}

// ProductIDs returns the "product" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ProductID instead. It exists only for internal usage by the builders.
func (m *DeviceMutation) ProductIDs() (ids []int) {
	if id := m.product; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetProduct resets all changes to the "product" edge.
func (m *DeviceMutation) ResetProduct() {
	m.product = nil
	m.clearedproduct = false
}

// ClearLicenseType clears the "license_type" edge to the LicenseType entity.
func (m *DeviceMutation) ClearLicenseType() {
	m.clearedlicense_type = true
	m.clearedFields[device.FieldLicenseTypeID] = struct{}{}
}

// LicenseTypeCleared reports if the "license_type" edge to the LicenseType entity was cleared.
func (m *DeviceMutation) LicenseTypeCleared() bool {
	return m.LicenseTypeIDCleared() || m.clearedlicense_type
}

// LicenseTypeIDs returns the "license_type" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// LicenseTypeID instead. It exists only for internal usage by the builders.
func (m *DeviceMutation) LicenseTypeIDs() (ids []int) {
	if id := m.license_type; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetLicenseType resets all changes to the "license_type" edge.
func (m *DeviceMutation) ResetLicenseType() {
	m.license_type = nil
	m.clearedlicense_type = false
}

// SetCreatorID sets the "creator" edge to the User entity by id.
func (m *DeviceMutation) SetCreatorID(id int) {
	m.creator = &id
}

// ClearCreator clears the "creator" edge to the User entity.
func (m *DeviceMutation) ClearCreator() {
	m.clearedcreator = true
	m.clearedFields[device.FieldCreatedBy] = struct{}{}
}

// CreatorCleared reports if the "creator" edge to the User entity was cleared.
func (m *DeviceMutation) CreatorCleared() bool {
	return m.CreatedByCleared() || m.clearedcreator
}

// CreatorID returns the "creator" edge ID in the mutation.
func (m *DeviceMutation) CreatorID() (id int, exists bool) {
	if m.creator != nil {
		return *m.creator, true
	}
	return
}

// CreatorIDs returns the "creator" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// CreatorID instead. It exists only for internal usage by the builders.
func (m *DeviceMutation) CreatorIDs() (ids []int) {
	if id := m.creator; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetCreator resets all changes to the "creator" edge.
func (m *DeviceMutation) ResetCreator() {
	m.creator = nil
	m.clearedcreator = false
}

// SetUpdaterID sets the "updater" edge to the User entity by id.
func (m *DeviceMutation) SetUpdaterID(id int) {
	m.updater = &id
}

// ClearUpdater clears the "updater" edge to the User entity.
func (m *DeviceMutation) ClearUpdater() {
	m.clearedupdater = true
	m.clearedFields[device.FieldUpdatedBy] = struct{}{}
}

// UpdaterCleared reports if the "updater" edge to the User entity was cleared.
func (m *DeviceMutation) UpdaterCleared() bool {
	return m.UpdatedByCleared() || m.clearedupdater
}

// UpdaterID returns the "updater" edge ID in the mutation.
func (m *DeviceMutation) UpdaterID() (id int, exists bool) {
	if m.updater != nil {
		return *m.updater, true
	}
	return
}

// UpdaterIDs returns the "updater" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UpdaterID instead. It exists only for internal usage by the builders.
func (m *DeviceMutation) UpdaterIDs() (ids []int) {
	if id := m.updater; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUpdater resets all changes to the "updater" edge.
func (m *DeviceMutation) ResetUpdater() {
	m.updater = nil
	m.clearedupdater = false
}

// Where appends a list predicates to the DeviceMutation builder.
func (m *DeviceMutation) Where(ps ...predicate.Device) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the DeviceMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *DeviceMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Device, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *DeviceMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *DeviceMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Device).
func (m *DeviceMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *DeviceMutation) Fields() []string {
	fields := make([]string, 0, 9)
	if m.sn != nil {
		fields = append(fields, device.FieldSn)
	}
	if m.product != nil {
		fields = append(fields, device.FieldProductID)
	}
	if m.license_type != nil {
		fields = append(fields, device.FieldLicenseTypeID)
	}
	if m.oem_tag != nil {
		fields = append(fields, device.FieldOemTag)
	}
	if m.remark != nil {
		fields = append(fields, device.FieldRemark)
	}
	if m.created_at != nil {
		fields = append(fields, device.FieldCreatedAt)
	}
	if m.creator != nil {
		fields = append(fields, device.FieldCreatedBy)
	}
	if m.updated_at != nil {
		fields = append(fields, device.FieldUpdatedAt)
	}
	if m.updater != nil {
		fields = append(fields, device.FieldUpdatedBy)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *DeviceMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case device.FieldSn:
		return m.Sn()
	case device.FieldProductID:
		return m.ProductID()
	case device.FieldLicenseTypeID:
		return m.LicenseTypeID()
	case device.FieldOemTag:
		return m.OemTag()
	case device.FieldRemark:
		return m.Remark()
	case device.FieldCreatedAt:
		return m.CreatedAt()
	case device.FieldCreatedBy:
		return m.CreatedBy()
	case device.FieldUpdatedAt:
		return m.UpdatedAt()
	case device.FieldUpdatedBy:
		return m.UpdatedBy()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *DeviceMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case device.FieldSn:
		return m.OldSn(ctx)
	case device.FieldProductID:
		return m.OldProductID(ctx)
	case device.FieldLicenseTypeID:
		return m.OldLicenseTypeID(ctx)
	case device.FieldOemTag:
		return m.OldOemTag(ctx)
	case device.FieldRemark:
		return m.OldRemark(ctx)
	case device.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case device.FieldCreatedBy:
		return m.OldCreatedBy(ctx)
	case device.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case device.FieldUpdatedBy:
		return m.OldUpdatedBy(ctx)
	}
	return nil, fmt.Errorf("unknown Device field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DeviceMutation) SetField(name string, value ent.Value) error {
	switch name {
	case device.FieldSn:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSn(v)
		return nil
	case device.FieldProductID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProductID(v)
		return nil
	case device.FieldLicenseTypeID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLicenseTypeID(v)
		return nil
	case device.FieldOemTag:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOemTag(v)
		return nil
	case device.FieldRemark:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRemark(v)
		return nil
	case device.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case device.FieldCreatedBy:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedBy(v)
		return nil
	case device.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case device.FieldUpdatedBy:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedBy(v)
		return nil
	}
	return fmt.Errorf("unknown Device field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *DeviceMutation) AddedFields() []string {
	var fields []string
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *DeviceMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DeviceMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Device numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *DeviceMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(device.FieldLicenseTypeID) {
		fields = append(fields, device.FieldLicenseTypeID)
	}
	if m.FieldCleared(device.FieldOemTag) {
		fields = append(fields, device.FieldOemTag)
	}
	if m.FieldCleared(device.FieldRemark) {
		fields = append(fields, device.FieldRemark)
	}
	if m.FieldCleared(device.FieldCreatedBy) {
		fields = append(fields, device.FieldCreatedBy)
	}
	if m.FieldCleared(device.FieldUpdatedBy) {
		fields = append(fields, device.FieldUpdatedBy)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *DeviceMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *DeviceMutation) ClearField(name string) error {
	switch name {
	case device.FieldLicenseTypeID:
		m.ClearLicenseTypeID()
		return nil
	case device.FieldOemTag:
		m.ClearOemTag()
		return nil
	case device.FieldRemark:
		m.ClearRemark()
		return nil
	case device.FieldCreatedBy:
		m.ClearCreatedBy()
		return nil
	case device.FieldUpdatedBy:
		m.ClearUpdatedBy()
		return nil
	}
	return fmt.Errorf("unknown Device nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *DeviceMutation) ResetField(name string) error {
	switch name {
	case device.FieldSn:
		m.ResetSn()
		return nil
	case device.FieldProductID:
		m.ResetProductID()
		return nil
	case device.FieldLicenseTypeID:
		m.ResetLicenseTypeID()
		return nil
	case device.FieldOemTag:
		m.ResetOemTag()
		return nil
	case device.FieldRemark:
		m.ResetRemark()
		return nil
	case device.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case device.FieldCreatedBy:
		m.ResetCreatedBy()
		return nil
	case device.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case device.FieldUpdatedBy:
		m.ResetUpdatedBy()
		return nil
	}
	return fmt.Errorf("unknown Device field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *DeviceMutation) AddedEdges() []string {
	edges := make([]string, 0, 4)
	if m.product != nil {
		edges = append(edges, device.EdgeProduct)
	}
	if m.license_type != nil {
		edges = append(edges, device.EdgeLicenseType)
	}
	if m.creator != nil {
		edges = append(edges, device.EdgeCreator)
	}
	if m.updater != nil {
		edges = append(edges, device.EdgeUpdater)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *DeviceMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case device.EdgeProduct:
		if id := m.product; id != nil {
			return []ent.Value{*id}
		}
	case device.EdgeLicenseType:
		if id := m.license_type; id != nil {
			return []ent.Value{*id}
		}
	case device.EdgeCreator:
		if id := m.creator; id != nil {
			return []ent.Value{*id}
		}
	case device.EdgeUpdater:
		if id := m.updater; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *DeviceMutation) RemovedEdges() []string {
	edges := make([]string, 0, 4)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *DeviceMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *DeviceMutation) ClearedEdges() []string {
	edges := make([]string, 0, 4)
	if m.clearedproduct {
		edges = append(edges, device.EdgeProduct)
	}
	if m.clearedlicense_type {
		edges = append(edges, device.EdgeLicenseType)
	}
	if m.clearedcreator {
		edges = append(edges, device.EdgeCreator)
	}
	if m.clearedupdater {
		edges = append(edges, device.EdgeUpdater)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *DeviceMutation) EdgeCleared(name string) bool {
	switch name {
	case device.EdgeProduct:
		return m.clearedproduct
	case device.EdgeLicenseType:
		return m.clearedlicense_type
	case device.EdgeCreator:
		return m.clearedcreator
	case device.EdgeUpdater:
		return m.clearedupdater
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *DeviceMutation) ClearEdge(name string) error {
	switch name {
	case device.EdgeProduct:
		m.ClearProduct()
		return nil
	case device.EdgeLicenseType:
		m.ClearLicenseType()
		return nil
	case device.EdgeCreator:
		m.ClearCreator()
		return nil
	case device.EdgeUpdater:
		m.ClearUpdater()
		return nil
	}
	return fmt.Errorf("unknown Device unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *DeviceMutation) ResetEdge(name string) error {
	switch name {
	case device.EdgeProduct:
		m.ResetProduct()
		return nil
	case device.EdgeLicenseType:
		m.ResetLicenseType()
		return nil
	case device.EdgeCreator:
		m.ResetCreator()
		return nil
	case device.EdgeUpdater:
		m.ResetUpdater()
		return nil
	}
	return fmt.Errorf("unknown Device edge %s", name)
}

// FirmwareVersionMutation represents an operation that mutates the FirmwareVersion nodes in the graph.
type FirmwareVersionMutation struct {
	config
	op                       Op
	typ                      string
	id                       *int
	version                  *string
	release_date             *time.Time
	remark                   *string
	created_at               *time.Time
	updated_at               *time.Time
	clearedFields            map[string]struct{}
	software_versions        map[int]struct{}
	removedsoftware_versions map[int]struct{}
	clearedsoftware_versions bool
	product                  *int
	clearedproduct           bool
	creator                  *int
	clearedcreator           bool
	done                     bool
	oldValue                 func(context.Context) (*FirmwareVersion, error)
	predicates               []predicate.FirmwareVersion
}

var _ ent.Mutation = (*FirmwareVersionMutation)(nil)

// firmwareversionOption allows management of the mutation configuration using functional options.
type firmwareversionOption func(*FirmwareVersionMutation)

// newFirmwareVersionMutation creates new mutation for the FirmwareVersion entity.
func newFirmwareVersionMutation(c config, op Op, opts ...firmwareversionOption) *FirmwareVersionMutation {
	m := &FirmwareVersionMutation{
		config:        c,
		op:            op,
		typ:           TypeFirmwareVersion,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withFirmwareVersionID sets the ID field of the mutation.
func withFirmwareVersionID(id int) firmwareversionOption {
	return func(m *FirmwareVersionMutation) {
		var (
			err   error
			once  sync.Once
			value *FirmwareVersion
		)
		m.oldValue = func(ctx context.Context) (*FirmwareVersion, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().FirmwareVersion.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withFirmwareVersion sets the old FirmwareVersion of the mutation.
func withFirmwareVersion(node *FirmwareVersion) firmwareversionOption {
	return func(m *FirmwareVersionMutation) {
		m.oldValue = func(context.Context) (*FirmwareVersion, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m FirmwareVersionMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m FirmwareVersionMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *FirmwareVersionMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *FirmwareVersionMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().FirmwareVersion.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetProductID sets the "product_id" field.
func (m *FirmwareVersionMutation) SetProductID(i int) {
	m.product = &i
}

// ProductID returns the value of the "product_id" field in the mutation.
func (m *FirmwareVersionMutation) ProductID() (r int, exists bool) {
	v := m.product
	if v == nil {
		return
	}
	return *v, true
}

// OldProductID returns the old "product_id" field's value of the FirmwareVersion entity.
// If the FirmwareVersion object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FirmwareVersionMutation) OldProductID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProductID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProductID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProductID: %w", err)
	}
	return oldValue.ProductID, nil
}

// ResetProductID resets all changes to the "product_id" field.
func (m *FirmwareVersionMutation) ResetProductID() {
	m.product = nil
}

// SetVersion sets the "version" field.
func (m *FirmwareVersionMutation) SetVersion(s string) {
	m.version = &s
}

// Version returns the value of the "version" field in the mutation.
func (m *FirmwareVersionMutation) Version() (r string, exists bool) {
	v := m.version
	if v == nil {
		return
	}
	return *v, true
}

// OldVersion returns the old "version" field's value of the FirmwareVersion entity.
// If the FirmwareVersion object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FirmwareVersionMutation) OldVersion(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldVersion is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldVersion requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVersion: %w", err)
	}
	return oldValue.Version, nil
}

// ResetVersion resets all changes to the "version" field.
func (m *FirmwareVersionMutation) ResetVersion() {
	m.version = nil
}

// SetReleaseDate sets the "release_date" field.
func (m *FirmwareVersionMutation) SetReleaseDate(t time.Time) {
	m.release_date = &t
}

// ReleaseDate returns the value of the "release_date" field in the mutation.
func (m *FirmwareVersionMutation) ReleaseDate() (r time.Time, exists bool) {
	v := m.release_date
	if v == nil {
		return
	}
	return *v, true
}

// OldReleaseDate returns the old "release_date" field's value of the FirmwareVersion entity.
// If the FirmwareVersion object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FirmwareVersionMutation) OldReleaseDate(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldReleaseDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldReleaseDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldReleaseDate: %w", err)
	}
	return oldValue.ReleaseDate, nil
}

// ResetReleaseDate resets all changes to the "release_date" field.
func (m *FirmwareVersionMutation) ResetReleaseDate() {
	m.release_date = nil
}

// SetRemark sets the "remark" field.
func (m *FirmwareVersionMutation) SetRemark(s string) {
	m.remark = &s
}

// Remark returns the value of the "remark" field in the mutation.
func (m *FirmwareVersionMutation) Remark() (r string, exists bool) {
	v := m.remark
	if v == nil {
		return
	}
	return *v, true
}

// OldRemark returns the old "remark" field's value of the FirmwareVersion entity.
// If the FirmwareVersion object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FirmwareVersionMutation) OldRemark(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRemark is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRemark requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRemark: %w", err)
	}
	return oldValue.Remark, nil
}

// ClearRemark clears the value of the "remark" field.
func (m *FirmwareVersionMutation) ClearRemark() {
	m.remark = nil
	m.clearedFields[firmwareversion.FieldRemark] = struct{}{}
}

// RemarkCleared returns if the "remark" field was cleared in this mutation.
func (m *FirmwareVersionMutation) RemarkCleared() bool {
	_, ok := m.clearedFields[firmwareversion.FieldRemark]
	return ok
}

// ResetRemark resets all changes to the "remark" field.
func (m *FirmwareVersionMutation) ResetRemark() {
	m.remark = nil
	delete(m.clearedFields, firmwareversion.FieldRemark)
}

// SetCreatedBy sets the "created_by" field.
func (m *FirmwareVersionMutation) SetCreatedBy(i int) {
	m.creator = &i
}

// CreatedBy returns the value of the "created_by" field in the mutation.
func (m *FirmwareVersionMutation) CreatedBy() (r int, exists bool) {
	v := m.creator
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedBy returns the old "created_by" field's value of the FirmwareVersion entity.
// If the FirmwareVersion object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FirmwareVersionMutation) OldCreatedBy(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedBy: %w", err)
	}
	return oldValue.CreatedBy, nil
}

// ResetCreatedBy resets all changes to the "created_by" field.
func (m *FirmwareVersionMutation) ResetCreatedBy() {
	m.creator = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *FirmwareVersionMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *FirmwareVersionMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the FirmwareVersion entity.
// If the FirmwareVersion object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FirmwareVersionMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *FirmwareVersionMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *FirmwareVersionMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *FirmwareVersionMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the FirmwareVersion entity.
// If the FirmwareVersion object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FirmwareVersionMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *FirmwareVersionMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// AddSoftwareVersionIDs adds the "software_versions" edge to the SoftwareVersion entity by ids.
func (m *FirmwareVersionMutation) AddSoftwareVersionIDs(ids ...int) {
	if m.software_versions == nil {
		m.software_versions = make(map[int]struct{})
	}
	for i := range ids {
		m.software_versions[ids[i]] = struct{}{}
	}
}

// ClearSoftwareVersions clears the "software_versions" edge to the SoftwareVersion entity.
func (m *FirmwareVersionMutation) ClearSoftwareVersions() {
	m.clearedsoftware_versions = true
}

// SoftwareVersionsCleared reports if the "software_versions" edge to the SoftwareVersion entity was cleared.
func (m *FirmwareVersionMutation) SoftwareVersionsCleared() bool {
	return m.clearedsoftware_versions
}

// RemoveSoftwareVersionIDs removes the "software_versions" edge to the SoftwareVersion entity by IDs.
func (m *FirmwareVersionMutation) RemoveSoftwareVersionIDs(ids ...int) {
	if m.removedsoftware_versions == nil {
		m.removedsoftware_versions = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.software_versions, ids[i])
		m.removedsoftware_versions[ids[i]] = struct{}{}
	}
}

// RemovedSoftwareVersions returns the removed IDs of the "software_versions" edge to the SoftwareVersion entity.
func (m *FirmwareVersionMutation) RemovedSoftwareVersionsIDs() (ids []int) {
	for id := range m.removedsoftware_versions {
		ids = append(ids, id)
	}
	return
}

// SoftwareVersionsIDs returns the "software_versions" edge IDs in the mutation.
func (m *FirmwareVersionMutation) SoftwareVersionsIDs() (ids []int) {
	for id := range m.software_versions {
		ids = append(ids, id)
	}
	return
}

// ResetSoftwareVersions resets all changes to the "software_versions" edge.
func (m *FirmwareVersionMutation) ResetSoftwareVersions() {
	m.software_versions = nil
	m.clearedsoftware_versions = false
	m.removedsoftware_versions = nil
}

// ClearProduct clears the "product" edge to the Product entity.
func (m *FirmwareVersionMutation) ClearProduct() {
	m.clearedproduct = true
	m.clearedFields[firmwareversion.FieldProductID] = struct{}{}
}

// ProductCleared reports if the "product" edge to the Product entity was cleared.
func (m *FirmwareVersionMutation) ProductCleared() bool {
	return m.clearedproduct
}

// ProductIDs returns the "product" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ProductID instead. It exists only for internal usage by the builders.
func (m *FirmwareVersionMutation) ProductIDs() (ids []int) {
	if id := m.product; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetProduct resets all changes to the "product" edge.
func (m *FirmwareVersionMutation) ResetProduct() {
	m.product = nil
	m.clearedproduct = false
}

// SetCreatorID sets the "creator" edge to the User entity by id.
func (m *FirmwareVersionMutation) SetCreatorID(id int) {
	m.creator = &id
}

// ClearCreator clears the "creator" edge to the User entity.
func (m *FirmwareVersionMutation) ClearCreator() {
	m.clearedcreator = true
	m.clearedFields[firmwareversion.FieldCreatedBy] = struct{}{}
}

// CreatorCleared reports if the "creator" edge to the User entity was cleared.
func (m *FirmwareVersionMutation) CreatorCleared() bool {
	return m.clearedcreator
}

// CreatorID returns the "creator" edge ID in the mutation.
func (m *FirmwareVersionMutation) CreatorID() (id int, exists bool) {
	if m.creator != nil {
		return *m.creator, true
	}
	return
}

// CreatorIDs returns the "creator" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// CreatorID instead. It exists only for internal usage by the builders.
func (m *FirmwareVersionMutation) CreatorIDs() (ids []int) {
	if id := m.creator; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetCreator resets all changes to the "creator" edge.
func (m *FirmwareVersionMutation) ResetCreator() {
	m.creator = nil
	m.clearedcreator = false
}

// Where appends a list predicates to the FirmwareVersionMutation builder.
func (m *FirmwareVersionMutation) Where(ps ...predicate.FirmwareVersion) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the FirmwareVersionMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *FirmwareVersionMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.FirmwareVersion, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *FirmwareVersionMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *FirmwareVersionMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (FirmwareVersion).
func (m *FirmwareVersionMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *FirmwareVersionMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.product != nil {
		fields = append(fields, firmwareversion.FieldProductID)
	}
	if m.version != nil {
		fields = append(fields, firmwareversion.FieldVersion)
	}
	if m.release_date != nil {
		fields = append(fields, firmwareversion.FieldReleaseDate)
	}
	if m.remark != nil {
		fields = append(fields, firmwareversion.FieldRemark)
	}
	if m.creator != nil {
		fields = append(fields, firmwareversion.FieldCreatedBy)
	}
	if m.created_at != nil {
		fields = append(fields, firmwareversion.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, firmwareversion.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *FirmwareVersionMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case firmwareversion.FieldProductID:
		return m.ProductID()
	case firmwareversion.FieldVersion:
		return m.Version()
	case firmwareversion.FieldReleaseDate:
		return m.ReleaseDate()
	case firmwareversion.FieldRemark:
		return m.Remark()
	case firmwareversion.FieldCreatedBy:
		return m.CreatedBy()
	case firmwareversion.FieldCreatedAt:
		return m.CreatedAt()
	case firmwareversion.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *FirmwareVersionMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case firmwareversion.FieldProductID:
		return m.OldProductID(ctx)
	case firmwareversion.FieldVersion:
		return m.OldVersion(ctx)
	case firmwareversion.FieldReleaseDate:
		return m.OldReleaseDate(ctx)
	case firmwareversion.FieldRemark:
		return m.OldRemark(ctx)
	case firmwareversion.FieldCreatedBy:
		return m.OldCreatedBy(ctx)
	case firmwareversion.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case firmwareversion.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown FirmwareVersion field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FirmwareVersionMutation) SetField(name string, value ent.Value) error {
	switch name {
	case firmwareversion.FieldProductID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProductID(v)
		return nil
	case firmwareversion.FieldVersion:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVersion(v)
		return nil
	case firmwareversion.FieldReleaseDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetReleaseDate(v)
		return nil
	case firmwareversion.FieldRemark:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRemark(v)
		return nil
	case firmwareversion.FieldCreatedBy:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedBy(v)
		return nil
	case firmwareversion.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case firmwareversion.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown FirmwareVersion field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *FirmwareVersionMutation) AddedFields() []string {
	var fields []string
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *FirmwareVersionMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FirmwareVersionMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown FirmwareVersion numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *FirmwareVersionMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(firmwareversion.FieldRemark) {
		fields = append(fields, firmwareversion.FieldRemark)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *FirmwareVersionMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *FirmwareVersionMutation) ClearField(name string) error {
	switch name {
	case firmwareversion.FieldRemark:
		m.ClearRemark()
		return nil
	}
	return fmt.Errorf("unknown FirmwareVersion nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *FirmwareVersionMutation) ResetField(name string) error {
	switch name {
	case firmwareversion.FieldProductID:
		m.ResetProductID()
		return nil
	case firmwareversion.FieldVersion:
		m.ResetVersion()
		return nil
	case firmwareversion.FieldReleaseDate:
		m.ResetReleaseDate()
		return nil
	case firmwareversion.FieldRemark:
		m.ResetRemark()
		return nil
	case firmwareversion.FieldCreatedBy:
		m.ResetCreatedBy()
		return nil
	case firmwareversion.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case firmwareversion.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown FirmwareVersion field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *FirmwareVersionMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.software_versions != nil {
		edges = append(edges, firmwareversion.EdgeSoftwareVersions)
	}
	if m.product != nil {
		edges = append(edges, firmwareversion.EdgeProduct)
	}
	if m.creator != nil {
		edges = append(edges, firmwareversion.EdgeCreator)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *FirmwareVersionMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case firmwareversion.EdgeSoftwareVersions:
		ids := make([]ent.Value, 0, len(m.software_versions))
		for id := range m.software_versions {
			ids = append(ids, id)
		}
		return ids
	case firmwareversion.EdgeProduct:
		if id := m.product; id != nil {
			return []ent.Value{*id}
		}
	case firmwareversion.EdgeCreator:
		if id := m.creator; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *FirmwareVersionMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removedsoftware_versions != nil {
		edges = append(edges, firmwareversion.EdgeSoftwareVersions)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *FirmwareVersionMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case firmwareversion.EdgeSoftwareVersions:
		ids := make([]ent.Value, 0, len(m.removedsoftware_versions))
		for id := range m.removedsoftware_versions {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *FirmwareVersionMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedsoftware_versions {
		edges = append(edges, firmwareversion.EdgeSoftwareVersions)
	}
	if m.clearedproduct {
		edges = append(edges, firmwareversion.EdgeProduct)
	}
	if m.clearedcreator {
		edges = append(edges, firmwareversion.EdgeCreator)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *FirmwareVersionMutation) EdgeCleared(name string) bool {
	switch name {
	case firmwareversion.EdgeSoftwareVersions:
		return m.clearedsoftware_versions
	case firmwareversion.EdgeProduct:
		return m.clearedproduct
	case firmwareversion.EdgeCreator:
		return m.clearedcreator
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *FirmwareVersionMutation) ClearEdge(name string) error {
	switch name {
	case firmwareversion.EdgeProduct:
		m.ClearProduct()
		return nil
	case firmwareversion.EdgeCreator:
		m.ClearCreator()
		return nil
	}
	return fmt.Errorf("unknown FirmwareVersion unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *FirmwareVersionMutation) ResetEdge(name string) error {
	switch name {
	case firmwareversion.EdgeSoftwareVersions:
		m.ResetSoftwareVersions()
		return nil
	case firmwareversion.EdgeProduct:
		m.ResetProduct()
		return nil
	case firmwareversion.EdgeCreator:
		m.ResetCreator()
		return nil
	}
	return fmt.Errorf("unknown FirmwareVersion edge %s", name)
}

// LicenseTypeMutation represents an operation that mutates the LicenseType nodes in the graph.
type LicenseTypeMutation struct {
	config
	op                           Op
	typ                          string
	id                           *int
	type_name                    *string
	license_type                 *string
	created_at                   *time.Time
	updated_at                   *time.Time
	clearedFields                map[string]struct{}
	product                      *int
	clearedproduct               bool
	features                     map[int]struct{}
	removedfeatures              map[int]struct{}
	clearedfeatures              bool
	devices                      map[int]struct{}
	removeddevices               map[int]struct{}
	cleareddevices               bool
	license_type_features        map[int]struct{}
	removedlicense_type_features map[int]struct{}
	clearedlicense_type_features bool
	done                         bool
	oldValue                     func(context.Context) (*LicenseType, error)
	predicates                   []predicate.LicenseType
}

var _ ent.Mutation = (*LicenseTypeMutation)(nil)

// licensetypeOption allows management of the mutation configuration using functional options.
type licensetypeOption func(*LicenseTypeMutation)

// newLicenseTypeMutation creates new mutation for the LicenseType entity.
func newLicenseTypeMutation(c config, op Op, opts ...licensetypeOption) *LicenseTypeMutation {
	m := &LicenseTypeMutation{
		config:        c,
		op:            op,
		typ:           TypeLicenseType,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withLicenseTypeID sets the ID field of the mutation.
func withLicenseTypeID(id int) licensetypeOption {
	return func(m *LicenseTypeMutation) {
		var (
			err   error
			once  sync.Once
			value *LicenseType
		)
		m.oldValue = func(ctx context.Context) (*LicenseType, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().LicenseType.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withLicenseType sets the old LicenseType of the mutation.
func withLicenseType(node *LicenseType) licensetypeOption {
	return func(m *LicenseTypeMutation) {
		m.oldValue = func(context.Context) (*LicenseType, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m LicenseTypeMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m LicenseTypeMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of LicenseType entities.
func (m *LicenseTypeMutation) SetID(id int) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *LicenseTypeMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *LicenseTypeMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().LicenseType.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetTypeName sets the "type_name" field.
func (m *LicenseTypeMutation) SetTypeName(s string) {
	m.type_name = &s
}

// TypeName returns the value of the "type_name" field in the mutation.
func (m *LicenseTypeMutation) TypeName() (r string, exists bool) {
	v := m.type_name
	if v == nil {
		return
	}
	return *v, true
}

// OldTypeName returns the old "type_name" field's value of the LicenseType entity.
// If the LicenseType object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LicenseTypeMutation) OldTypeName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTypeName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTypeName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTypeName: %w", err)
	}
	return oldValue.TypeName, nil
}

// ResetTypeName resets all changes to the "type_name" field.
func (m *LicenseTypeMutation) ResetTypeName() {
	m.type_name = nil
}

// SetLicenseType sets the "license_type" field.
func (m *LicenseTypeMutation) SetLicenseType(s string) {
	m.license_type = &s
}

// LicenseType returns the value of the "license_type" field in the mutation.
func (m *LicenseTypeMutation) LicenseType() (r string, exists bool) {
	v := m.license_type
	if v == nil {
		return
	}
	return *v, true
}

// OldLicenseType returns the old "license_type" field's value of the LicenseType entity.
// If the LicenseType object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LicenseTypeMutation) OldLicenseType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLicenseType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLicenseType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLicenseType: %w", err)
	}
	return oldValue.LicenseType, nil
}

// ResetLicenseType resets all changes to the "license_type" field.
func (m *LicenseTypeMutation) ResetLicenseType() {
	m.license_type = nil
}

// SetProductID sets the "product_id" field.
func (m *LicenseTypeMutation) SetProductID(i int) {
	m.product = &i
}

// ProductID returns the value of the "product_id" field in the mutation.
func (m *LicenseTypeMutation) ProductID() (r int, exists bool) {
	v := m.product
	if v == nil {
		return
	}
	return *v, true
}

// OldProductID returns the old "product_id" field's value of the LicenseType entity.
// If the LicenseType object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LicenseTypeMutation) OldProductID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProductID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProductID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProductID: %w", err)
	}
	return oldValue.ProductID, nil
}

// ResetProductID resets all changes to the "product_id" field.
func (m *LicenseTypeMutation) ResetProductID() {
	m.product = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *LicenseTypeMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *LicenseTypeMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the LicenseType entity.
// If the LicenseType object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LicenseTypeMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *LicenseTypeMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *LicenseTypeMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *LicenseTypeMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the LicenseType entity.
// If the LicenseType object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LicenseTypeMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *LicenseTypeMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// ClearProduct clears the "product" edge to the Product entity.
func (m *LicenseTypeMutation) ClearProduct() {
	m.clearedproduct = true
	m.clearedFields[licensetype.FieldProductID] = struct{}{}
}

// ProductCleared reports if the "product" edge to the Product entity was cleared.
func (m *LicenseTypeMutation) ProductCleared() bool {
	return m.clearedproduct
}

// ProductIDs returns the "product" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ProductID instead. It exists only for internal usage by the builders.
func (m *LicenseTypeMutation) ProductIDs() (ids []int) {
	if id := m.product; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetProduct resets all changes to the "product" edge.
func (m *LicenseTypeMutation) ResetProduct() {
	m.product = nil
	m.clearedproduct = false
}

// AddFeatureIDs adds the "features" edge to the ProductFeature entity by ids.
func (m *LicenseTypeMutation) AddFeatureIDs(ids ...int) {
	if m.features == nil {
		m.features = make(map[int]struct{})
	}
	for i := range ids {
		m.features[ids[i]] = struct{}{}
	}
}

// ClearFeatures clears the "features" edge to the ProductFeature entity.
func (m *LicenseTypeMutation) ClearFeatures() {
	m.clearedfeatures = true
}

// FeaturesCleared reports if the "features" edge to the ProductFeature entity was cleared.
func (m *LicenseTypeMutation) FeaturesCleared() bool {
	return m.clearedfeatures
}

// RemoveFeatureIDs removes the "features" edge to the ProductFeature entity by IDs.
func (m *LicenseTypeMutation) RemoveFeatureIDs(ids ...int) {
	if m.removedfeatures == nil {
		m.removedfeatures = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.features, ids[i])
		m.removedfeatures[ids[i]] = struct{}{}
	}
}

// RemovedFeatures returns the removed IDs of the "features" edge to the ProductFeature entity.
func (m *LicenseTypeMutation) RemovedFeaturesIDs() (ids []int) {
	for id := range m.removedfeatures {
		ids = append(ids, id)
	}
	return
}

// FeaturesIDs returns the "features" edge IDs in the mutation.
func (m *LicenseTypeMutation) FeaturesIDs() (ids []int) {
	for id := range m.features {
		ids = append(ids, id)
	}
	return
}

// ResetFeatures resets all changes to the "features" edge.
func (m *LicenseTypeMutation) ResetFeatures() {
	m.features = nil
	m.clearedfeatures = false
	m.removedfeatures = nil
}

// AddDeviceIDs adds the "devices" edge to the Device entity by ids.
func (m *LicenseTypeMutation) AddDeviceIDs(ids ...int) {
	if m.devices == nil {
		m.devices = make(map[int]struct{})
	}
	for i := range ids {
		m.devices[ids[i]] = struct{}{}
	}
}

// ClearDevices clears the "devices" edge to the Device entity.
func (m *LicenseTypeMutation) ClearDevices() {
	m.cleareddevices = true
}

// DevicesCleared reports if the "devices" edge to the Device entity was cleared.
func (m *LicenseTypeMutation) DevicesCleared() bool {
	return m.cleareddevices
}

// RemoveDeviceIDs removes the "devices" edge to the Device entity by IDs.
func (m *LicenseTypeMutation) RemoveDeviceIDs(ids ...int) {
	if m.removeddevices == nil {
		m.removeddevices = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.devices, ids[i])
		m.removeddevices[ids[i]] = struct{}{}
	}
}

// RemovedDevices returns the removed IDs of the "devices" edge to the Device entity.
func (m *LicenseTypeMutation) RemovedDevicesIDs() (ids []int) {
	for id := range m.removeddevices {
		ids = append(ids, id)
	}
	return
}

// DevicesIDs returns the "devices" edge IDs in the mutation.
func (m *LicenseTypeMutation) DevicesIDs() (ids []int) {
	for id := range m.devices {
		ids = append(ids, id)
	}
	return
}

// ResetDevices resets all changes to the "devices" edge.
func (m *LicenseTypeMutation) ResetDevices() {
	m.devices = nil
	m.cleareddevices = false
	m.removeddevices = nil
}

// AddLicenseTypeFeatureIDs adds the "license_type_features" edge to the LicenseTypeFeatures entity by ids.
func (m *LicenseTypeMutation) AddLicenseTypeFeatureIDs(ids ...int) {
	if m.license_type_features == nil {
		m.license_type_features = make(map[int]struct{})
	}
	for i := range ids {
		m.license_type_features[ids[i]] = struct{}{}
	}
}

// ClearLicenseTypeFeatures clears the "license_type_features" edge to the LicenseTypeFeatures entity.
func (m *LicenseTypeMutation) ClearLicenseTypeFeatures() {
	m.clearedlicense_type_features = true
}

// LicenseTypeFeaturesCleared reports if the "license_type_features" edge to the LicenseTypeFeatures entity was cleared.
func (m *LicenseTypeMutation) LicenseTypeFeaturesCleared() bool {
	return m.clearedlicense_type_features
}

// RemoveLicenseTypeFeatureIDs removes the "license_type_features" edge to the LicenseTypeFeatures entity by IDs.
func (m *LicenseTypeMutation) RemoveLicenseTypeFeatureIDs(ids ...int) {
	if m.removedlicense_type_features == nil {
		m.removedlicense_type_features = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.license_type_features, ids[i])
		m.removedlicense_type_features[ids[i]] = struct{}{}
	}
}

// RemovedLicenseTypeFeatures returns the removed IDs of the "license_type_features" edge to the LicenseTypeFeatures entity.
func (m *LicenseTypeMutation) RemovedLicenseTypeFeaturesIDs() (ids []int) {
	for id := range m.removedlicense_type_features {
		ids = append(ids, id)
	}
	return
}

// LicenseTypeFeaturesIDs returns the "license_type_features" edge IDs in the mutation.
func (m *LicenseTypeMutation) LicenseTypeFeaturesIDs() (ids []int) {
	for id := range m.license_type_features {
		ids = append(ids, id)
	}
	return
}

// ResetLicenseTypeFeatures resets all changes to the "license_type_features" edge.
func (m *LicenseTypeMutation) ResetLicenseTypeFeatures() {
	m.license_type_features = nil
	m.clearedlicense_type_features = false
	m.removedlicense_type_features = nil
}

// Where appends a list predicates to the LicenseTypeMutation builder.
func (m *LicenseTypeMutation) Where(ps ...predicate.LicenseType) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the LicenseTypeMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *LicenseTypeMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.LicenseType, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *LicenseTypeMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *LicenseTypeMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (LicenseType).
func (m *LicenseTypeMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *LicenseTypeMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.type_name != nil {
		fields = append(fields, licensetype.FieldTypeName)
	}
	if m.license_type != nil {
		fields = append(fields, licensetype.FieldLicenseType)
	}
	if m.product != nil {
		fields = append(fields, licensetype.FieldProductID)
	}
	if m.created_at != nil {
		fields = append(fields, licensetype.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, licensetype.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *LicenseTypeMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case licensetype.FieldTypeName:
		return m.TypeName()
	case licensetype.FieldLicenseType:
		return m.LicenseType()
	case licensetype.FieldProductID:
		return m.ProductID()
	case licensetype.FieldCreatedAt:
		return m.CreatedAt()
	case licensetype.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *LicenseTypeMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case licensetype.FieldTypeName:
		return m.OldTypeName(ctx)
	case licensetype.FieldLicenseType:
		return m.OldLicenseType(ctx)
	case licensetype.FieldProductID:
		return m.OldProductID(ctx)
	case licensetype.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case licensetype.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown LicenseType field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *LicenseTypeMutation) SetField(name string, value ent.Value) error {
	switch name {
	case licensetype.FieldTypeName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTypeName(v)
		return nil
	case licensetype.FieldLicenseType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLicenseType(v)
		return nil
	case licensetype.FieldProductID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProductID(v)
		return nil
	case licensetype.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case licensetype.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown LicenseType field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *LicenseTypeMutation) AddedFields() []string {
	var fields []string
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *LicenseTypeMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *LicenseTypeMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown LicenseType numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *LicenseTypeMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *LicenseTypeMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *LicenseTypeMutation) ClearField(name string) error {
	return fmt.Errorf("unknown LicenseType nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *LicenseTypeMutation) ResetField(name string) error {
	switch name {
	case licensetype.FieldTypeName:
		m.ResetTypeName()
		return nil
	case licensetype.FieldLicenseType:
		m.ResetLicenseType()
		return nil
	case licensetype.FieldProductID:
		m.ResetProductID()
		return nil
	case licensetype.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case licensetype.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown LicenseType field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *LicenseTypeMutation) AddedEdges() []string {
	edges := make([]string, 0, 4)
	if m.product != nil {
		edges = append(edges, licensetype.EdgeProduct)
	}
	if m.features != nil {
		edges = append(edges, licensetype.EdgeFeatures)
	}
	if m.devices != nil {
		edges = append(edges, licensetype.EdgeDevices)
	}
	if m.license_type_features != nil {
		edges = append(edges, licensetype.EdgeLicenseTypeFeatures)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *LicenseTypeMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case licensetype.EdgeProduct:
		if id := m.product; id != nil {
			return []ent.Value{*id}
		}
	case licensetype.EdgeFeatures:
		ids := make([]ent.Value, 0, len(m.features))
		for id := range m.features {
			ids = append(ids, id)
		}
		return ids
	case licensetype.EdgeDevices:
		ids := make([]ent.Value, 0, len(m.devices))
		for id := range m.devices {
			ids = append(ids, id)
		}
		return ids
	case licensetype.EdgeLicenseTypeFeatures:
		ids := make([]ent.Value, 0, len(m.license_type_features))
		for id := range m.license_type_features {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *LicenseTypeMutation) RemovedEdges() []string {
	edges := make([]string, 0, 4)
	if m.removedfeatures != nil {
		edges = append(edges, licensetype.EdgeFeatures)
	}
	if m.removeddevices != nil {
		edges = append(edges, licensetype.EdgeDevices)
	}
	if m.removedlicense_type_features != nil {
		edges = append(edges, licensetype.EdgeLicenseTypeFeatures)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *LicenseTypeMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case licensetype.EdgeFeatures:
		ids := make([]ent.Value, 0, len(m.removedfeatures))
		for id := range m.removedfeatures {
			ids = append(ids, id)
		}
		return ids
	case licensetype.EdgeDevices:
		ids := make([]ent.Value, 0, len(m.removeddevices))
		for id := range m.removeddevices {
			ids = append(ids, id)
		}
		return ids
	case licensetype.EdgeLicenseTypeFeatures:
		ids := make([]ent.Value, 0, len(m.removedlicense_type_features))
		for id := range m.removedlicense_type_features {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *LicenseTypeMutation) ClearedEdges() []string {
	edges := make([]string, 0, 4)
	if m.clearedproduct {
		edges = append(edges, licensetype.EdgeProduct)
	}
	if m.clearedfeatures {
		edges = append(edges, licensetype.EdgeFeatures)
	}
	if m.cleareddevices {
		edges = append(edges, licensetype.EdgeDevices)
	}
	if m.clearedlicense_type_features {
		edges = append(edges, licensetype.EdgeLicenseTypeFeatures)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *LicenseTypeMutation) EdgeCleared(name string) bool {
	switch name {
	case licensetype.EdgeProduct:
		return m.clearedproduct
	case licensetype.EdgeFeatures:
		return m.clearedfeatures
	case licensetype.EdgeDevices:
		return m.cleareddevices
	case licensetype.EdgeLicenseTypeFeatures:
		return m.clearedlicense_type_features
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *LicenseTypeMutation) ClearEdge(name string) error {
	switch name {
	case licensetype.EdgeProduct:
		m.ClearProduct()
		return nil
	}
	return fmt.Errorf("unknown LicenseType unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *LicenseTypeMutation) ResetEdge(name string) error {
	switch name {
	case licensetype.EdgeProduct:
		m.ResetProduct()
		return nil
	case licensetype.EdgeFeatures:
		m.ResetFeatures()
		return nil
	case licensetype.EdgeDevices:
		m.ResetDevices()
		return nil
	case licensetype.EdgeLicenseTypeFeatures:
		m.ResetLicenseTypeFeatures()
		return nil
	}
	return fmt.Errorf("unknown LicenseType edge %s", name)
}

// LicenseTypeFeaturesMutation represents an operation that mutates the LicenseTypeFeatures nodes in the graph.
type LicenseTypeFeaturesMutation struct {
	config
	op                  Op
	typ                 string
	id                  *int
	created_at          *time.Time
	clearedFields       map[string]struct{}
	license_type        *int
	clearedlicense_type bool
	feature             *int
	clearedfeature      bool
	done                bool
	oldValue            func(context.Context) (*LicenseTypeFeatures, error)
	predicates          []predicate.LicenseTypeFeatures
}

var _ ent.Mutation = (*LicenseTypeFeaturesMutation)(nil)

// licensetypefeaturesOption allows management of the mutation configuration using functional options.
type licensetypefeaturesOption func(*LicenseTypeFeaturesMutation)

// newLicenseTypeFeaturesMutation creates new mutation for the LicenseTypeFeatures entity.
func newLicenseTypeFeaturesMutation(c config, op Op, opts ...licensetypefeaturesOption) *LicenseTypeFeaturesMutation {
	m := &LicenseTypeFeaturesMutation{
		config:        c,
		op:            op,
		typ:           TypeLicenseTypeFeatures,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withLicenseTypeFeaturesID sets the ID field of the mutation.
func withLicenseTypeFeaturesID(id int) licensetypefeaturesOption {
	return func(m *LicenseTypeFeaturesMutation) {
		var (
			err   error
			once  sync.Once
			value *LicenseTypeFeatures
		)
		m.oldValue = func(ctx context.Context) (*LicenseTypeFeatures, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().LicenseTypeFeatures.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withLicenseTypeFeatures sets the old LicenseTypeFeatures of the mutation.
func withLicenseTypeFeatures(node *LicenseTypeFeatures) licensetypefeaturesOption {
	return func(m *LicenseTypeFeaturesMutation) {
		m.oldValue = func(context.Context) (*LicenseTypeFeatures, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m LicenseTypeFeaturesMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m LicenseTypeFeaturesMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of LicenseTypeFeatures entities.
func (m *LicenseTypeFeaturesMutation) SetID(id int) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *LicenseTypeFeaturesMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *LicenseTypeFeaturesMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().LicenseTypeFeatures.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetLicenseTypeID sets the "license_type_id" field.
func (m *LicenseTypeFeaturesMutation) SetLicenseTypeID(i int) {
	m.license_type = &i
}

// LicenseTypeID returns the value of the "license_type_id" field in the mutation.
func (m *LicenseTypeFeaturesMutation) LicenseTypeID() (r int, exists bool) {
	v := m.license_type
	if v == nil {
		return
	}
	return *v, true
}

// OldLicenseTypeID returns the old "license_type_id" field's value of the LicenseTypeFeatures entity.
// If the LicenseTypeFeatures object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LicenseTypeFeaturesMutation) OldLicenseTypeID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLicenseTypeID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLicenseTypeID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLicenseTypeID: %w", err)
	}
	return oldValue.LicenseTypeID, nil
}

// ResetLicenseTypeID resets all changes to the "license_type_id" field.
func (m *LicenseTypeFeaturesMutation) ResetLicenseTypeID() {
	m.license_type = nil
}

// SetFeatureID sets the "feature_id" field.
func (m *LicenseTypeFeaturesMutation) SetFeatureID(i int) {
	m.feature = &i
}

// FeatureID returns the value of the "feature_id" field in the mutation.
func (m *LicenseTypeFeaturesMutation) FeatureID() (r int, exists bool) {
	v := m.feature
	if v == nil {
		return
	}
	return *v, true
}

// OldFeatureID returns the old "feature_id" field's value of the LicenseTypeFeatures entity.
// If the LicenseTypeFeatures object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LicenseTypeFeaturesMutation) OldFeatureID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFeatureID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFeatureID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFeatureID: %w", err)
	}
	return oldValue.FeatureID, nil
}

// ResetFeatureID resets all changes to the "feature_id" field.
func (m *LicenseTypeFeaturesMutation) ResetFeatureID() {
	m.feature = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *LicenseTypeFeaturesMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *LicenseTypeFeaturesMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the LicenseTypeFeatures entity.
// If the LicenseTypeFeatures object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LicenseTypeFeaturesMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *LicenseTypeFeaturesMutation) ResetCreatedAt() {
	m.created_at = nil
}

// ClearLicenseType clears the "license_type" edge to the LicenseType entity.
func (m *LicenseTypeFeaturesMutation) ClearLicenseType() {
	m.clearedlicense_type = true
	m.clearedFields[licensetypefeatures.FieldLicenseTypeID] = struct{}{}
}

// LicenseTypeCleared reports if the "license_type" edge to the LicenseType entity was cleared.
func (m *LicenseTypeFeaturesMutation) LicenseTypeCleared() bool {
	return m.clearedlicense_type
}

// LicenseTypeIDs returns the "license_type" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// LicenseTypeID instead. It exists only for internal usage by the builders.
func (m *LicenseTypeFeaturesMutation) LicenseTypeIDs() (ids []int) {
	if id := m.license_type; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetLicenseType resets all changes to the "license_type" edge.
func (m *LicenseTypeFeaturesMutation) ResetLicenseType() {
	m.license_type = nil
	m.clearedlicense_type = false
}

// ClearFeature clears the "feature" edge to the ProductFeature entity.
func (m *LicenseTypeFeaturesMutation) ClearFeature() {
	m.clearedfeature = true
	m.clearedFields[licensetypefeatures.FieldFeatureID] = struct{}{}
}

// FeatureCleared reports if the "feature" edge to the ProductFeature entity was cleared.
func (m *LicenseTypeFeaturesMutation) FeatureCleared() bool {
	return m.clearedfeature
}

// FeatureIDs returns the "feature" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// FeatureID instead. It exists only for internal usage by the builders.
func (m *LicenseTypeFeaturesMutation) FeatureIDs() (ids []int) {
	if id := m.feature; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetFeature resets all changes to the "feature" edge.
func (m *LicenseTypeFeaturesMutation) ResetFeature() {
	m.feature = nil
	m.clearedfeature = false
}

// Where appends a list predicates to the LicenseTypeFeaturesMutation builder.
func (m *LicenseTypeFeaturesMutation) Where(ps ...predicate.LicenseTypeFeatures) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the LicenseTypeFeaturesMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *LicenseTypeFeaturesMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.LicenseTypeFeatures, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *LicenseTypeFeaturesMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *LicenseTypeFeaturesMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (LicenseTypeFeatures).
func (m *LicenseTypeFeaturesMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *LicenseTypeFeaturesMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.license_type != nil {
		fields = append(fields, licensetypefeatures.FieldLicenseTypeID)
	}
	if m.feature != nil {
		fields = append(fields, licensetypefeatures.FieldFeatureID)
	}
	if m.created_at != nil {
		fields = append(fields, licensetypefeatures.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *LicenseTypeFeaturesMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case licensetypefeatures.FieldLicenseTypeID:
		return m.LicenseTypeID()
	case licensetypefeatures.FieldFeatureID:
		return m.FeatureID()
	case licensetypefeatures.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *LicenseTypeFeaturesMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case licensetypefeatures.FieldLicenseTypeID:
		return m.OldLicenseTypeID(ctx)
	case licensetypefeatures.FieldFeatureID:
		return m.OldFeatureID(ctx)
	case licensetypefeatures.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown LicenseTypeFeatures field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *LicenseTypeFeaturesMutation) SetField(name string, value ent.Value) error {
	switch name {
	case licensetypefeatures.FieldLicenseTypeID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLicenseTypeID(v)
		return nil
	case licensetypefeatures.FieldFeatureID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFeatureID(v)
		return nil
	case licensetypefeatures.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown LicenseTypeFeatures field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *LicenseTypeFeaturesMutation) AddedFields() []string {
	var fields []string
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *LicenseTypeFeaturesMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *LicenseTypeFeaturesMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown LicenseTypeFeatures numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *LicenseTypeFeaturesMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *LicenseTypeFeaturesMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *LicenseTypeFeaturesMutation) ClearField(name string) error {
	return fmt.Errorf("unknown LicenseTypeFeatures nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *LicenseTypeFeaturesMutation) ResetField(name string) error {
	switch name {
	case licensetypefeatures.FieldLicenseTypeID:
		m.ResetLicenseTypeID()
		return nil
	case licensetypefeatures.FieldFeatureID:
		m.ResetFeatureID()
		return nil
	case licensetypefeatures.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown LicenseTypeFeatures field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *LicenseTypeFeaturesMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.license_type != nil {
		edges = append(edges, licensetypefeatures.EdgeLicenseType)
	}
	if m.feature != nil {
		edges = append(edges, licensetypefeatures.EdgeFeature)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *LicenseTypeFeaturesMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case licensetypefeatures.EdgeLicenseType:
		if id := m.license_type; id != nil {
			return []ent.Value{*id}
		}
	case licensetypefeatures.EdgeFeature:
		if id := m.feature; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *LicenseTypeFeaturesMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *LicenseTypeFeaturesMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *LicenseTypeFeaturesMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedlicense_type {
		edges = append(edges, licensetypefeatures.EdgeLicenseType)
	}
	if m.clearedfeature {
		edges = append(edges, licensetypefeatures.EdgeFeature)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *LicenseTypeFeaturesMutation) EdgeCleared(name string) bool {
	switch name {
	case licensetypefeatures.EdgeLicenseType:
		return m.clearedlicense_type
	case licensetypefeatures.EdgeFeature:
		return m.clearedfeature
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *LicenseTypeFeaturesMutation) ClearEdge(name string) error {
	switch name {
	case licensetypefeatures.EdgeLicenseType:
		m.ClearLicenseType()
		return nil
	case licensetypefeatures.EdgeFeature:
		m.ClearFeature()
		return nil
	}
	return fmt.Errorf("unknown LicenseTypeFeatures unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *LicenseTypeFeaturesMutation) ResetEdge(name string) error {
	switch name {
	case licensetypefeatures.EdgeLicenseType:
		m.ResetLicenseType()
		return nil
	case licensetypefeatures.EdgeFeature:
		m.ResetFeature()
		return nil
	}
	return fmt.Errorf("unknown LicenseTypeFeatures edge %s", name)
}

// ProductMutation represents an operation that mutates the Product nodes in the graph.
type ProductMutation struct {
	config
	op                       Op
	typ                      string
	id                       *int
	code                     *string
	product_type             *string
	product_name             *string
	created_at               *time.Time
	updated_at               *time.Time
	clearedFields            map[string]struct{}
	managers                 map[int]struct{}
	removedmanagers          map[int]struct{}
	clearedmanagers          bool
	license_types            map[int]struct{}
	removedlicense_types     map[int]struct{}
	clearedlicense_types     bool
	features                 map[int]struct{}
	removedfeatures          map[int]struct{}
	clearedfeatures          bool
	firmware_versions        map[int]struct{}
	removedfirmware_versions map[int]struct{}
	clearedfirmware_versions bool
	software_versions        map[int]struct{}
	removedsoftware_versions map[int]struct{}
	clearedsoftware_versions bool
	devices                  map[int]struct{}
	removeddevices           map[int]struct{}
	cleareddevices           bool
	audit_logs               map[int]struct{}
	removedaudit_logs        map[int]struct{}
	clearedaudit_logs        bool
	done                     bool
	oldValue                 func(context.Context) (*Product, error)
	predicates               []predicate.Product
}

var _ ent.Mutation = (*ProductMutation)(nil)

// productOption allows management of the mutation configuration using functional options.
type productOption func(*ProductMutation)

// newProductMutation creates new mutation for the Product entity.
func newProductMutation(c config, op Op, opts ...productOption) *ProductMutation {
	m := &ProductMutation{
		config:        c,
		op:            op,
		typ:           TypeProduct,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withProductID sets the ID field of the mutation.
func withProductID(id int) productOption {
	return func(m *ProductMutation) {
		var (
			err   error
			once  sync.Once
			value *Product
		)
		m.oldValue = func(ctx context.Context) (*Product, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Product.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withProduct sets the old Product of the mutation.
func withProduct(node *Product) productOption {
	return func(m *ProductMutation) {
		m.oldValue = func(context.Context) (*Product, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ProductMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ProductMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Product entities.
func (m *ProductMutation) SetID(id int) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ProductMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ProductMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Product.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCode sets the "code" field.
func (m *ProductMutation) SetCode(s string) {
	m.code = &s
}

// Code returns the value of the "code" field in the mutation.
func (m *ProductMutation) Code() (r string, exists bool) {
	v := m.code
	if v == nil {
		return
	}
	return *v, true
}

// OldCode returns the old "code" field's value of the Product entity.
// If the Product object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProductMutation) OldCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCode: %w", err)
	}
	return oldValue.Code, nil
}

// ResetCode resets all changes to the "code" field.
func (m *ProductMutation) ResetCode() {
	m.code = nil
}

// SetProductType sets the "product_type" field.
func (m *ProductMutation) SetProductType(s string) {
	m.product_type = &s
}

// ProductType returns the value of the "product_type" field in the mutation.
func (m *ProductMutation) ProductType() (r string, exists bool) {
	v := m.product_type
	if v == nil {
		return
	}
	return *v, true
}

// OldProductType returns the old "product_type" field's value of the Product entity.
// If the Product object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProductMutation) OldProductType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProductType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProductType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProductType: %w", err)
	}
	return oldValue.ProductType, nil
}

// ClearProductType clears the value of the "product_type" field.
func (m *ProductMutation) ClearProductType() {
	m.product_type = nil
	m.clearedFields[product.FieldProductType] = struct{}{}
}

// ProductTypeCleared returns if the "product_type" field was cleared in this mutation.
func (m *ProductMutation) ProductTypeCleared() bool {
	_, ok := m.clearedFields[product.FieldProductType]
	return ok
}

// ResetProductType resets all changes to the "product_type" field.
func (m *ProductMutation) ResetProductType() {
	m.product_type = nil
	delete(m.clearedFields, product.FieldProductType)
}

// SetProductName sets the "product_name" field.
func (m *ProductMutation) SetProductName(s string) {
	m.product_name = &s
}

// ProductName returns the value of the "product_name" field in the mutation.
func (m *ProductMutation) ProductName() (r string, exists bool) {
	v := m.product_name
	if v == nil {
		return
	}
	return *v, true
}

// OldProductName returns the old "product_name" field's value of the Product entity.
// If the Product object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProductMutation) OldProductName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProductName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProductName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProductName: %w", err)
	}
	return oldValue.ProductName, nil
}

// ResetProductName resets all changes to the "product_name" field.
func (m *ProductMutation) ResetProductName() {
	m.product_name = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *ProductMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *ProductMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Product entity.
// If the Product object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProductMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *ProductMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *ProductMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *ProductMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Product entity.
// If the Product object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProductMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *ProductMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// AddManagerIDs adds the "managers" edge to the ProductManager entity by ids.
func (m *ProductMutation) AddManagerIDs(ids ...int) {
	if m.managers == nil {
		m.managers = make(map[int]struct{})
	}
	for i := range ids {
		m.managers[ids[i]] = struct{}{}
	}
}

// ClearManagers clears the "managers" edge to the ProductManager entity.
func (m *ProductMutation) ClearManagers() {
	m.clearedmanagers = true
}

// ManagersCleared reports if the "managers" edge to the ProductManager entity was cleared.
func (m *ProductMutation) ManagersCleared() bool {
	return m.clearedmanagers
}

// RemoveManagerIDs removes the "managers" edge to the ProductManager entity by IDs.
func (m *ProductMutation) RemoveManagerIDs(ids ...int) {
	if m.removedmanagers == nil {
		m.removedmanagers = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.managers, ids[i])
		m.removedmanagers[ids[i]] = struct{}{}
	}
}

// RemovedManagers returns the removed IDs of the "managers" edge to the ProductManager entity.
func (m *ProductMutation) RemovedManagersIDs() (ids []int) {
	for id := range m.removedmanagers {
		ids = append(ids, id)
	}
	return
}

// ManagersIDs returns the "managers" edge IDs in the mutation.
func (m *ProductMutation) ManagersIDs() (ids []int) {
	for id := range m.managers {
		ids = append(ids, id)
	}
	return
}

// ResetManagers resets all changes to the "managers" edge.
func (m *ProductMutation) ResetManagers() {
	m.managers = nil
	m.clearedmanagers = false
	m.removedmanagers = nil
}

// AddLicenseTypeIDs adds the "license_types" edge to the LicenseType entity by ids.
func (m *ProductMutation) AddLicenseTypeIDs(ids ...int) {
	if m.license_types == nil {
		m.license_types = make(map[int]struct{})
	}
	for i := range ids {
		m.license_types[ids[i]] = struct{}{}
	}
}

// ClearLicenseTypes clears the "license_types" edge to the LicenseType entity.
func (m *ProductMutation) ClearLicenseTypes() {
	m.clearedlicense_types = true
}

// LicenseTypesCleared reports if the "license_types" edge to the LicenseType entity was cleared.
func (m *ProductMutation) LicenseTypesCleared() bool {
	return m.clearedlicense_types
}

// RemoveLicenseTypeIDs removes the "license_types" edge to the LicenseType entity by IDs.
func (m *ProductMutation) RemoveLicenseTypeIDs(ids ...int) {
	if m.removedlicense_types == nil {
		m.removedlicense_types = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.license_types, ids[i])
		m.removedlicense_types[ids[i]] = struct{}{}
	}
}

// RemovedLicenseTypes returns the removed IDs of the "license_types" edge to the LicenseType entity.
func (m *ProductMutation) RemovedLicenseTypesIDs() (ids []int) {
	for id := range m.removedlicense_types {
		ids = append(ids, id)
	}
	return
}

// LicenseTypesIDs returns the "license_types" edge IDs in the mutation.
func (m *ProductMutation) LicenseTypesIDs() (ids []int) {
	for id := range m.license_types {
		ids = append(ids, id)
	}
	return
}

// ResetLicenseTypes resets all changes to the "license_types" edge.
func (m *ProductMutation) ResetLicenseTypes() {
	m.license_types = nil
	m.clearedlicense_types = false
	m.removedlicense_types = nil
}

// AddFeatureIDs adds the "features" edge to the ProductFeature entity by ids.
func (m *ProductMutation) AddFeatureIDs(ids ...int) {
	if m.features == nil {
		m.features = make(map[int]struct{})
	}
	for i := range ids {
		m.features[ids[i]] = struct{}{}
	}
}

// ClearFeatures clears the "features" edge to the ProductFeature entity.
func (m *ProductMutation) ClearFeatures() {
	m.clearedfeatures = true
}

// FeaturesCleared reports if the "features" edge to the ProductFeature entity was cleared.
func (m *ProductMutation) FeaturesCleared() bool {
	return m.clearedfeatures
}

// RemoveFeatureIDs removes the "features" edge to the ProductFeature entity by IDs.
func (m *ProductMutation) RemoveFeatureIDs(ids ...int) {
	if m.removedfeatures == nil {
		m.removedfeatures = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.features, ids[i])
		m.removedfeatures[ids[i]] = struct{}{}
	}
}

// RemovedFeatures returns the removed IDs of the "features" edge to the ProductFeature entity.
func (m *ProductMutation) RemovedFeaturesIDs() (ids []int) {
	for id := range m.removedfeatures {
		ids = append(ids, id)
	}
	return
}

// FeaturesIDs returns the "features" edge IDs in the mutation.
func (m *ProductMutation) FeaturesIDs() (ids []int) {
	for id := range m.features {
		ids = append(ids, id)
	}
	return
}

// ResetFeatures resets all changes to the "features" edge.
func (m *ProductMutation) ResetFeatures() {
	m.features = nil
	m.clearedfeatures = false
	m.removedfeatures = nil
}

// AddFirmwareVersionIDs adds the "firmware_versions" edge to the FirmwareVersion entity by ids.
func (m *ProductMutation) AddFirmwareVersionIDs(ids ...int) {
	if m.firmware_versions == nil {
		m.firmware_versions = make(map[int]struct{})
	}
	for i := range ids {
		m.firmware_versions[ids[i]] = struct{}{}
	}
}

// ClearFirmwareVersions clears the "firmware_versions" edge to the FirmwareVersion entity.
func (m *ProductMutation) ClearFirmwareVersions() {
	m.clearedfirmware_versions = true
}

// FirmwareVersionsCleared reports if the "firmware_versions" edge to the FirmwareVersion entity was cleared.
func (m *ProductMutation) FirmwareVersionsCleared() bool {
	return m.clearedfirmware_versions
}

// RemoveFirmwareVersionIDs removes the "firmware_versions" edge to the FirmwareVersion entity by IDs.
func (m *ProductMutation) RemoveFirmwareVersionIDs(ids ...int) {
	if m.removedfirmware_versions == nil {
		m.removedfirmware_versions = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.firmware_versions, ids[i])
		m.removedfirmware_versions[ids[i]] = struct{}{}
	}
}

// RemovedFirmwareVersions returns the removed IDs of the "firmware_versions" edge to the FirmwareVersion entity.
func (m *ProductMutation) RemovedFirmwareVersionsIDs() (ids []int) {
	for id := range m.removedfirmware_versions {
		ids = append(ids, id)
	}
	return
}

// FirmwareVersionsIDs returns the "firmware_versions" edge IDs in the mutation.
func (m *ProductMutation) FirmwareVersionsIDs() (ids []int) {
	for id := range m.firmware_versions {
		ids = append(ids, id)
	}
	return
}

// ResetFirmwareVersions resets all changes to the "firmware_versions" edge.
func (m *ProductMutation) ResetFirmwareVersions() {
	m.firmware_versions = nil
	m.clearedfirmware_versions = false
	m.removedfirmware_versions = nil
}

// AddSoftwareVersionIDs adds the "software_versions" edge to the SoftwareVersion entity by ids.
func (m *ProductMutation) AddSoftwareVersionIDs(ids ...int) {
	if m.software_versions == nil {
		m.software_versions = make(map[int]struct{})
	}
	for i := range ids {
		m.software_versions[ids[i]] = struct{}{}
	}
}

// ClearSoftwareVersions clears the "software_versions" edge to the SoftwareVersion entity.
func (m *ProductMutation) ClearSoftwareVersions() {
	m.clearedsoftware_versions = true
}

// SoftwareVersionsCleared reports if the "software_versions" edge to the SoftwareVersion entity was cleared.
func (m *ProductMutation) SoftwareVersionsCleared() bool {
	return m.clearedsoftware_versions
}

// RemoveSoftwareVersionIDs removes the "software_versions" edge to the SoftwareVersion entity by IDs.
func (m *ProductMutation) RemoveSoftwareVersionIDs(ids ...int) {
	if m.removedsoftware_versions == nil {
		m.removedsoftware_versions = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.software_versions, ids[i])
		m.removedsoftware_versions[ids[i]] = struct{}{}
	}
}

// RemovedSoftwareVersions returns the removed IDs of the "software_versions" edge to the SoftwareVersion entity.
func (m *ProductMutation) RemovedSoftwareVersionsIDs() (ids []int) {
	for id := range m.removedsoftware_versions {
		ids = append(ids, id)
	}
	return
}

// SoftwareVersionsIDs returns the "software_versions" edge IDs in the mutation.
func (m *ProductMutation) SoftwareVersionsIDs() (ids []int) {
	for id := range m.software_versions {
		ids = append(ids, id)
	}
	return
}

// ResetSoftwareVersions resets all changes to the "software_versions" edge.
func (m *ProductMutation) ResetSoftwareVersions() {
	m.software_versions = nil
	m.clearedsoftware_versions = false
	m.removedsoftware_versions = nil
}

// AddDeviceIDs adds the "devices" edge to the Device entity by ids.
func (m *ProductMutation) AddDeviceIDs(ids ...int) {
	if m.devices == nil {
		m.devices = make(map[int]struct{})
	}
	for i := range ids {
		m.devices[ids[i]] = struct{}{}
	}
}

// ClearDevices clears the "devices" edge to the Device entity.
func (m *ProductMutation) ClearDevices() {
	m.cleareddevices = true
}

// DevicesCleared reports if the "devices" edge to the Device entity was cleared.
func (m *ProductMutation) DevicesCleared() bool {
	return m.cleareddevices
}

// RemoveDeviceIDs removes the "devices" edge to the Device entity by IDs.
func (m *ProductMutation) RemoveDeviceIDs(ids ...int) {
	if m.removeddevices == nil {
		m.removeddevices = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.devices, ids[i])
		m.removeddevices[ids[i]] = struct{}{}
	}
}

// RemovedDevices returns the removed IDs of the "devices" edge to the Device entity.
func (m *ProductMutation) RemovedDevicesIDs() (ids []int) {
	for id := range m.removeddevices {
		ids = append(ids, id)
	}
	return
}

// DevicesIDs returns the "devices" edge IDs in the mutation.
func (m *ProductMutation) DevicesIDs() (ids []int) {
	for id := range m.devices {
		ids = append(ids, id)
	}
	return
}

// ResetDevices resets all changes to the "devices" edge.
func (m *ProductMutation) ResetDevices() {
	m.devices = nil
	m.cleareddevices = false
	m.removeddevices = nil
}

// AddAuditLogIDs adds the "audit_logs" edge to the AuditLog entity by ids.
func (m *ProductMutation) AddAuditLogIDs(ids ...int) {
	if m.audit_logs == nil {
		m.audit_logs = make(map[int]struct{})
	}
	for i := range ids {
		m.audit_logs[ids[i]] = struct{}{}
	}
}

// ClearAuditLogs clears the "audit_logs" edge to the AuditLog entity.
func (m *ProductMutation) ClearAuditLogs() {
	m.clearedaudit_logs = true
}

// AuditLogsCleared reports if the "audit_logs" edge to the AuditLog entity was cleared.
func (m *ProductMutation) AuditLogsCleared() bool {
	return m.clearedaudit_logs
}

// RemoveAuditLogIDs removes the "audit_logs" edge to the AuditLog entity by IDs.
func (m *ProductMutation) RemoveAuditLogIDs(ids ...int) {
	if m.removedaudit_logs == nil {
		m.removedaudit_logs = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.audit_logs, ids[i])
		m.removedaudit_logs[ids[i]] = struct{}{}
	}
}

// RemovedAuditLogs returns the removed IDs of the "audit_logs" edge to the AuditLog entity.
func (m *ProductMutation) RemovedAuditLogsIDs() (ids []int) {
	for id := range m.removedaudit_logs {
		ids = append(ids, id)
	}
	return
}

// AuditLogsIDs returns the "audit_logs" edge IDs in the mutation.
func (m *ProductMutation) AuditLogsIDs() (ids []int) {
	for id := range m.audit_logs {
		ids = append(ids, id)
	}
	return
}

// ResetAuditLogs resets all changes to the "audit_logs" edge.
func (m *ProductMutation) ResetAuditLogs() {
	m.audit_logs = nil
	m.clearedaudit_logs = false
	m.removedaudit_logs = nil
}

// Where appends a list predicates to the ProductMutation builder.
func (m *ProductMutation) Where(ps ...predicate.Product) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ProductMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ProductMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Product, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ProductMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ProductMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Product).
func (m *ProductMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ProductMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.code != nil {
		fields = append(fields, product.FieldCode)
	}
	if m.product_type != nil {
		fields = append(fields, product.FieldProductType)
	}
	if m.product_name != nil {
		fields = append(fields, product.FieldProductName)
	}
	if m.created_at != nil {
		fields = append(fields, product.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, product.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ProductMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case product.FieldCode:
		return m.Code()
	case product.FieldProductType:
		return m.ProductType()
	case product.FieldProductName:
		return m.ProductName()
	case product.FieldCreatedAt:
		return m.CreatedAt()
	case product.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ProductMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case product.FieldCode:
		return m.OldCode(ctx)
	case product.FieldProductType:
		return m.OldProductType(ctx)
	case product.FieldProductName:
		return m.OldProductName(ctx)
	case product.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case product.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Product field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProductMutation) SetField(name string, value ent.Value) error {
	switch name {
	case product.FieldCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCode(v)
		return nil
	case product.FieldProductType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProductType(v)
		return nil
	case product.FieldProductName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProductName(v)
		return nil
	case product.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case product.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Product field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ProductMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ProductMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProductMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Product numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ProductMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(product.FieldProductType) {
		fields = append(fields, product.FieldProductType)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ProductMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ProductMutation) ClearField(name string) error {
	switch name {
	case product.FieldProductType:
		m.ClearProductType()
		return nil
	}
	return fmt.Errorf("unknown Product nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ProductMutation) ResetField(name string) error {
	switch name {
	case product.FieldCode:
		m.ResetCode()
		return nil
	case product.FieldProductType:
		m.ResetProductType()
		return nil
	case product.FieldProductName:
		m.ResetProductName()
		return nil
	case product.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case product.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Product field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ProductMutation) AddedEdges() []string {
	edges := make([]string, 0, 7)
	if m.managers != nil {
		edges = append(edges, product.EdgeManagers)
	}
	if m.license_types != nil {
		edges = append(edges, product.EdgeLicenseTypes)
	}
	if m.features != nil {
		edges = append(edges, product.EdgeFeatures)
	}
	if m.firmware_versions != nil {
		edges = append(edges, product.EdgeFirmwareVersions)
	}
	if m.software_versions != nil {
		edges = append(edges, product.EdgeSoftwareVersions)
	}
	if m.devices != nil {
		edges = append(edges, product.EdgeDevices)
	}
	if m.audit_logs != nil {
		edges = append(edges, product.EdgeAuditLogs)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ProductMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case product.EdgeManagers:
		ids := make([]ent.Value, 0, len(m.managers))
		for id := range m.managers {
			ids = append(ids, id)
		}
		return ids
	case product.EdgeLicenseTypes:
		ids := make([]ent.Value, 0, len(m.license_types))
		for id := range m.license_types {
			ids = append(ids, id)
		}
		return ids
	case product.EdgeFeatures:
		ids := make([]ent.Value, 0, len(m.features))
		for id := range m.features {
			ids = append(ids, id)
		}
		return ids
	case product.EdgeFirmwareVersions:
		ids := make([]ent.Value, 0, len(m.firmware_versions))
		for id := range m.firmware_versions {
			ids = append(ids, id)
		}
		return ids
	case product.EdgeSoftwareVersions:
		ids := make([]ent.Value, 0, len(m.software_versions))
		for id := range m.software_versions {
			ids = append(ids, id)
		}
		return ids
	case product.EdgeDevices:
		ids := make([]ent.Value, 0, len(m.devices))
		for id := range m.devices {
			ids = append(ids, id)
		}
		return ids
	case product.EdgeAuditLogs:
		ids := make([]ent.Value, 0, len(m.audit_logs))
		for id := range m.audit_logs {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ProductMutation) RemovedEdges() []string {
	edges := make([]string, 0, 7)
	if m.removedmanagers != nil {
		edges = append(edges, product.EdgeManagers)
	}
	if m.removedlicense_types != nil {
		edges = append(edges, product.EdgeLicenseTypes)
	}
	if m.removedfeatures != nil {
		edges = append(edges, product.EdgeFeatures)
	}
	if m.removedfirmware_versions != nil {
		edges = append(edges, product.EdgeFirmwareVersions)
	}
	if m.removedsoftware_versions != nil {
		edges = append(edges, product.EdgeSoftwareVersions)
	}
	if m.removeddevices != nil {
		edges = append(edges, product.EdgeDevices)
	}
	if m.removedaudit_logs != nil {
		edges = append(edges, product.EdgeAuditLogs)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ProductMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case product.EdgeManagers:
		ids := make([]ent.Value, 0, len(m.removedmanagers))
		for id := range m.removedmanagers {
			ids = append(ids, id)
		}
		return ids
	case product.EdgeLicenseTypes:
		ids := make([]ent.Value, 0, len(m.removedlicense_types))
		for id := range m.removedlicense_types {
			ids = append(ids, id)
		}
		return ids
	case product.EdgeFeatures:
		ids := make([]ent.Value, 0, len(m.removedfeatures))
		for id := range m.removedfeatures {
			ids = append(ids, id)
		}
		return ids
	case product.EdgeFirmwareVersions:
		ids := make([]ent.Value, 0, len(m.removedfirmware_versions))
		for id := range m.removedfirmware_versions {
			ids = append(ids, id)
		}
		return ids
	case product.EdgeSoftwareVersions:
		ids := make([]ent.Value, 0, len(m.removedsoftware_versions))
		for id := range m.removedsoftware_versions {
			ids = append(ids, id)
		}
		return ids
	case product.EdgeDevices:
		ids := make([]ent.Value, 0, len(m.removeddevices))
		for id := range m.removeddevices {
			ids = append(ids, id)
		}
		return ids
	case product.EdgeAuditLogs:
		ids := make([]ent.Value, 0, len(m.removedaudit_logs))
		for id := range m.removedaudit_logs {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ProductMutation) ClearedEdges() []string {
	edges := make([]string, 0, 7)
	if m.clearedmanagers {
		edges = append(edges, product.EdgeManagers)
	}
	if m.clearedlicense_types {
		edges = append(edges, product.EdgeLicenseTypes)
	}
	if m.clearedfeatures {
		edges = append(edges, product.EdgeFeatures)
	}
	if m.clearedfirmware_versions {
		edges = append(edges, product.EdgeFirmwareVersions)
	}
	if m.clearedsoftware_versions {
		edges = append(edges, product.EdgeSoftwareVersions)
	}
	if m.cleareddevices {
		edges = append(edges, product.EdgeDevices)
	}
	if m.clearedaudit_logs {
		edges = append(edges, product.EdgeAuditLogs)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ProductMutation) EdgeCleared(name string) bool {
	switch name {
	case product.EdgeManagers:
		return m.clearedmanagers
	case product.EdgeLicenseTypes:
		return m.clearedlicense_types
	case product.EdgeFeatures:
		return m.clearedfeatures
	case product.EdgeFirmwareVersions:
		return m.clearedfirmware_versions
	case product.EdgeSoftwareVersions:
		return m.clearedsoftware_versions
	case product.EdgeDevices:
		return m.cleareddevices
	case product.EdgeAuditLogs:
		return m.clearedaudit_logs
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ProductMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Product unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ProductMutation) ResetEdge(name string) error {
	switch name {
	case product.EdgeManagers:
		m.ResetManagers()
		return nil
	case product.EdgeLicenseTypes:
		m.ResetLicenseTypes()
		return nil
	case product.EdgeFeatures:
		m.ResetFeatures()
		return nil
	case product.EdgeFirmwareVersions:
		m.ResetFirmwareVersions()
		return nil
	case product.EdgeSoftwareVersions:
		m.ResetSoftwareVersions()
		return nil
	case product.EdgeDevices:
		m.ResetDevices()
		return nil
	case product.EdgeAuditLogs:
		m.ResetAuditLogs()
		return nil
	}
	return fmt.Errorf("unknown Product edge %s", name)
}

// ProductFeatureMutation represents an operation that mutates the ProductFeature nodes in the graph.
type ProductFeatureMutation struct {
	config
	op                           Op
	typ                          string
	id                           *int
	feature_name                 *string
	feature_code                 *string
	created_at                   *time.Time
	updated_at                   *time.Time
	clearedFields                map[string]struct{}
	product                      *int
	clearedproduct               bool
	license_types                map[int]struct{}
	removedlicense_types         map[int]struct{}
	clearedlicense_types         bool
	software_versions            map[int]struct{}
	removedsoftware_versions     map[int]struct{}
	clearedsoftware_versions     bool
	license_type_features        map[int]struct{}
	removedlicense_type_features map[int]struct{}
	clearedlicense_type_features bool
	done                         bool
	oldValue                     func(context.Context) (*ProductFeature, error)
	predicates                   []predicate.ProductFeature
}

var _ ent.Mutation = (*ProductFeatureMutation)(nil)

// productfeatureOption allows management of the mutation configuration using functional options.
type productfeatureOption func(*ProductFeatureMutation)

// newProductFeatureMutation creates new mutation for the ProductFeature entity.
func newProductFeatureMutation(c config, op Op, opts ...productfeatureOption) *ProductFeatureMutation {
	m := &ProductFeatureMutation{
		config:        c,
		op:            op,
		typ:           TypeProductFeature,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withProductFeatureID sets the ID field of the mutation.
func withProductFeatureID(id int) productfeatureOption {
	return func(m *ProductFeatureMutation) {
		var (
			err   error
			once  sync.Once
			value *ProductFeature
		)
		m.oldValue = func(ctx context.Context) (*ProductFeature, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ProductFeature.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withProductFeature sets the old ProductFeature of the mutation.
func withProductFeature(node *ProductFeature) productfeatureOption {
	return func(m *ProductFeatureMutation) {
		m.oldValue = func(context.Context) (*ProductFeature, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ProductFeatureMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ProductFeatureMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of ProductFeature entities.
func (m *ProductFeatureMutation) SetID(id int) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ProductFeatureMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ProductFeatureMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().ProductFeature.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetFeatureName sets the "feature_name" field.
func (m *ProductFeatureMutation) SetFeatureName(s string) {
	m.feature_name = &s
}

// FeatureName returns the value of the "feature_name" field in the mutation.
func (m *ProductFeatureMutation) FeatureName() (r string, exists bool) {
	v := m.feature_name
	if v == nil {
		return
	}
	return *v, true
}

// OldFeatureName returns the old "feature_name" field's value of the ProductFeature entity.
// If the ProductFeature object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProductFeatureMutation) OldFeatureName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFeatureName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFeatureName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFeatureName: %w", err)
	}
	return oldValue.FeatureName, nil
}

// ResetFeatureName resets all changes to the "feature_name" field.
func (m *ProductFeatureMutation) ResetFeatureName() {
	m.feature_name = nil
}

// SetFeatureCode sets the "feature_code" field.
func (m *ProductFeatureMutation) SetFeatureCode(s string) {
	m.feature_code = &s
}

// FeatureCode returns the value of the "feature_code" field in the mutation.
func (m *ProductFeatureMutation) FeatureCode() (r string, exists bool) {
	v := m.feature_code
	if v == nil {
		return
	}
	return *v, true
}

// OldFeatureCode returns the old "feature_code" field's value of the ProductFeature entity.
// If the ProductFeature object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProductFeatureMutation) OldFeatureCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFeatureCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFeatureCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFeatureCode: %w", err)
	}
	return oldValue.FeatureCode, nil
}

// ResetFeatureCode resets all changes to the "feature_code" field.
func (m *ProductFeatureMutation) ResetFeatureCode() {
	m.feature_code = nil
}

// SetProductID sets the "product_id" field.
func (m *ProductFeatureMutation) SetProductID(i int) {
	m.product = &i
}

// ProductID returns the value of the "product_id" field in the mutation.
func (m *ProductFeatureMutation) ProductID() (r int, exists bool) {
	v := m.product
	if v == nil {
		return
	}
	return *v, true
}

// OldProductID returns the old "product_id" field's value of the ProductFeature entity.
// If the ProductFeature object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProductFeatureMutation) OldProductID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProductID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProductID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProductID: %w", err)
	}
	return oldValue.ProductID, nil
}

// ResetProductID resets all changes to the "product_id" field.
func (m *ProductFeatureMutation) ResetProductID() {
	m.product = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *ProductFeatureMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *ProductFeatureMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the ProductFeature entity.
// If the ProductFeature object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProductFeatureMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *ProductFeatureMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *ProductFeatureMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *ProductFeatureMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the ProductFeature entity.
// If the ProductFeature object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProductFeatureMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *ProductFeatureMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// ClearProduct clears the "product" edge to the Product entity.
func (m *ProductFeatureMutation) ClearProduct() {
	m.clearedproduct = true
	m.clearedFields[productfeature.FieldProductID] = struct{}{}
}

// ProductCleared reports if the "product" edge to the Product entity was cleared.
func (m *ProductFeatureMutation) ProductCleared() bool {
	return m.clearedproduct
}

// ProductIDs returns the "product" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ProductID instead. It exists only for internal usage by the builders.
func (m *ProductFeatureMutation) ProductIDs() (ids []int) {
	if id := m.product; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetProduct resets all changes to the "product" edge.
func (m *ProductFeatureMutation) ResetProduct() {
	m.product = nil
	m.clearedproduct = false
}

// AddLicenseTypeIDs adds the "license_types" edge to the LicenseType entity by ids.
func (m *ProductFeatureMutation) AddLicenseTypeIDs(ids ...int) {
	if m.license_types == nil {
		m.license_types = make(map[int]struct{})
	}
	for i := range ids {
		m.license_types[ids[i]] = struct{}{}
	}
}

// ClearLicenseTypes clears the "license_types" edge to the LicenseType entity.
func (m *ProductFeatureMutation) ClearLicenseTypes() {
	m.clearedlicense_types = true
}

// LicenseTypesCleared reports if the "license_types" edge to the LicenseType entity was cleared.
func (m *ProductFeatureMutation) LicenseTypesCleared() bool {
	return m.clearedlicense_types
}

// RemoveLicenseTypeIDs removes the "license_types" edge to the LicenseType entity by IDs.
func (m *ProductFeatureMutation) RemoveLicenseTypeIDs(ids ...int) {
	if m.removedlicense_types == nil {
		m.removedlicense_types = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.license_types, ids[i])
		m.removedlicense_types[ids[i]] = struct{}{}
	}
}

// RemovedLicenseTypes returns the removed IDs of the "license_types" edge to the LicenseType entity.
func (m *ProductFeatureMutation) RemovedLicenseTypesIDs() (ids []int) {
	for id := range m.removedlicense_types {
		ids = append(ids, id)
	}
	return
}

// LicenseTypesIDs returns the "license_types" edge IDs in the mutation.
func (m *ProductFeatureMutation) LicenseTypesIDs() (ids []int) {
	for id := range m.license_types {
		ids = append(ids, id)
	}
	return
}

// ResetLicenseTypes resets all changes to the "license_types" edge.
func (m *ProductFeatureMutation) ResetLicenseTypes() {
	m.license_types = nil
	m.clearedlicense_types = false
	m.removedlicense_types = nil
}

// AddSoftwareVersionIDs adds the "software_versions" edge to the SoftwareVersion entity by ids.
func (m *ProductFeatureMutation) AddSoftwareVersionIDs(ids ...int) {
	if m.software_versions == nil {
		m.software_versions = make(map[int]struct{})
	}
	for i := range ids {
		m.software_versions[ids[i]] = struct{}{}
	}
}

// ClearSoftwareVersions clears the "software_versions" edge to the SoftwareVersion entity.
func (m *ProductFeatureMutation) ClearSoftwareVersions() {
	m.clearedsoftware_versions = true
}

// SoftwareVersionsCleared reports if the "software_versions" edge to the SoftwareVersion entity was cleared.
func (m *ProductFeatureMutation) SoftwareVersionsCleared() bool {
	return m.clearedsoftware_versions
}

// RemoveSoftwareVersionIDs removes the "software_versions" edge to the SoftwareVersion entity by IDs.
func (m *ProductFeatureMutation) RemoveSoftwareVersionIDs(ids ...int) {
	if m.removedsoftware_versions == nil {
		m.removedsoftware_versions = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.software_versions, ids[i])
		m.removedsoftware_versions[ids[i]] = struct{}{}
	}
}

// RemovedSoftwareVersions returns the removed IDs of the "software_versions" edge to the SoftwareVersion entity.
func (m *ProductFeatureMutation) RemovedSoftwareVersionsIDs() (ids []int) {
	for id := range m.removedsoftware_versions {
		ids = append(ids, id)
	}
	return
}

// SoftwareVersionsIDs returns the "software_versions" edge IDs in the mutation.
func (m *ProductFeatureMutation) SoftwareVersionsIDs() (ids []int) {
	for id := range m.software_versions {
		ids = append(ids, id)
	}
	return
}

// ResetSoftwareVersions resets all changes to the "software_versions" edge.
func (m *ProductFeatureMutation) ResetSoftwareVersions() {
	m.software_versions = nil
	m.clearedsoftware_versions = false
	m.removedsoftware_versions = nil
}

// AddLicenseTypeFeatureIDs adds the "license_type_features" edge to the LicenseTypeFeatures entity by ids.
func (m *ProductFeatureMutation) AddLicenseTypeFeatureIDs(ids ...int) {
	if m.license_type_features == nil {
		m.license_type_features = make(map[int]struct{})
	}
	for i := range ids {
		m.license_type_features[ids[i]] = struct{}{}
	}
}

// ClearLicenseTypeFeatures clears the "license_type_features" edge to the LicenseTypeFeatures entity.
func (m *ProductFeatureMutation) ClearLicenseTypeFeatures() {
	m.clearedlicense_type_features = true
}

// LicenseTypeFeaturesCleared reports if the "license_type_features" edge to the LicenseTypeFeatures entity was cleared.
func (m *ProductFeatureMutation) LicenseTypeFeaturesCleared() bool {
	return m.clearedlicense_type_features
}

// RemoveLicenseTypeFeatureIDs removes the "license_type_features" edge to the LicenseTypeFeatures entity by IDs.
func (m *ProductFeatureMutation) RemoveLicenseTypeFeatureIDs(ids ...int) {
	if m.removedlicense_type_features == nil {
		m.removedlicense_type_features = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.license_type_features, ids[i])
		m.removedlicense_type_features[ids[i]] = struct{}{}
	}
}

// RemovedLicenseTypeFeatures returns the removed IDs of the "license_type_features" edge to the LicenseTypeFeatures entity.
func (m *ProductFeatureMutation) RemovedLicenseTypeFeaturesIDs() (ids []int) {
	for id := range m.removedlicense_type_features {
		ids = append(ids, id)
	}
	return
}

// LicenseTypeFeaturesIDs returns the "license_type_features" edge IDs in the mutation.
func (m *ProductFeatureMutation) LicenseTypeFeaturesIDs() (ids []int) {
	for id := range m.license_type_features {
		ids = append(ids, id)
	}
	return
}

// ResetLicenseTypeFeatures resets all changes to the "license_type_features" edge.
func (m *ProductFeatureMutation) ResetLicenseTypeFeatures() {
	m.license_type_features = nil
	m.clearedlicense_type_features = false
	m.removedlicense_type_features = nil
}

// Where appends a list predicates to the ProductFeatureMutation builder.
func (m *ProductFeatureMutation) Where(ps ...predicate.ProductFeature) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ProductFeatureMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ProductFeatureMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.ProductFeature, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ProductFeatureMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ProductFeatureMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (ProductFeature).
func (m *ProductFeatureMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ProductFeatureMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.feature_name != nil {
		fields = append(fields, productfeature.FieldFeatureName)
	}
	if m.feature_code != nil {
		fields = append(fields, productfeature.FieldFeatureCode)
	}
	if m.product != nil {
		fields = append(fields, productfeature.FieldProductID)
	}
	if m.created_at != nil {
		fields = append(fields, productfeature.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, productfeature.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ProductFeatureMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case productfeature.FieldFeatureName:
		return m.FeatureName()
	case productfeature.FieldFeatureCode:
		return m.FeatureCode()
	case productfeature.FieldProductID:
		return m.ProductID()
	case productfeature.FieldCreatedAt:
		return m.CreatedAt()
	case productfeature.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ProductFeatureMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case productfeature.FieldFeatureName:
		return m.OldFeatureName(ctx)
	case productfeature.FieldFeatureCode:
		return m.OldFeatureCode(ctx)
	case productfeature.FieldProductID:
		return m.OldProductID(ctx)
	case productfeature.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case productfeature.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown ProductFeature field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProductFeatureMutation) SetField(name string, value ent.Value) error {
	switch name {
	case productfeature.FieldFeatureName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFeatureName(v)
		return nil
	case productfeature.FieldFeatureCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFeatureCode(v)
		return nil
	case productfeature.FieldProductID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProductID(v)
		return nil
	case productfeature.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case productfeature.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown ProductFeature field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ProductFeatureMutation) AddedFields() []string {
	var fields []string
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ProductFeatureMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProductFeatureMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown ProductFeature numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ProductFeatureMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ProductFeatureMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ProductFeatureMutation) ClearField(name string) error {
	return fmt.Errorf("unknown ProductFeature nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ProductFeatureMutation) ResetField(name string) error {
	switch name {
	case productfeature.FieldFeatureName:
		m.ResetFeatureName()
		return nil
	case productfeature.FieldFeatureCode:
		m.ResetFeatureCode()
		return nil
	case productfeature.FieldProductID:
		m.ResetProductID()
		return nil
	case productfeature.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case productfeature.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown ProductFeature field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ProductFeatureMutation) AddedEdges() []string {
	edges := make([]string, 0, 4)
	if m.product != nil {
		edges = append(edges, productfeature.EdgeProduct)
	}
	if m.license_types != nil {
		edges = append(edges, productfeature.EdgeLicenseTypes)
	}
	if m.software_versions != nil {
		edges = append(edges, productfeature.EdgeSoftwareVersions)
	}
	if m.license_type_features != nil {
		edges = append(edges, productfeature.EdgeLicenseTypeFeatures)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ProductFeatureMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case productfeature.EdgeProduct:
		if id := m.product; id != nil {
			return []ent.Value{*id}
		}
	case productfeature.EdgeLicenseTypes:
		ids := make([]ent.Value, 0, len(m.license_types))
		for id := range m.license_types {
			ids = append(ids, id)
		}
		return ids
	case productfeature.EdgeSoftwareVersions:
		ids := make([]ent.Value, 0, len(m.software_versions))
		for id := range m.software_versions {
			ids = append(ids, id)
		}
		return ids
	case productfeature.EdgeLicenseTypeFeatures:
		ids := make([]ent.Value, 0, len(m.license_type_features))
		for id := range m.license_type_features {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ProductFeatureMutation) RemovedEdges() []string {
	edges := make([]string, 0, 4)
	if m.removedlicense_types != nil {
		edges = append(edges, productfeature.EdgeLicenseTypes)
	}
	if m.removedsoftware_versions != nil {
		edges = append(edges, productfeature.EdgeSoftwareVersions)
	}
	if m.removedlicense_type_features != nil {
		edges = append(edges, productfeature.EdgeLicenseTypeFeatures)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ProductFeatureMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case productfeature.EdgeLicenseTypes:
		ids := make([]ent.Value, 0, len(m.removedlicense_types))
		for id := range m.removedlicense_types {
			ids = append(ids, id)
		}
		return ids
	case productfeature.EdgeSoftwareVersions:
		ids := make([]ent.Value, 0, len(m.removedsoftware_versions))
		for id := range m.removedsoftware_versions {
			ids = append(ids, id)
		}
		return ids
	case productfeature.EdgeLicenseTypeFeatures:
		ids := make([]ent.Value, 0, len(m.removedlicense_type_features))
		for id := range m.removedlicense_type_features {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ProductFeatureMutation) ClearedEdges() []string {
	edges := make([]string, 0, 4)
	if m.clearedproduct {
		edges = append(edges, productfeature.EdgeProduct)
	}
	if m.clearedlicense_types {
		edges = append(edges, productfeature.EdgeLicenseTypes)
	}
	if m.clearedsoftware_versions {
		edges = append(edges, productfeature.EdgeSoftwareVersions)
	}
	if m.clearedlicense_type_features {
		edges = append(edges, productfeature.EdgeLicenseTypeFeatures)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ProductFeatureMutation) EdgeCleared(name string) bool {
	switch name {
	case productfeature.EdgeProduct:
		return m.clearedproduct
	case productfeature.EdgeLicenseTypes:
		return m.clearedlicense_types
	case productfeature.EdgeSoftwareVersions:
		return m.clearedsoftware_versions
	case productfeature.EdgeLicenseTypeFeatures:
		return m.clearedlicense_type_features
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ProductFeatureMutation) ClearEdge(name string) error {
	switch name {
	case productfeature.EdgeProduct:
		m.ClearProduct()
		return nil
	}
	return fmt.Errorf("unknown ProductFeature unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ProductFeatureMutation) ResetEdge(name string) error {
	switch name {
	case productfeature.EdgeProduct:
		m.ResetProduct()
		return nil
	case productfeature.EdgeLicenseTypes:
		m.ResetLicenseTypes()
		return nil
	case productfeature.EdgeSoftwareVersions:
		m.ResetSoftwareVersions()
		return nil
	case productfeature.EdgeLicenseTypeFeatures:
		m.ResetLicenseTypeFeatures()
		return nil
	}
	return fmt.Errorf("unknown ProductFeature edge %s", name)
}

// ProductManagerMutation represents an operation that mutates the ProductManager nodes in the graph.
type ProductManagerMutation struct {
	config
	op             Op
	typ            string
	id             *int
	role           *productmanager.Role
	permissions    *productmanager.Permissions
	remark         *string
	created_at     *time.Time
	updated_at     *time.Time
	clearedFields  map[string]struct{}
	user           *int
	cleareduser    bool
	product        *int
	clearedproduct bool
	done           bool
	oldValue       func(context.Context) (*ProductManager, error)
	predicates     []predicate.ProductManager
}

var _ ent.Mutation = (*ProductManagerMutation)(nil)

// productmanagerOption allows management of the mutation configuration using functional options.
type productmanagerOption func(*ProductManagerMutation)

// newProductManagerMutation creates new mutation for the ProductManager entity.
func newProductManagerMutation(c config, op Op, opts ...productmanagerOption) *ProductManagerMutation {
	m := &ProductManagerMutation{
		config:        c,
		op:            op,
		typ:           TypeProductManager,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withProductManagerID sets the ID field of the mutation.
func withProductManagerID(id int) productmanagerOption {
	return func(m *ProductManagerMutation) {
		var (
			err   error
			once  sync.Once
			value *ProductManager
		)
		m.oldValue = func(ctx context.Context) (*ProductManager, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ProductManager.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withProductManager sets the old ProductManager of the mutation.
func withProductManager(node *ProductManager) productmanagerOption {
	return func(m *ProductManagerMutation) {
		m.oldValue = func(context.Context) (*ProductManager, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ProductManagerMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ProductManagerMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of ProductManager entities.
func (m *ProductManagerMutation) SetID(id int) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ProductManagerMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ProductManagerMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().ProductManager.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetRole sets the "role" field.
func (m *ProductManagerMutation) SetRole(pr productmanager.Role) {
	m.role = &pr
}

// Role returns the value of the "role" field in the mutation.
func (m *ProductManagerMutation) Role() (r productmanager.Role, exists bool) {
	v := m.role
	if v == nil {
		return
	}
	return *v, true
}

// OldRole returns the old "role" field's value of the ProductManager entity.
// If the ProductManager object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProductManagerMutation) OldRole(ctx context.Context) (v productmanager.Role, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRole is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRole requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRole: %w", err)
	}
	return oldValue.Role, nil
}

// ResetRole resets all changes to the "role" field.
func (m *ProductManagerMutation) ResetRole() {
	m.role = nil
}

// SetUserID sets the "user_id" field.
func (m *ProductManagerMutation) SetUserID(i int) {
	m.user = &i
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *ProductManagerMutation) UserID() (r int, exists bool) {
	v := m.user
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the ProductManager entity.
// If the ProductManager object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProductManagerMutation) OldUserID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ResetUserID resets all changes to the "user_id" field.
func (m *ProductManagerMutation) ResetUserID() {
	m.user = nil
}

// SetProductID sets the "product_id" field.
func (m *ProductManagerMutation) SetProductID(i int) {
	m.product = &i
}

// ProductID returns the value of the "product_id" field in the mutation.
func (m *ProductManagerMutation) ProductID() (r int, exists bool) {
	v := m.product
	if v == nil {
		return
	}
	return *v, true
}

// OldProductID returns the old "product_id" field's value of the ProductManager entity.
// If the ProductManager object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProductManagerMutation) OldProductID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProductID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProductID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProductID: %w", err)
	}
	return oldValue.ProductID, nil
}

// ResetProductID resets all changes to the "product_id" field.
func (m *ProductManagerMutation) ResetProductID() {
	m.product = nil
}

// SetPermissions sets the "permissions" field.
func (m *ProductManagerMutation) SetPermissions(pr productmanager.Permissions) {
	m.permissions = &pr
}

// Permissions returns the value of the "permissions" field in the mutation.
func (m *ProductManagerMutation) Permissions() (r productmanager.Permissions, exists bool) {
	v := m.permissions
	if v == nil {
		return
	}
	return *v, true
}

// OldPermissions returns the old "permissions" field's value of the ProductManager entity.
// If the ProductManager object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProductManagerMutation) OldPermissions(ctx context.Context) (v productmanager.Permissions, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPermissions is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPermissions requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPermissions: %w", err)
	}
	return oldValue.Permissions, nil
}

// ClearPermissions clears the value of the "permissions" field.
func (m *ProductManagerMutation) ClearPermissions() {
	m.permissions = nil
	m.clearedFields[productmanager.FieldPermissions] = struct{}{}
}

// PermissionsCleared returns if the "permissions" field was cleared in this mutation.
func (m *ProductManagerMutation) PermissionsCleared() bool {
	_, ok := m.clearedFields[productmanager.FieldPermissions]
	return ok
}

// ResetPermissions resets all changes to the "permissions" field.
func (m *ProductManagerMutation) ResetPermissions() {
	m.permissions = nil
	delete(m.clearedFields, productmanager.FieldPermissions)
}

// SetRemark sets the "remark" field.
func (m *ProductManagerMutation) SetRemark(s string) {
	m.remark = &s
}

// Remark returns the value of the "remark" field in the mutation.
func (m *ProductManagerMutation) Remark() (r string, exists bool) {
	v := m.remark
	if v == nil {
		return
	}
	return *v, true
}

// OldRemark returns the old "remark" field's value of the ProductManager entity.
// If the ProductManager object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProductManagerMutation) OldRemark(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRemark is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRemark requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRemark: %w", err)
	}
	return oldValue.Remark, nil
}

// ClearRemark clears the value of the "remark" field.
func (m *ProductManagerMutation) ClearRemark() {
	m.remark = nil
	m.clearedFields[productmanager.FieldRemark] = struct{}{}
}

// RemarkCleared returns if the "remark" field was cleared in this mutation.
func (m *ProductManagerMutation) RemarkCleared() bool {
	_, ok := m.clearedFields[productmanager.FieldRemark]
	return ok
}

// ResetRemark resets all changes to the "remark" field.
func (m *ProductManagerMutation) ResetRemark() {
	m.remark = nil
	delete(m.clearedFields, productmanager.FieldRemark)
}

// SetCreatedAt sets the "created_at" field.
func (m *ProductManagerMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *ProductManagerMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the ProductManager entity.
// If the ProductManager object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProductManagerMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *ProductManagerMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *ProductManagerMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *ProductManagerMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the ProductManager entity.
// If the ProductManager object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProductManagerMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *ProductManagerMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// ClearUser clears the "user" edge to the User entity.
func (m *ProductManagerMutation) ClearUser() {
	m.cleareduser = true
	m.clearedFields[productmanager.FieldUserID] = struct{}{}
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *ProductManagerMutation) UserCleared() bool {
	return m.cleareduser
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *ProductManagerMutation) UserIDs() (ids []int) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *ProductManagerMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// ClearProduct clears the "product" edge to the Product entity.
func (m *ProductManagerMutation) ClearProduct() {
	m.clearedproduct = true
	m.clearedFields[productmanager.FieldProductID] = struct{}{}
}

// ProductCleared reports if the "product" edge to the Product entity was cleared.
func (m *ProductManagerMutation) ProductCleared() bool {
	return m.clearedproduct
}

// ProductIDs returns the "product" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ProductID instead. It exists only for internal usage by the builders.
func (m *ProductManagerMutation) ProductIDs() (ids []int) {
	if id := m.product; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetProduct resets all changes to the "product" edge.
func (m *ProductManagerMutation) ResetProduct() {
	m.product = nil
	m.clearedproduct = false
}

// Where appends a list predicates to the ProductManagerMutation builder.
func (m *ProductManagerMutation) Where(ps ...predicate.ProductManager) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ProductManagerMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ProductManagerMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.ProductManager, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ProductManagerMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ProductManagerMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (ProductManager).
func (m *ProductManagerMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ProductManagerMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.role != nil {
		fields = append(fields, productmanager.FieldRole)
	}
	if m.user != nil {
		fields = append(fields, productmanager.FieldUserID)
	}
	if m.product != nil {
		fields = append(fields, productmanager.FieldProductID)
	}
	if m.permissions != nil {
		fields = append(fields, productmanager.FieldPermissions)
	}
	if m.remark != nil {
		fields = append(fields, productmanager.FieldRemark)
	}
	if m.created_at != nil {
		fields = append(fields, productmanager.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, productmanager.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ProductManagerMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case productmanager.FieldRole:
		return m.Role()
	case productmanager.FieldUserID:
		return m.UserID()
	case productmanager.FieldProductID:
		return m.ProductID()
	case productmanager.FieldPermissions:
		return m.Permissions()
	case productmanager.FieldRemark:
		return m.Remark()
	case productmanager.FieldCreatedAt:
		return m.CreatedAt()
	case productmanager.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ProductManagerMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case productmanager.FieldRole:
		return m.OldRole(ctx)
	case productmanager.FieldUserID:
		return m.OldUserID(ctx)
	case productmanager.FieldProductID:
		return m.OldProductID(ctx)
	case productmanager.FieldPermissions:
		return m.OldPermissions(ctx)
	case productmanager.FieldRemark:
		return m.OldRemark(ctx)
	case productmanager.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case productmanager.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown ProductManager field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProductManagerMutation) SetField(name string, value ent.Value) error {
	switch name {
	case productmanager.FieldRole:
		v, ok := value.(productmanager.Role)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRole(v)
		return nil
	case productmanager.FieldUserID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case productmanager.FieldProductID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProductID(v)
		return nil
	case productmanager.FieldPermissions:
		v, ok := value.(productmanager.Permissions)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPermissions(v)
		return nil
	case productmanager.FieldRemark:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRemark(v)
		return nil
	case productmanager.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case productmanager.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown ProductManager field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ProductManagerMutation) AddedFields() []string {
	var fields []string
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ProductManagerMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProductManagerMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown ProductManager numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ProductManagerMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(productmanager.FieldPermissions) {
		fields = append(fields, productmanager.FieldPermissions)
	}
	if m.FieldCleared(productmanager.FieldRemark) {
		fields = append(fields, productmanager.FieldRemark)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ProductManagerMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ProductManagerMutation) ClearField(name string) error {
	switch name {
	case productmanager.FieldPermissions:
		m.ClearPermissions()
		return nil
	case productmanager.FieldRemark:
		m.ClearRemark()
		return nil
	}
	return fmt.Errorf("unknown ProductManager nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ProductManagerMutation) ResetField(name string) error {
	switch name {
	case productmanager.FieldRole:
		m.ResetRole()
		return nil
	case productmanager.FieldUserID:
		m.ResetUserID()
		return nil
	case productmanager.FieldProductID:
		m.ResetProductID()
		return nil
	case productmanager.FieldPermissions:
		m.ResetPermissions()
		return nil
	case productmanager.FieldRemark:
		m.ResetRemark()
		return nil
	case productmanager.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case productmanager.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown ProductManager field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ProductManagerMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.user != nil {
		edges = append(edges, productmanager.EdgeUser)
	}
	if m.product != nil {
		edges = append(edges, productmanager.EdgeProduct)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ProductManagerMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case productmanager.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	case productmanager.EdgeProduct:
		if id := m.product; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ProductManagerMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ProductManagerMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ProductManagerMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.cleareduser {
		edges = append(edges, productmanager.EdgeUser)
	}
	if m.clearedproduct {
		edges = append(edges, productmanager.EdgeProduct)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ProductManagerMutation) EdgeCleared(name string) bool {
	switch name {
	case productmanager.EdgeUser:
		return m.cleareduser
	case productmanager.EdgeProduct:
		return m.clearedproduct
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ProductManagerMutation) ClearEdge(name string) error {
	switch name {
	case productmanager.EdgeUser:
		m.ClearUser()
		return nil
	case productmanager.EdgeProduct:
		m.ClearProduct()
		return nil
	}
	return fmt.Errorf("unknown ProductManager unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ProductManagerMutation) ResetEdge(name string) error {
	switch name {
	case productmanager.EdgeUser:
		m.ResetUser()
		return nil
	case productmanager.EdgeProduct:
		m.ResetProduct()
		return nil
	}
	return fmt.Errorf("unknown ProductManager edge %s", name)
}

// SoftwareVersionMutation represents an operation that mutates the SoftwareVersion nodes in the graph.
type SoftwareVersionMutation struct {
	config
	op                       Op
	typ                      string
	id                       *int
	version                  *string
	release_date             *time.Time
	update_log               *string
	remark                   *string
	created_at               *time.Time
	updated_at               *time.Time
	clearedFields            map[string]struct{}
	features                 map[int]struct{}
	removedfeatures          map[int]struct{}
	clearedfeatures          bool
	firmware_versions        map[int]struct{}
	removedfirmware_versions map[int]struct{}
	clearedfirmware_versions bool
	product                  *int
	clearedproduct           bool
	creator                  *int
	clearedcreator           bool
	done                     bool
	oldValue                 func(context.Context) (*SoftwareVersion, error)
	predicates               []predicate.SoftwareVersion
}

var _ ent.Mutation = (*SoftwareVersionMutation)(nil)

// softwareversionOption allows management of the mutation configuration using functional options.
type softwareversionOption func(*SoftwareVersionMutation)

// newSoftwareVersionMutation creates new mutation for the SoftwareVersion entity.
func newSoftwareVersionMutation(c config, op Op, opts ...softwareversionOption) *SoftwareVersionMutation {
	m := &SoftwareVersionMutation{
		config:        c,
		op:            op,
		typ:           TypeSoftwareVersion,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSoftwareVersionID sets the ID field of the mutation.
func withSoftwareVersionID(id int) softwareversionOption {
	return func(m *SoftwareVersionMutation) {
		var (
			err   error
			once  sync.Once
			value *SoftwareVersion
		)
		m.oldValue = func(ctx context.Context) (*SoftwareVersion, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().SoftwareVersion.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSoftwareVersion sets the old SoftwareVersion of the mutation.
func withSoftwareVersion(node *SoftwareVersion) softwareversionOption {
	return func(m *SoftwareVersionMutation) {
		m.oldValue = func(context.Context) (*SoftwareVersion, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SoftwareVersionMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SoftwareVersionMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SoftwareVersionMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SoftwareVersionMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().SoftwareVersion.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetProductID sets the "product_id" field.
func (m *SoftwareVersionMutation) SetProductID(i int) {
	m.product = &i
}

// ProductID returns the value of the "product_id" field in the mutation.
func (m *SoftwareVersionMutation) ProductID() (r int, exists bool) {
	v := m.product
	if v == nil {
		return
	}
	return *v, true
}

// OldProductID returns the old "product_id" field's value of the SoftwareVersion entity.
// If the SoftwareVersion object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SoftwareVersionMutation) OldProductID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProductID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProductID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProductID: %w", err)
	}
	return oldValue.ProductID, nil
}

// ResetProductID resets all changes to the "product_id" field.
func (m *SoftwareVersionMutation) ResetProductID() {
	m.product = nil
}

// SetVersion sets the "version" field.
func (m *SoftwareVersionMutation) SetVersion(s string) {
	m.version = &s
}

// Version returns the value of the "version" field in the mutation.
func (m *SoftwareVersionMutation) Version() (r string, exists bool) {
	v := m.version
	if v == nil {
		return
	}
	return *v, true
}

// OldVersion returns the old "version" field's value of the SoftwareVersion entity.
// If the SoftwareVersion object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SoftwareVersionMutation) OldVersion(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldVersion is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldVersion requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVersion: %w", err)
	}
	return oldValue.Version, nil
}

// ResetVersion resets all changes to the "version" field.
func (m *SoftwareVersionMutation) ResetVersion() {
	m.version = nil
}

// SetReleaseDate sets the "release_date" field.
func (m *SoftwareVersionMutation) SetReleaseDate(t time.Time) {
	m.release_date = &t
}

// ReleaseDate returns the value of the "release_date" field in the mutation.
func (m *SoftwareVersionMutation) ReleaseDate() (r time.Time, exists bool) {
	v := m.release_date
	if v == nil {
		return
	}
	return *v, true
}

// OldReleaseDate returns the old "release_date" field's value of the SoftwareVersion entity.
// If the SoftwareVersion object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SoftwareVersionMutation) OldReleaseDate(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldReleaseDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldReleaseDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldReleaseDate: %w", err)
	}
	return oldValue.ReleaseDate, nil
}

// ResetReleaseDate resets all changes to the "release_date" field.
func (m *SoftwareVersionMutation) ResetReleaseDate() {
	m.release_date = nil
}

// SetUpdateLog sets the "update_log" field.
func (m *SoftwareVersionMutation) SetUpdateLog(s string) {
	m.update_log = &s
}

// UpdateLog returns the value of the "update_log" field in the mutation.
func (m *SoftwareVersionMutation) UpdateLog() (r string, exists bool) {
	v := m.update_log
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateLog returns the old "update_log" field's value of the SoftwareVersion entity.
// If the SoftwareVersion object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SoftwareVersionMutation) OldUpdateLog(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateLog is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateLog requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateLog: %w", err)
	}
	return oldValue.UpdateLog, nil
}

// ClearUpdateLog clears the value of the "update_log" field.
func (m *SoftwareVersionMutation) ClearUpdateLog() {
	m.update_log = nil
	m.clearedFields[softwareversion.FieldUpdateLog] = struct{}{}
}

// UpdateLogCleared returns if the "update_log" field was cleared in this mutation.
func (m *SoftwareVersionMutation) UpdateLogCleared() bool {
	_, ok := m.clearedFields[softwareversion.FieldUpdateLog]
	return ok
}

// ResetUpdateLog resets all changes to the "update_log" field.
func (m *SoftwareVersionMutation) ResetUpdateLog() {
	m.update_log = nil
	delete(m.clearedFields, softwareversion.FieldUpdateLog)
}

// SetRemark sets the "remark" field.
func (m *SoftwareVersionMutation) SetRemark(s string) {
	m.remark = &s
}

// Remark returns the value of the "remark" field in the mutation.
func (m *SoftwareVersionMutation) Remark() (r string, exists bool) {
	v := m.remark
	if v == nil {
		return
	}
	return *v, true
}

// OldRemark returns the old "remark" field's value of the SoftwareVersion entity.
// If the SoftwareVersion object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SoftwareVersionMutation) OldRemark(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRemark is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRemark requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRemark: %w", err)
	}
	return oldValue.Remark, nil
}

// ClearRemark clears the value of the "remark" field.
func (m *SoftwareVersionMutation) ClearRemark() {
	m.remark = nil
	m.clearedFields[softwareversion.FieldRemark] = struct{}{}
}

// RemarkCleared returns if the "remark" field was cleared in this mutation.
func (m *SoftwareVersionMutation) RemarkCleared() bool {
	_, ok := m.clearedFields[softwareversion.FieldRemark]
	return ok
}

// ResetRemark resets all changes to the "remark" field.
func (m *SoftwareVersionMutation) ResetRemark() {
	m.remark = nil
	delete(m.clearedFields, softwareversion.FieldRemark)
}

// SetCreatedBy sets the "created_by" field.
func (m *SoftwareVersionMutation) SetCreatedBy(i int) {
	m.creator = &i
}

// CreatedBy returns the value of the "created_by" field in the mutation.
func (m *SoftwareVersionMutation) CreatedBy() (r int, exists bool) {
	v := m.creator
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedBy returns the old "created_by" field's value of the SoftwareVersion entity.
// If the SoftwareVersion object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SoftwareVersionMutation) OldCreatedBy(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedBy: %w", err)
	}
	return oldValue.CreatedBy, nil
}

// ResetCreatedBy resets all changes to the "created_by" field.
func (m *SoftwareVersionMutation) ResetCreatedBy() {
	m.creator = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *SoftwareVersionMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *SoftwareVersionMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the SoftwareVersion entity.
// If the SoftwareVersion object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SoftwareVersionMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *SoftwareVersionMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *SoftwareVersionMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *SoftwareVersionMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the SoftwareVersion entity.
// If the SoftwareVersion object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SoftwareVersionMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *SoftwareVersionMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// AddFeatureIDs adds the "features" edge to the ProductFeature entity by ids.
func (m *SoftwareVersionMutation) AddFeatureIDs(ids ...int) {
	if m.features == nil {
		m.features = make(map[int]struct{})
	}
	for i := range ids {
		m.features[ids[i]] = struct{}{}
	}
}

// ClearFeatures clears the "features" edge to the ProductFeature entity.
func (m *SoftwareVersionMutation) ClearFeatures() {
	m.clearedfeatures = true
}

// FeaturesCleared reports if the "features" edge to the ProductFeature entity was cleared.
func (m *SoftwareVersionMutation) FeaturesCleared() bool {
	return m.clearedfeatures
}

// RemoveFeatureIDs removes the "features" edge to the ProductFeature entity by IDs.
func (m *SoftwareVersionMutation) RemoveFeatureIDs(ids ...int) {
	if m.removedfeatures == nil {
		m.removedfeatures = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.features, ids[i])
		m.removedfeatures[ids[i]] = struct{}{}
	}
}

// RemovedFeatures returns the removed IDs of the "features" edge to the ProductFeature entity.
func (m *SoftwareVersionMutation) RemovedFeaturesIDs() (ids []int) {
	for id := range m.removedfeatures {
		ids = append(ids, id)
	}
	return
}

// FeaturesIDs returns the "features" edge IDs in the mutation.
func (m *SoftwareVersionMutation) FeaturesIDs() (ids []int) {
	for id := range m.features {
		ids = append(ids, id)
	}
	return
}

// ResetFeatures resets all changes to the "features" edge.
func (m *SoftwareVersionMutation) ResetFeatures() {
	m.features = nil
	m.clearedfeatures = false
	m.removedfeatures = nil
}

// AddFirmwareVersionIDs adds the "firmware_versions" edge to the FirmwareVersion entity by ids.
func (m *SoftwareVersionMutation) AddFirmwareVersionIDs(ids ...int) {
	if m.firmware_versions == nil {
		m.firmware_versions = make(map[int]struct{})
	}
	for i := range ids {
		m.firmware_versions[ids[i]] = struct{}{}
	}
}

// ClearFirmwareVersions clears the "firmware_versions" edge to the FirmwareVersion entity.
func (m *SoftwareVersionMutation) ClearFirmwareVersions() {
	m.clearedfirmware_versions = true
}

// FirmwareVersionsCleared reports if the "firmware_versions" edge to the FirmwareVersion entity was cleared.
func (m *SoftwareVersionMutation) FirmwareVersionsCleared() bool {
	return m.clearedfirmware_versions
}

// RemoveFirmwareVersionIDs removes the "firmware_versions" edge to the FirmwareVersion entity by IDs.
func (m *SoftwareVersionMutation) RemoveFirmwareVersionIDs(ids ...int) {
	if m.removedfirmware_versions == nil {
		m.removedfirmware_versions = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.firmware_versions, ids[i])
		m.removedfirmware_versions[ids[i]] = struct{}{}
	}
}

// RemovedFirmwareVersions returns the removed IDs of the "firmware_versions" edge to the FirmwareVersion entity.
func (m *SoftwareVersionMutation) RemovedFirmwareVersionsIDs() (ids []int) {
	for id := range m.removedfirmware_versions {
		ids = append(ids, id)
	}
	return
}

// FirmwareVersionsIDs returns the "firmware_versions" edge IDs in the mutation.
func (m *SoftwareVersionMutation) FirmwareVersionsIDs() (ids []int) {
	for id := range m.firmware_versions {
		ids = append(ids, id)
	}
	return
}

// ResetFirmwareVersions resets all changes to the "firmware_versions" edge.
func (m *SoftwareVersionMutation) ResetFirmwareVersions() {
	m.firmware_versions = nil
	m.clearedfirmware_versions = false
	m.removedfirmware_versions = nil
}

// ClearProduct clears the "product" edge to the Product entity.
func (m *SoftwareVersionMutation) ClearProduct() {
	m.clearedproduct = true
	m.clearedFields[softwareversion.FieldProductID] = struct{}{}
}

// ProductCleared reports if the "product" edge to the Product entity was cleared.
func (m *SoftwareVersionMutation) ProductCleared() bool {
	return m.clearedproduct
}

// ProductIDs returns the "product" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ProductID instead. It exists only for internal usage by the builders.
func (m *SoftwareVersionMutation) ProductIDs() (ids []int) {
	if id := m.product; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetProduct resets all changes to the "product" edge.
func (m *SoftwareVersionMutation) ResetProduct() {
	m.product = nil
	m.clearedproduct = false
}

// SetCreatorID sets the "creator" edge to the User entity by id.
func (m *SoftwareVersionMutation) SetCreatorID(id int) {
	m.creator = &id
}

// ClearCreator clears the "creator" edge to the User entity.
func (m *SoftwareVersionMutation) ClearCreator() {
	m.clearedcreator = true
	m.clearedFields[softwareversion.FieldCreatedBy] = struct{}{}
}

// CreatorCleared reports if the "creator" edge to the User entity was cleared.
func (m *SoftwareVersionMutation) CreatorCleared() bool {
	return m.clearedcreator
}

// CreatorID returns the "creator" edge ID in the mutation.
func (m *SoftwareVersionMutation) CreatorID() (id int, exists bool) {
	if m.creator != nil {
		return *m.creator, true
	}
	return
}

// CreatorIDs returns the "creator" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// CreatorID instead. It exists only for internal usage by the builders.
func (m *SoftwareVersionMutation) CreatorIDs() (ids []int) {
	if id := m.creator; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetCreator resets all changes to the "creator" edge.
func (m *SoftwareVersionMutation) ResetCreator() {
	m.creator = nil
	m.clearedcreator = false
}

// Where appends a list predicates to the SoftwareVersionMutation builder.
func (m *SoftwareVersionMutation) Where(ps ...predicate.SoftwareVersion) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the SoftwareVersionMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *SoftwareVersionMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.SoftwareVersion, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *SoftwareVersionMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *SoftwareVersionMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (SoftwareVersion).
func (m *SoftwareVersionMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SoftwareVersionMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.product != nil {
		fields = append(fields, softwareversion.FieldProductID)
	}
	if m.version != nil {
		fields = append(fields, softwareversion.FieldVersion)
	}
	if m.release_date != nil {
		fields = append(fields, softwareversion.FieldReleaseDate)
	}
	if m.update_log != nil {
		fields = append(fields, softwareversion.FieldUpdateLog)
	}
	if m.remark != nil {
		fields = append(fields, softwareversion.FieldRemark)
	}
	if m.creator != nil {
		fields = append(fields, softwareversion.FieldCreatedBy)
	}
	if m.created_at != nil {
		fields = append(fields, softwareversion.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, softwareversion.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SoftwareVersionMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case softwareversion.FieldProductID:
		return m.ProductID()
	case softwareversion.FieldVersion:
		return m.Version()
	case softwareversion.FieldReleaseDate:
		return m.ReleaseDate()
	case softwareversion.FieldUpdateLog:
		return m.UpdateLog()
	case softwareversion.FieldRemark:
		return m.Remark()
	case softwareversion.FieldCreatedBy:
		return m.CreatedBy()
	case softwareversion.FieldCreatedAt:
		return m.CreatedAt()
	case softwareversion.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SoftwareVersionMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case softwareversion.FieldProductID:
		return m.OldProductID(ctx)
	case softwareversion.FieldVersion:
		return m.OldVersion(ctx)
	case softwareversion.FieldReleaseDate:
		return m.OldReleaseDate(ctx)
	case softwareversion.FieldUpdateLog:
		return m.OldUpdateLog(ctx)
	case softwareversion.FieldRemark:
		return m.OldRemark(ctx)
	case softwareversion.FieldCreatedBy:
		return m.OldCreatedBy(ctx)
	case softwareversion.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case softwareversion.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown SoftwareVersion field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SoftwareVersionMutation) SetField(name string, value ent.Value) error {
	switch name {
	case softwareversion.FieldProductID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProductID(v)
		return nil
	case softwareversion.FieldVersion:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVersion(v)
		return nil
	case softwareversion.FieldReleaseDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetReleaseDate(v)
		return nil
	case softwareversion.FieldUpdateLog:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateLog(v)
		return nil
	case softwareversion.FieldRemark:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRemark(v)
		return nil
	case softwareversion.FieldCreatedBy:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedBy(v)
		return nil
	case softwareversion.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case softwareversion.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown SoftwareVersion field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SoftwareVersionMutation) AddedFields() []string {
	var fields []string
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SoftwareVersionMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SoftwareVersionMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown SoftwareVersion numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SoftwareVersionMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(softwareversion.FieldUpdateLog) {
		fields = append(fields, softwareversion.FieldUpdateLog)
	}
	if m.FieldCleared(softwareversion.FieldRemark) {
		fields = append(fields, softwareversion.FieldRemark)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SoftwareVersionMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SoftwareVersionMutation) ClearField(name string) error {
	switch name {
	case softwareversion.FieldUpdateLog:
		m.ClearUpdateLog()
		return nil
	case softwareversion.FieldRemark:
		m.ClearRemark()
		return nil
	}
	return fmt.Errorf("unknown SoftwareVersion nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SoftwareVersionMutation) ResetField(name string) error {
	switch name {
	case softwareversion.FieldProductID:
		m.ResetProductID()
		return nil
	case softwareversion.FieldVersion:
		m.ResetVersion()
		return nil
	case softwareversion.FieldReleaseDate:
		m.ResetReleaseDate()
		return nil
	case softwareversion.FieldUpdateLog:
		m.ResetUpdateLog()
		return nil
	case softwareversion.FieldRemark:
		m.ResetRemark()
		return nil
	case softwareversion.FieldCreatedBy:
		m.ResetCreatedBy()
		return nil
	case softwareversion.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case softwareversion.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown SoftwareVersion field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SoftwareVersionMutation) AddedEdges() []string {
	edges := make([]string, 0, 4)
	if m.features != nil {
		edges = append(edges, softwareversion.EdgeFeatures)
	}
	if m.firmware_versions != nil {
		edges = append(edges, softwareversion.EdgeFirmwareVersions)
	}
	if m.product != nil {
		edges = append(edges, softwareversion.EdgeProduct)
	}
	if m.creator != nil {
		edges = append(edges, softwareversion.EdgeCreator)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SoftwareVersionMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case softwareversion.EdgeFeatures:
		ids := make([]ent.Value, 0, len(m.features))
		for id := range m.features {
			ids = append(ids, id)
		}
		return ids
	case softwareversion.EdgeFirmwareVersions:
		ids := make([]ent.Value, 0, len(m.firmware_versions))
		for id := range m.firmware_versions {
			ids = append(ids, id)
		}
		return ids
	case softwareversion.EdgeProduct:
		if id := m.product; id != nil {
			return []ent.Value{*id}
		}
	case softwareversion.EdgeCreator:
		if id := m.creator; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SoftwareVersionMutation) RemovedEdges() []string {
	edges := make([]string, 0, 4)
	if m.removedfeatures != nil {
		edges = append(edges, softwareversion.EdgeFeatures)
	}
	if m.removedfirmware_versions != nil {
		edges = append(edges, softwareversion.EdgeFirmwareVersions)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SoftwareVersionMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case softwareversion.EdgeFeatures:
		ids := make([]ent.Value, 0, len(m.removedfeatures))
		for id := range m.removedfeatures {
			ids = append(ids, id)
		}
		return ids
	case softwareversion.EdgeFirmwareVersions:
		ids := make([]ent.Value, 0, len(m.removedfirmware_versions))
		for id := range m.removedfirmware_versions {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SoftwareVersionMutation) ClearedEdges() []string {
	edges := make([]string, 0, 4)
	if m.clearedfeatures {
		edges = append(edges, softwareversion.EdgeFeatures)
	}
	if m.clearedfirmware_versions {
		edges = append(edges, softwareversion.EdgeFirmwareVersions)
	}
	if m.clearedproduct {
		edges = append(edges, softwareversion.EdgeProduct)
	}
	if m.clearedcreator {
		edges = append(edges, softwareversion.EdgeCreator)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SoftwareVersionMutation) EdgeCleared(name string) bool {
	switch name {
	case softwareversion.EdgeFeatures:
		return m.clearedfeatures
	case softwareversion.EdgeFirmwareVersions:
		return m.clearedfirmware_versions
	case softwareversion.EdgeProduct:
		return m.clearedproduct
	case softwareversion.EdgeCreator:
		return m.clearedcreator
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SoftwareVersionMutation) ClearEdge(name string) error {
	switch name {
	case softwareversion.EdgeProduct:
		m.ClearProduct()
		return nil
	case softwareversion.EdgeCreator:
		m.ClearCreator()
		return nil
	}
	return fmt.Errorf("unknown SoftwareVersion unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SoftwareVersionMutation) ResetEdge(name string) error {
	switch name {
	case softwareversion.EdgeFeatures:
		m.ResetFeatures()
		return nil
	case softwareversion.EdgeFirmwareVersions:
		m.ResetFirmwareVersions()
		return nil
	case softwareversion.EdgeProduct:
		m.ResetProduct()
		return nil
	case softwareversion.EdgeCreator:
		m.ResetCreator()
		return nil
	}
	return fmt.Errorf("unknown SoftwareVersion edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op                     Op
	typ                    string
	id                     *int
	email                  *string
	password               *string
	is_enabled             *bool
	last_login_at          *time.Time
	created_at             *time.Time
	updated_at             *time.Time
	clearedFields          map[string]struct{}
	products               map[int]struct{}
	removedproducts        map[int]struct{}
	clearedproducts        bool
	audit_logs             map[int]struct{}
	removedaudit_logs      map[int]struct{}
	clearedaudit_logs      bool
	created_devices        map[int]struct{}
	removedcreated_devices map[int]struct{}
	clearedcreated_devices bool
	updated_devices        map[int]struct{}
	removedupdated_devices map[int]struct{}
	clearedupdated_devices bool
	done                   bool
	oldValue               func(context.Context) (*User, error)
	predicates             []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id int) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of User entities.
func (m *UserMutation) SetID(id int) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetEmail sets the "email" field.
func (m *UserMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the value of the "email" field in the mutation.
func (m *UserMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "email" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ResetEmail resets all changes to the "email" field.
func (m *UserMutation) ResetEmail() {
	m.email = nil
}

// SetPassword sets the "password" field.
func (m *UserMutation) SetPassword(s string) {
	m.password = &s
}

// Password returns the value of the "password" field in the mutation.
func (m *UserMutation) Password() (r string, exists bool) {
	v := m.password
	if v == nil {
		return
	}
	return *v, true
}

// OldPassword returns the old "password" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPassword(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPassword is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPassword requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPassword: %w", err)
	}
	return oldValue.Password, nil
}

// ResetPassword resets all changes to the "password" field.
func (m *UserMutation) ResetPassword() {
	m.password = nil
}

// SetIsEnabled sets the "is_enabled" field.
func (m *UserMutation) SetIsEnabled(b bool) {
	m.is_enabled = &b
}

// IsEnabled returns the value of the "is_enabled" field in the mutation.
func (m *UserMutation) IsEnabled() (r bool, exists bool) {
	v := m.is_enabled
	if v == nil {
		return
	}
	return *v, true
}

// OldIsEnabled returns the old "is_enabled" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldIsEnabled(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsEnabled is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsEnabled requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsEnabled: %w", err)
	}
	return oldValue.IsEnabled, nil
}

// ResetIsEnabled resets all changes to the "is_enabled" field.
func (m *UserMutation) ResetIsEnabled() {
	m.is_enabled = nil
}

// SetLastLoginAt sets the "last_login_at" field.
func (m *UserMutation) SetLastLoginAt(t time.Time) {
	m.last_login_at = &t
}

// LastLoginAt returns the value of the "last_login_at" field in the mutation.
func (m *UserMutation) LastLoginAt() (r time.Time, exists bool) {
	v := m.last_login_at
	if v == nil {
		return
	}
	return *v, true
}

// OldLastLoginAt returns the old "last_login_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldLastLoginAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastLoginAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastLoginAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastLoginAt: %w", err)
	}
	return oldValue.LastLoginAt, nil
}

// ClearLastLoginAt clears the value of the "last_login_at" field.
func (m *UserMutation) ClearLastLoginAt() {
	m.last_login_at = nil
	m.clearedFields[user.FieldLastLoginAt] = struct{}{}
}

// LastLoginAtCleared returns if the "last_login_at" field was cleared in this mutation.
func (m *UserMutation) LastLoginAtCleared() bool {
	_, ok := m.clearedFields[user.FieldLastLoginAt]
	return ok
}

// ResetLastLoginAt resets all changes to the "last_login_at" field.
func (m *UserMutation) ResetLastLoginAt() {
	m.last_login_at = nil
	delete(m.clearedFields, user.FieldLastLoginAt)
}

// SetCreatedAt sets the "created_at" field.
func (m *UserMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *UserMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *UserMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *UserMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *UserMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *UserMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// AddProductIDs adds the "products" edge to the ProductManager entity by ids.
func (m *UserMutation) AddProductIDs(ids ...int) {
	if m.products == nil {
		m.products = make(map[int]struct{})
	}
	for i := range ids {
		m.products[ids[i]] = struct{}{}
	}
}

// ClearProducts clears the "products" edge to the ProductManager entity.
func (m *UserMutation) ClearProducts() {
	m.clearedproducts = true
}

// ProductsCleared reports if the "products" edge to the ProductManager entity was cleared.
func (m *UserMutation) ProductsCleared() bool {
	return m.clearedproducts
}

// RemoveProductIDs removes the "products" edge to the ProductManager entity by IDs.
func (m *UserMutation) RemoveProductIDs(ids ...int) {
	if m.removedproducts == nil {
		m.removedproducts = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.products, ids[i])
		m.removedproducts[ids[i]] = struct{}{}
	}
}

// RemovedProducts returns the removed IDs of the "products" edge to the ProductManager entity.
func (m *UserMutation) RemovedProductsIDs() (ids []int) {
	for id := range m.removedproducts {
		ids = append(ids, id)
	}
	return
}

// ProductsIDs returns the "products" edge IDs in the mutation.
func (m *UserMutation) ProductsIDs() (ids []int) {
	for id := range m.products {
		ids = append(ids, id)
	}
	return
}

// ResetProducts resets all changes to the "products" edge.
func (m *UserMutation) ResetProducts() {
	m.products = nil
	m.clearedproducts = false
	m.removedproducts = nil
}

// AddAuditLogIDs adds the "audit_logs" edge to the AuditLog entity by ids.
func (m *UserMutation) AddAuditLogIDs(ids ...int) {
	if m.audit_logs == nil {
		m.audit_logs = make(map[int]struct{})
	}
	for i := range ids {
		m.audit_logs[ids[i]] = struct{}{}
	}
}

// ClearAuditLogs clears the "audit_logs" edge to the AuditLog entity.
func (m *UserMutation) ClearAuditLogs() {
	m.clearedaudit_logs = true
}

// AuditLogsCleared reports if the "audit_logs" edge to the AuditLog entity was cleared.
func (m *UserMutation) AuditLogsCleared() bool {
	return m.clearedaudit_logs
}

// RemoveAuditLogIDs removes the "audit_logs" edge to the AuditLog entity by IDs.
func (m *UserMutation) RemoveAuditLogIDs(ids ...int) {
	if m.removedaudit_logs == nil {
		m.removedaudit_logs = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.audit_logs, ids[i])
		m.removedaudit_logs[ids[i]] = struct{}{}
	}
}

// RemovedAuditLogs returns the removed IDs of the "audit_logs" edge to the AuditLog entity.
func (m *UserMutation) RemovedAuditLogsIDs() (ids []int) {
	for id := range m.removedaudit_logs {
		ids = append(ids, id)
	}
	return
}

// AuditLogsIDs returns the "audit_logs" edge IDs in the mutation.
func (m *UserMutation) AuditLogsIDs() (ids []int) {
	for id := range m.audit_logs {
		ids = append(ids, id)
	}
	return
}

// ResetAuditLogs resets all changes to the "audit_logs" edge.
func (m *UserMutation) ResetAuditLogs() {
	m.audit_logs = nil
	m.clearedaudit_logs = false
	m.removedaudit_logs = nil
}

// AddCreatedDeviceIDs adds the "created_devices" edge to the Device entity by ids.
func (m *UserMutation) AddCreatedDeviceIDs(ids ...int) {
	if m.created_devices == nil {
		m.created_devices = make(map[int]struct{})
	}
	for i := range ids {
		m.created_devices[ids[i]] = struct{}{}
	}
}

// ClearCreatedDevices clears the "created_devices" edge to the Device entity.
func (m *UserMutation) ClearCreatedDevices() {
	m.clearedcreated_devices = true
}

// CreatedDevicesCleared reports if the "created_devices" edge to the Device entity was cleared.
func (m *UserMutation) CreatedDevicesCleared() bool {
	return m.clearedcreated_devices
}

// RemoveCreatedDeviceIDs removes the "created_devices" edge to the Device entity by IDs.
func (m *UserMutation) RemoveCreatedDeviceIDs(ids ...int) {
	if m.removedcreated_devices == nil {
		m.removedcreated_devices = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.created_devices, ids[i])
		m.removedcreated_devices[ids[i]] = struct{}{}
	}
}

// RemovedCreatedDevices returns the removed IDs of the "created_devices" edge to the Device entity.
func (m *UserMutation) RemovedCreatedDevicesIDs() (ids []int) {
	for id := range m.removedcreated_devices {
		ids = append(ids, id)
	}
	return
}

// CreatedDevicesIDs returns the "created_devices" edge IDs in the mutation.
func (m *UserMutation) CreatedDevicesIDs() (ids []int) {
	for id := range m.created_devices {
		ids = append(ids, id)
	}
	return
}

// ResetCreatedDevices resets all changes to the "created_devices" edge.
func (m *UserMutation) ResetCreatedDevices() {
	m.created_devices = nil
	m.clearedcreated_devices = false
	m.removedcreated_devices = nil
}

// AddUpdatedDeviceIDs adds the "updated_devices" edge to the Device entity by ids.
func (m *UserMutation) AddUpdatedDeviceIDs(ids ...int) {
	if m.updated_devices == nil {
		m.updated_devices = make(map[int]struct{})
	}
	for i := range ids {
		m.updated_devices[ids[i]] = struct{}{}
	}
}

// ClearUpdatedDevices clears the "updated_devices" edge to the Device entity.
func (m *UserMutation) ClearUpdatedDevices() {
	m.clearedupdated_devices = true
}

// UpdatedDevicesCleared reports if the "updated_devices" edge to the Device entity was cleared.
func (m *UserMutation) UpdatedDevicesCleared() bool {
	return m.clearedupdated_devices
}

// RemoveUpdatedDeviceIDs removes the "updated_devices" edge to the Device entity by IDs.
func (m *UserMutation) RemoveUpdatedDeviceIDs(ids ...int) {
	if m.removedupdated_devices == nil {
		m.removedupdated_devices = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.updated_devices, ids[i])
		m.removedupdated_devices[ids[i]] = struct{}{}
	}
}

// RemovedUpdatedDevices returns the removed IDs of the "updated_devices" edge to the Device entity.
func (m *UserMutation) RemovedUpdatedDevicesIDs() (ids []int) {
	for id := range m.removedupdated_devices {
		ids = append(ids, id)
	}
	return
}

// UpdatedDevicesIDs returns the "updated_devices" edge IDs in the mutation.
func (m *UserMutation) UpdatedDevicesIDs() (ids []int) {
	for id := range m.updated_devices {
		ids = append(ids, id)
	}
	return
}

// ResetUpdatedDevices resets all changes to the "updated_devices" edge.
func (m *UserMutation) ResetUpdatedDevices() {
	m.updated_devices = nil
	m.clearedupdated_devices = false
	m.removedupdated_devices = nil
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.User, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.email != nil {
		fields = append(fields, user.FieldEmail)
	}
	if m.password != nil {
		fields = append(fields, user.FieldPassword)
	}
	if m.is_enabled != nil {
		fields = append(fields, user.FieldIsEnabled)
	}
	if m.last_login_at != nil {
		fields = append(fields, user.FieldLastLoginAt)
	}
	if m.created_at != nil {
		fields = append(fields, user.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, user.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldEmail:
		return m.Email()
	case user.FieldPassword:
		return m.Password()
	case user.FieldIsEnabled:
		return m.IsEnabled()
	case user.FieldLastLoginAt:
		return m.LastLoginAt()
	case user.FieldCreatedAt:
		return m.CreatedAt()
	case user.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldEmail:
		return m.OldEmail(ctx)
	case user.FieldPassword:
		return m.OldPassword(ctx)
	case user.FieldIsEnabled:
		return m.OldIsEnabled(ctx)
	case user.FieldLastLoginAt:
		return m.OldLastLoginAt(ctx)
	case user.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case user.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case user.FieldPassword:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPassword(v)
		return nil
	case user.FieldIsEnabled:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsEnabled(v)
		return nil
	case user.FieldLastLoginAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastLoginAt(v)
		return nil
	case user.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case user.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(user.FieldLastLoginAt) {
		fields = append(fields, user.FieldLastLoginAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	switch name {
	case user.FieldLastLoginAt:
		m.ClearLastLoginAt()
		return nil
	}
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldEmail:
		m.ResetEmail()
		return nil
	case user.FieldPassword:
		m.ResetPassword()
		return nil
	case user.FieldIsEnabled:
		m.ResetIsEnabled()
		return nil
	case user.FieldLastLoginAt:
		m.ResetLastLoginAt()
		return nil
	case user.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case user.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 4)
	if m.products != nil {
		edges = append(edges, user.EdgeProducts)
	}
	if m.audit_logs != nil {
		edges = append(edges, user.EdgeAuditLogs)
	}
	if m.created_devices != nil {
		edges = append(edges, user.EdgeCreatedDevices)
	}
	if m.updated_devices != nil {
		edges = append(edges, user.EdgeUpdatedDevices)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeProducts:
		ids := make([]ent.Value, 0, len(m.products))
		for id := range m.products {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeAuditLogs:
		ids := make([]ent.Value, 0, len(m.audit_logs))
		for id := range m.audit_logs {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeCreatedDevices:
		ids := make([]ent.Value, 0, len(m.created_devices))
		for id := range m.created_devices {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeUpdatedDevices:
		ids := make([]ent.Value, 0, len(m.updated_devices))
		for id := range m.updated_devices {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 4)
	if m.removedproducts != nil {
		edges = append(edges, user.EdgeProducts)
	}
	if m.removedaudit_logs != nil {
		edges = append(edges, user.EdgeAuditLogs)
	}
	if m.removedcreated_devices != nil {
		edges = append(edges, user.EdgeCreatedDevices)
	}
	if m.removedupdated_devices != nil {
		edges = append(edges, user.EdgeUpdatedDevices)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeProducts:
		ids := make([]ent.Value, 0, len(m.removedproducts))
		for id := range m.removedproducts {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeAuditLogs:
		ids := make([]ent.Value, 0, len(m.removedaudit_logs))
		for id := range m.removedaudit_logs {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeCreatedDevices:
		ids := make([]ent.Value, 0, len(m.removedcreated_devices))
		for id := range m.removedcreated_devices {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeUpdatedDevices:
		ids := make([]ent.Value, 0, len(m.removedupdated_devices))
		for id := range m.removedupdated_devices {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 4)
	if m.clearedproducts {
		edges = append(edges, user.EdgeProducts)
	}
	if m.clearedaudit_logs {
		edges = append(edges, user.EdgeAuditLogs)
	}
	if m.clearedcreated_devices {
		edges = append(edges, user.EdgeCreatedDevices)
	}
	if m.clearedupdated_devices {
		edges = append(edges, user.EdgeUpdatedDevices)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	case user.EdgeProducts:
		return m.clearedproducts
	case user.EdgeAuditLogs:
		return m.clearedaudit_logs
	case user.EdgeCreatedDevices:
		return m.clearedcreated_devices
	case user.EdgeUpdatedDevices:
		return m.clearedupdated_devices
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgeProducts:
		m.ResetProducts()
		return nil
	case user.EdgeAuditLogs:
		m.ResetAuditLogs()
		return nil
	case user.EdgeCreatedDevices:
		m.ResetCreatedDevices()
		return nil
	case user.EdgeUpdatedDevices:
		m.ResetUpdatedDevices()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}
