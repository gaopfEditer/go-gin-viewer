// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"cambridge-hit.com/gin-base/activateserver/app/entity/ent/device"
	"cambridge-hit.com/gin-base/activateserver/app/entity/ent/licensetype"
	"cambridge-hit.com/gin-base/activateserver/app/entity/ent/product"
	"cambridge-hit.com/gin-base/activateserver/app/entity/ent/user"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DeviceCreate is the builder for creating a Device entity.
type DeviceCreate struct {
	config
	mutation *DeviceMutation
	hooks    []Hook
}

// SetSn sets the "sn" field.
func (dc *DeviceCreate) SetSn(s string) *DeviceCreate {
	dc.mutation.SetSn(s)
	return dc
}

// SetProductID sets the "product_id" field.
func (dc *DeviceCreate) SetProductID(i int) *DeviceCreate {
	dc.mutation.SetProductID(i)
	return dc
}

// SetLicenseTypeID sets the "license_type_id" field.
func (dc *DeviceCreate) SetLicenseTypeID(i int) *DeviceCreate {
	dc.mutation.SetLicenseTypeID(i)
	return dc
}

// SetNillableLicenseTypeID sets the "license_type_id" field if the given value is not nil.
func (dc *DeviceCreate) SetNillableLicenseTypeID(i *int) *DeviceCreate {
	if i != nil {
		dc.SetLicenseTypeID(*i)
	}
	return dc
}

// SetOemTag sets the "oem_tag" field.
func (dc *DeviceCreate) SetOemTag(s string) *DeviceCreate {
	dc.mutation.SetOemTag(s)
	return dc
}

// SetNillableOemTag sets the "oem_tag" field if the given value is not nil.
func (dc *DeviceCreate) SetNillableOemTag(s *string) *DeviceCreate {
	if s != nil {
		dc.SetOemTag(*s)
	}
	return dc
}

// SetRemark sets the "remark" field.
func (dc *DeviceCreate) SetRemark(s string) *DeviceCreate {
	dc.mutation.SetRemark(s)
	return dc
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (dc *DeviceCreate) SetNillableRemark(s *string) *DeviceCreate {
	if s != nil {
		dc.SetRemark(*s)
	}
	return dc
}

// SetCreatedAt sets the "created_at" field.
func (dc *DeviceCreate) SetCreatedAt(t time.Time) *DeviceCreate {
	dc.mutation.SetCreatedAt(t)
	return dc
}

// SetCreatedBy sets the "created_by" field.
func (dc *DeviceCreate) SetCreatedBy(i int) *DeviceCreate {
	dc.mutation.SetCreatedBy(i)
	return dc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (dc *DeviceCreate) SetNillableCreatedBy(i *int) *DeviceCreate {
	if i != nil {
		dc.SetCreatedBy(*i)
	}
	return dc
}

// SetUpdatedAt sets the "updated_at" field.
func (dc *DeviceCreate) SetUpdatedAt(t time.Time) *DeviceCreate {
	dc.mutation.SetUpdatedAt(t)
	return dc
}

// SetUpdatedBy sets the "updated_by" field.
func (dc *DeviceCreate) SetUpdatedBy(i int) *DeviceCreate {
	dc.mutation.SetUpdatedBy(i)
	return dc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (dc *DeviceCreate) SetNillableUpdatedBy(i *int) *DeviceCreate {
	if i != nil {
		dc.SetUpdatedBy(*i)
	}
	return dc
}

// SetID sets the "id" field.
func (dc *DeviceCreate) SetID(i int) *DeviceCreate {
	dc.mutation.SetID(i)
	return dc
}

// SetProduct sets the "product" edge to the Product entity.
func (dc *DeviceCreate) SetProduct(p *Product) *DeviceCreate {
	return dc.SetProductID(p.ID)
}

// SetLicenseType sets the "license_type" edge to the LicenseType entity.
func (dc *DeviceCreate) SetLicenseType(l *LicenseType) *DeviceCreate {
	return dc.SetLicenseTypeID(l.ID)
}

// SetCreatorID sets the "creator" edge to the User entity by ID.
func (dc *DeviceCreate) SetCreatorID(id int) *DeviceCreate {
	dc.mutation.SetCreatorID(id)
	return dc
}

// SetNillableCreatorID sets the "creator" edge to the User entity by ID if the given value is not nil.
func (dc *DeviceCreate) SetNillableCreatorID(id *int) *DeviceCreate {
	if id != nil {
		dc = dc.SetCreatorID(*id)
	}
	return dc
}

// SetCreator sets the "creator" edge to the User entity.
func (dc *DeviceCreate) SetCreator(u *User) *DeviceCreate {
	return dc.SetCreatorID(u.ID)
}

// SetUpdaterID sets the "updater" edge to the User entity by ID.
func (dc *DeviceCreate) SetUpdaterID(id int) *DeviceCreate {
	dc.mutation.SetUpdaterID(id)
	return dc
}

// SetNillableUpdaterID sets the "updater" edge to the User entity by ID if the given value is not nil.
func (dc *DeviceCreate) SetNillableUpdaterID(id *int) *DeviceCreate {
	if id != nil {
		dc = dc.SetUpdaterID(*id)
	}
	return dc
}

// SetUpdater sets the "updater" edge to the User entity.
func (dc *DeviceCreate) SetUpdater(u *User) *DeviceCreate {
	return dc.SetUpdaterID(u.ID)
}

// Mutation returns the DeviceMutation object of the builder.
func (dc *DeviceCreate) Mutation() *DeviceMutation {
	return dc.mutation
}

// Save creates the Device in the database.
func (dc *DeviceCreate) Save(ctx context.Context) (*Device, error) {
	dc.defaults()
	return withHooks(ctx, dc.sqlSave, dc.mutation, dc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (dc *DeviceCreate) SaveX(ctx context.Context) *Device {
	v, err := dc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dc *DeviceCreate) Exec(ctx context.Context) error {
	_, err := dc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dc *DeviceCreate) ExecX(ctx context.Context) {
	if err := dc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dc *DeviceCreate) defaults() {
	if _, ok := dc.mutation.OemTag(); !ok {
		v := device.DefaultOemTag
		dc.mutation.SetOemTag(v)
	}
	if _, ok := dc.mutation.Remark(); !ok {
		v := device.DefaultRemark
		dc.mutation.SetRemark(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dc *DeviceCreate) check() error {
	if _, ok := dc.mutation.Sn(); !ok {
		return &ValidationError{Name: "sn", err: errors.New(`ent: missing required field "Device.sn"`)}
	}
	if _, ok := dc.mutation.ProductID(); !ok {
		return &ValidationError{Name: "product_id", err: errors.New(`ent: missing required field "Device.product_id"`)}
	}
	if _, ok := dc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Device.created_at"`)}
	}
	if _, ok := dc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Device.updated_at"`)}
	}
	if _, ok := dc.mutation.ProductID(); !ok {
		return &ValidationError{Name: "product", err: errors.New(`ent: missing required edge "Device.product"`)}
	}
	return nil
}

func (dc *DeviceCreate) sqlSave(ctx context.Context) (*Device, error) {
	if err := dc.check(); err != nil {
		return nil, err
	}
	_node, _spec := dc.createSpec()
	if err := sqlgraph.CreateNode(ctx, dc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	dc.mutation.id = &_node.ID
	dc.mutation.done = true
	return _node, nil
}

func (dc *DeviceCreate) createSpec() (*Device, *sqlgraph.CreateSpec) {
	var (
		_node = &Device{config: dc.config}
		_spec = sqlgraph.NewCreateSpec(device.Table, sqlgraph.NewFieldSpec(device.FieldID, field.TypeInt))
	)
	if id, ok := dc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := dc.mutation.Sn(); ok {
		_spec.SetField(device.FieldSn, field.TypeString, value)
		_node.Sn = value
	}
	if value, ok := dc.mutation.OemTag(); ok {
		_spec.SetField(device.FieldOemTag, field.TypeString, value)
		_node.OemTag = value
	}
	if value, ok := dc.mutation.Remark(); ok {
		_spec.SetField(device.FieldRemark, field.TypeString, value)
		_node.Remark = value
	}
	if value, ok := dc.mutation.CreatedAt(); ok {
		_spec.SetField(device.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := dc.mutation.UpdatedAt(); ok {
		_spec.SetField(device.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := dc.mutation.ProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   device.ProductTable,
			Columns: []string{device.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ProductID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := dc.mutation.LicenseTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   device.LicenseTypeTable,
			Columns: []string{device.LicenseTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(licensetype.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.LicenseTypeID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := dc.mutation.CreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   device.CreatorTable,
			Columns: []string{device.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CreatedBy = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := dc.mutation.UpdaterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   device.UpdaterTable,
			Columns: []string{device.UpdaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UpdatedBy = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// DeviceCreateBulk is the builder for creating many Device entities in bulk.
type DeviceCreateBulk struct {
	config
	err      error
	builders []*DeviceCreate
}

// Save creates the Device entities in the database.
func (dcb *DeviceCreateBulk) Save(ctx context.Context) ([]*Device, error) {
	if dcb.err != nil {
		return nil, dcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(dcb.builders))
	nodes := make([]*Device, len(dcb.builders))
	mutators := make([]Mutator, len(dcb.builders))
	for i := range dcb.builders {
		func(i int, root context.Context) {
			builder := dcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DeviceMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, dcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, dcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, dcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (dcb *DeviceCreateBulk) SaveX(ctx context.Context) []*Device {
	v, err := dcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dcb *DeviceCreateBulk) Exec(ctx context.Context) error {
	_, err := dcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dcb *DeviceCreateBulk) ExecX(ctx context.Context) {
	if err := dcb.Exec(ctx); err != nil {
		panic(err)
	}
}
