// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"cambridge-hit.com/gin-base/activateserver/app/entity/ent/firmwareversion"
	"cambridge-hit.com/gin-base/activateserver/app/entity/ent/predicate"
	"cambridge-hit.com/gin-base/activateserver/app/entity/ent/product"
	"cambridge-hit.com/gin-base/activateserver/app/entity/ent/softwareversion"
	"cambridge-hit.com/gin-base/activateserver/app/entity/ent/user"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// FirmwareVersionQuery is the builder for querying FirmwareVersion entities.
type FirmwareVersionQuery struct {
	config
	ctx                  *QueryContext
	order                []firmwareversion.OrderOption
	inters               []Interceptor
	predicates           []predicate.FirmwareVersion
	withSoftwareVersions *SoftwareVersionQuery
	withProduct          *ProductQuery
	withCreator          *UserQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the FirmwareVersionQuery builder.
func (fvq *FirmwareVersionQuery) Where(ps ...predicate.FirmwareVersion) *FirmwareVersionQuery {
	fvq.predicates = append(fvq.predicates, ps...)
	return fvq
}

// Limit the number of records to be returned by this query.
func (fvq *FirmwareVersionQuery) Limit(limit int) *FirmwareVersionQuery {
	fvq.ctx.Limit = &limit
	return fvq
}

// Offset to start from.
func (fvq *FirmwareVersionQuery) Offset(offset int) *FirmwareVersionQuery {
	fvq.ctx.Offset = &offset
	return fvq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (fvq *FirmwareVersionQuery) Unique(unique bool) *FirmwareVersionQuery {
	fvq.ctx.Unique = &unique
	return fvq
}

// Order specifies how the records should be ordered.
func (fvq *FirmwareVersionQuery) Order(o ...firmwareversion.OrderOption) *FirmwareVersionQuery {
	fvq.order = append(fvq.order, o...)
	return fvq
}

// QuerySoftwareVersions chains the current query on the "software_versions" edge.
func (fvq *FirmwareVersionQuery) QuerySoftwareVersions() *SoftwareVersionQuery {
	query := (&SoftwareVersionClient{config: fvq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := fvq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := fvq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(firmwareversion.Table, firmwareversion.FieldID, selector),
			sqlgraph.To(softwareversion.Table, softwareversion.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, firmwareversion.SoftwareVersionsTable, firmwareversion.SoftwareVersionsPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(fvq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryProduct chains the current query on the "product" edge.
func (fvq *FirmwareVersionQuery) QueryProduct() *ProductQuery {
	query := (&ProductClient{config: fvq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := fvq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := fvq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(firmwareversion.Table, firmwareversion.FieldID, selector),
			sqlgraph.To(product.Table, product.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, firmwareversion.ProductTable, firmwareversion.ProductColumn),
		)
		fromU = sqlgraph.SetNeighbors(fvq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCreator chains the current query on the "creator" edge.
func (fvq *FirmwareVersionQuery) QueryCreator() *UserQuery {
	query := (&UserClient{config: fvq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := fvq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := fvq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(firmwareversion.Table, firmwareversion.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, firmwareversion.CreatorTable, firmwareversion.CreatorColumn),
		)
		fromU = sqlgraph.SetNeighbors(fvq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first FirmwareVersion entity from the query.
// Returns a *NotFoundError when no FirmwareVersion was found.
func (fvq *FirmwareVersionQuery) First(ctx context.Context) (*FirmwareVersion, error) {
	nodes, err := fvq.Limit(1).All(setContextOp(ctx, fvq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{firmwareversion.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (fvq *FirmwareVersionQuery) FirstX(ctx context.Context) *FirmwareVersion {
	node, err := fvq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first FirmwareVersion ID from the query.
// Returns a *NotFoundError when no FirmwareVersion ID was found.
func (fvq *FirmwareVersionQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = fvq.Limit(1).IDs(setContextOp(ctx, fvq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{firmwareversion.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (fvq *FirmwareVersionQuery) FirstIDX(ctx context.Context) int {
	id, err := fvq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single FirmwareVersion entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one FirmwareVersion entity is found.
// Returns a *NotFoundError when no FirmwareVersion entities are found.
func (fvq *FirmwareVersionQuery) Only(ctx context.Context) (*FirmwareVersion, error) {
	nodes, err := fvq.Limit(2).All(setContextOp(ctx, fvq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{firmwareversion.Label}
	default:
		return nil, &NotSingularError{firmwareversion.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (fvq *FirmwareVersionQuery) OnlyX(ctx context.Context) *FirmwareVersion {
	node, err := fvq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only FirmwareVersion ID in the query.
// Returns a *NotSingularError when more than one FirmwareVersion ID is found.
// Returns a *NotFoundError when no entities are found.
func (fvq *FirmwareVersionQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = fvq.Limit(2).IDs(setContextOp(ctx, fvq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{firmwareversion.Label}
	default:
		err = &NotSingularError{firmwareversion.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (fvq *FirmwareVersionQuery) OnlyIDX(ctx context.Context) int {
	id, err := fvq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of FirmwareVersions.
func (fvq *FirmwareVersionQuery) All(ctx context.Context) ([]*FirmwareVersion, error) {
	ctx = setContextOp(ctx, fvq.ctx, "All")
	if err := fvq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*FirmwareVersion, *FirmwareVersionQuery]()
	return withInterceptors[[]*FirmwareVersion](ctx, fvq, qr, fvq.inters)
}

// AllX is like All, but panics if an error occurs.
func (fvq *FirmwareVersionQuery) AllX(ctx context.Context) []*FirmwareVersion {
	nodes, err := fvq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of FirmwareVersion IDs.
func (fvq *FirmwareVersionQuery) IDs(ctx context.Context) (ids []int, err error) {
	if fvq.ctx.Unique == nil && fvq.path != nil {
		fvq.Unique(true)
	}
	ctx = setContextOp(ctx, fvq.ctx, "IDs")
	if err = fvq.Select(firmwareversion.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (fvq *FirmwareVersionQuery) IDsX(ctx context.Context) []int {
	ids, err := fvq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (fvq *FirmwareVersionQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, fvq.ctx, "Count")
	if err := fvq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, fvq, querierCount[*FirmwareVersionQuery](), fvq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (fvq *FirmwareVersionQuery) CountX(ctx context.Context) int {
	count, err := fvq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (fvq *FirmwareVersionQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, fvq.ctx, "Exist")
	switch _, err := fvq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (fvq *FirmwareVersionQuery) ExistX(ctx context.Context) bool {
	exist, err := fvq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the FirmwareVersionQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (fvq *FirmwareVersionQuery) Clone() *FirmwareVersionQuery {
	if fvq == nil {
		return nil
	}
	return &FirmwareVersionQuery{
		config:               fvq.config,
		ctx:                  fvq.ctx.Clone(),
		order:                append([]firmwareversion.OrderOption{}, fvq.order...),
		inters:               append([]Interceptor{}, fvq.inters...),
		predicates:           append([]predicate.FirmwareVersion{}, fvq.predicates...),
		withSoftwareVersions: fvq.withSoftwareVersions.Clone(),
		withProduct:          fvq.withProduct.Clone(),
		withCreator:          fvq.withCreator.Clone(),
		// clone intermediate query.
		sql:  fvq.sql.Clone(),
		path: fvq.path,
	}
}

// WithSoftwareVersions tells the query-builder to eager-load the nodes that are connected to
// the "software_versions" edge. The optional arguments are used to configure the query builder of the edge.
func (fvq *FirmwareVersionQuery) WithSoftwareVersions(opts ...func(*SoftwareVersionQuery)) *FirmwareVersionQuery {
	query := (&SoftwareVersionClient{config: fvq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	fvq.withSoftwareVersions = query
	return fvq
}

// WithProduct tells the query-builder to eager-load the nodes that are connected to
// the "product" edge. The optional arguments are used to configure the query builder of the edge.
func (fvq *FirmwareVersionQuery) WithProduct(opts ...func(*ProductQuery)) *FirmwareVersionQuery {
	query := (&ProductClient{config: fvq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	fvq.withProduct = query
	return fvq
}

// WithCreator tells the query-builder to eager-load the nodes that are connected to
// the "creator" edge. The optional arguments are used to configure the query builder of the edge.
func (fvq *FirmwareVersionQuery) WithCreator(opts ...func(*UserQuery)) *FirmwareVersionQuery {
	query := (&UserClient{config: fvq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	fvq.withCreator = query
	return fvq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		ProductID int `json:"product_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.FirmwareVersion.Query().
//		GroupBy(firmwareversion.FieldProductID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (fvq *FirmwareVersionQuery) GroupBy(field string, fields ...string) *FirmwareVersionGroupBy {
	fvq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &FirmwareVersionGroupBy{build: fvq}
	grbuild.flds = &fvq.ctx.Fields
	grbuild.label = firmwareversion.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		ProductID int `json:"product_id,omitempty"`
//	}
//
//	client.FirmwareVersion.Query().
//		Select(firmwareversion.FieldProductID).
//		Scan(ctx, &v)
func (fvq *FirmwareVersionQuery) Select(fields ...string) *FirmwareVersionSelect {
	fvq.ctx.Fields = append(fvq.ctx.Fields, fields...)
	sbuild := &FirmwareVersionSelect{FirmwareVersionQuery: fvq}
	sbuild.label = firmwareversion.Label
	sbuild.flds, sbuild.scan = &fvq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a FirmwareVersionSelect configured with the given aggregations.
func (fvq *FirmwareVersionQuery) Aggregate(fns ...AggregateFunc) *FirmwareVersionSelect {
	return fvq.Select().Aggregate(fns...)
}

func (fvq *FirmwareVersionQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range fvq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, fvq); err != nil {
				return err
			}
		}
	}
	for _, f := range fvq.ctx.Fields {
		if !firmwareversion.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if fvq.path != nil {
		prev, err := fvq.path(ctx)
		if err != nil {
			return err
		}
		fvq.sql = prev
	}
	return nil
}

func (fvq *FirmwareVersionQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*FirmwareVersion, error) {
	var (
		nodes       = []*FirmwareVersion{}
		_spec       = fvq.querySpec()
		loadedTypes = [3]bool{
			fvq.withSoftwareVersions != nil,
			fvq.withProduct != nil,
			fvq.withCreator != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*FirmwareVersion).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &FirmwareVersion{config: fvq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, fvq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := fvq.withSoftwareVersions; query != nil {
		if err := fvq.loadSoftwareVersions(ctx, query, nodes,
			func(n *FirmwareVersion) { n.Edges.SoftwareVersions = []*SoftwareVersion{} },
			func(n *FirmwareVersion, e *SoftwareVersion) {
				n.Edges.SoftwareVersions = append(n.Edges.SoftwareVersions, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := fvq.withProduct; query != nil {
		if err := fvq.loadProduct(ctx, query, nodes, nil,
			func(n *FirmwareVersion, e *Product) { n.Edges.Product = e }); err != nil {
			return nil, err
		}
	}
	if query := fvq.withCreator; query != nil {
		if err := fvq.loadCreator(ctx, query, nodes, nil,
			func(n *FirmwareVersion, e *User) { n.Edges.Creator = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (fvq *FirmwareVersionQuery) loadSoftwareVersions(ctx context.Context, query *SoftwareVersionQuery, nodes []*FirmwareVersion, init func(*FirmwareVersion), assign func(*FirmwareVersion, *SoftwareVersion)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[int]*FirmwareVersion)
	nids := make(map[int]map[*FirmwareVersion]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(firmwareversion.SoftwareVersionsTable)
		s.Join(joinT).On(s.C(softwareversion.FieldID), joinT.C(firmwareversion.SoftwareVersionsPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(firmwareversion.SoftwareVersionsPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(firmwareversion.SoftwareVersionsPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullInt64)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := int(values[0].(*sql.NullInt64).Int64)
				inValue := int(values[1].(*sql.NullInt64).Int64)
				if nids[inValue] == nil {
					nids[inValue] = map[*FirmwareVersion]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*SoftwareVersion](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "software_versions" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (fvq *FirmwareVersionQuery) loadProduct(ctx context.Context, query *ProductQuery, nodes []*FirmwareVersion, init func(*FirmwareVersion), assign func(*FirmwareVersion, *Product)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*FirmwareVersion)
	for i := range nodes {
		fk := nodes[i].ProductID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(product.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "product_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (fvq *FirmwareVersionQuery) loadCreator(ctx context.Context, query *UserQuery, nodes []*FirmwareVersion, init func(*FirmwareVersion), assign func(*FirmwareVersion, *User)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*FirmwareVersion)
	for i := range nodes {
		fk := nodes[i].CreatedBy
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(user.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "created_by" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (fvq *FirmwareVersionQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := fvq.querySpec()
	_spec.Node.Columns = fvq.ctx.Fields
	if len(fvq.ctx.Fields) > 0 {
		_spec.Unique = fvq.ctx.Unique != nil && *fvq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, fvq.driver, _spec)
}

func (fvq *FirmwareVersionQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(firmwareversion.Table, firmwareversion.Columns, sqlgraph.NewFieldSpec(firmwareversion.FieldID, field.TypeInt))
	_spec.From = fvq.sql
	if unique := fvq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if fvq.path != nil {
		_spec.Unique = true
	}
	if fields := fvq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, firmwareversion.FieldID)
		for i := range fields {
			if fields[i] != firmwareversion.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if fvq.withProduct != nil {
			_spec.Node.AddColumnOnce(firmwareversion.FieldProductID)
		}
		if fvq.withCreator != nil {
			_spec.Node.AddColumnOnce(firmwareversion.FieldCreatedBy)
		}
	}
	if ps := fvq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := fvq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := fvq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := fvq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (fvq *FirmwareVersionQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(fvq.driver.Dialect())
	t1 := builder.Table(firmwareversion.Table)
	columns := fvq.ctx.Fields
	if len(columns) == 0 {
		columns = firmwareversion.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if fvq.sql != nil {
		selector = fvq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if fvq.ctx.Unique != nil && *fvq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range fvq.predicates {
		p(selector)
	}
	for _, p := range fvq.order {
		p(selector)
	}
	if offset := fvq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := fvq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// FirmwareVersionGroupBy is the group-by builder for FirmwareVersion entities.
type FirmwareVersionGroupBy struct {
	selector
	build *FirmwareVersionQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (fvgb *FirmwareVersionGroupBy) Aggregate(fns ...AggregateFunc) *FirmwareVersionGroupBy {
	fvgb.fns = append(fvgb.fns, fns...)
	return fvgb
}

// Scan applies the selector query and scans the result into the given value.
func (fvgb *FirmwareVersionGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, fvgb.build.ctx, "GroupBy")
	if err := fvgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*FirmwareVersionQuery, *FirmwareVersionGroupBy](ctx, fvgb.build, fvgb, fvgb.build.inters, v)
}

func (fvgb *FirmwareVersionGroupBy) sqlScan(ctx context.Context, root *FirmwareVersionQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(fvgb.fns))
	for _, fn := range fvgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*fvgb.flds)+len(fvgb.fns))
		for _, f := range *fvgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*fvgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := fvgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// FirmwareVersionSelect is the builder for selecting fields of FirmwareVersion entities.
type FirmwareVersionSelect struct {
	*FirmwareVersionQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (fvs *FirmwareVersionSelect) Aggregate(fns ...AggregateFunc) *FirmwareVersionSelect {
	fvs.fns = append(fvs.fns, fns...)
	return fvs
}

// Scan applies the selector query and scans the result into the given value.
func (fvs *FirmwareVersionSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, fvs.ctx, "Select")
	if err := fvs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*FirmwareVersionQuery, *FirmwareVersionSelect](ctx, fvs.FirmwareVersionQuery, fvs, fvs.inters, v)
}

func (fvs *FirmwareVersionSelect) sqlScan(ctx context.Context, root *FirmwareVersionQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(fvs.fns))
	for _, fn := range fvs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*fvs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := fvs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
