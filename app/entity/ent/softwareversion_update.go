// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"cambridge-hit.com/gin-base/activateserver/app/entity/ent/firmwareversion"
	"cambridge-hit.com/gin-base/activateserver/app/entity/ent/predicate"
	"cambridge-hit.com/gin-base/activateserver/app/entity/ent/product"
	"cambridge-hit.com/gin-base/activateserver/app/entity/ent/productfeature"
	"cambridge-hit.com/gin-base/activateserver/app/entity/ent/softwareversion"
	"cambridge-hit.com/gin-base/activateserver/app/entity/ent/user"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SoftwareVersionUpdate is the builder for updating SoftwareVersion entities.
type SoftwareVersionUpdate struct {
	config
	hooks    []Hook
	mutation *SoftwareVersionMutation
}

// Where appends a list predicates to the SoftwareVersionUpdate builder.
func (svu *SoftwareVersionUpdate) Where(ps ...predicate.SoftwareVersion) *SoftwareVersionUpdate {
	svu.mutation.Where(ps...)
	return svu
}

// SetProductID sets the "product_id" field.
func (svu *SoftwareVersionUpdate) SetProductID(i int) *SoftwareVersionUpdate {
	svu.mutation.SetProductID(i)
	return svu
}

// SetVersion sets the "version" field.
func (svu *SoftwareVersionUpdate) SetVersion(s string) *SoftwareVersionUpdate {
	svu.mutation.SetVersion(s)
	return svu
}

// SetReleaseDate sets the "release_date" field.
func (svu *SoftwareVersionUpdate) SetReleaseDate(t time.Time) *SoftwareVersionUpdate {
	svu.mutation.SetReleaseDate(t)
	return svu
}

// SetUpdateLog sets the "update_log" field.
func (svu *SoftwareVersionUpdate) SetUpdateLog(s string) *SoftwareVersionUpdate {
	svu.mutation.SetUpdateLog(s)
	return svu
}

// SetNillableUpdateLog sets the "update_log" field if the given value is not nil.
func (svu *SoftwareVersionUpdate) SetNillableUpdateLog(s *string) *SoftwareVersionUpdate {
	if s != nil {
		svu.SetUpdateLog(*s)
	}
	return svu
}

// ClearUpdateLog clears the value of the "update_log" field.
func (svu *SoftwareVersionUpdate) ClearUpdateLog() *SoftwareVersionUpdate {
	svu.mutation.ClearUpdateLog()
	return svu
}

// SetRemark sets the "remark" field.
func (svu *SoftwareVersionUpdate) SetRemark(s string) *SoftwareVersionUpdate {
	svu.mutation.SetRemark(s)
	return svu
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (svu *SoftwareVersionUpdate) SetNillableRemark(s *string) *SoftwareVersionUpdate {
	if s != nil {
		svu.SetRemark(*s)
	}
	return svu
}

// ClearRemark clears the value of the "remark" field.
func (svu *SoftwareVersionUpdate) ClearRemark() *SoftwareVersionUpdate {
	svu.mutation.ClearRemark()
	return svu
}

// SetCreatedBy sets the "created_by" field.
func (svu *SoftwareVersionUpdate) SetCreatedBy(i int) *SoftwareVersionUpdate {
	svu.mutation.SetCreatedBy(i)
	return svu
}

// SetCreatedAt sets the "created_at" field.
func (svu *SoftwareVersionUpdate) SetCreatedAt(t time.Time) *SoftwareVersionUpdate {
	svu.mutation.SetCreatedAt(t)
	return svu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (svu *SoftwareVersionUpdate) SetNillableCreatedAt(t *time.Time) *SoftwareVersionUpdate {
	if t != nil {
		svu.SetCreatedAt(*t)
	}
	return svu
}

// SetUpdatedAt sets the "updated_at" field.
func (svu *SoftwareVersionUpdate) SetUpdatedAt(t time.Time) *SoftwareVersionUpdate {
	svu.mutation.SetUpdatedAt(t)
	return svu
}

// AddFeatureIDs adds the "features" edge to the ProductFeature entity by IDs.
func (svu *SoftwareVersionUpdate) AddFeatureIDs(ids ...int) *SoftwareVersionUpdate {
	svu.mutation.AddFeatureIDs(ids...)
	return svu
}

// AddFeatures adds the "features" edges to the ProductFeature entity.
func (svu *SoftwareVersionUpdate) AddFeatures(p ...*ProductFeature) *SoftwareVersionUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return svu.AddFeatureIDs(ids...)
}

// AddFirmwareVersionIDs adds the "firmware_versions" edge to the FirmwareVersion entity by IDs.
func (svu *SoftwareVersionUpdate) AddFirmwareVersionIDs(ids ...int) *SoftwareVersionUpdate {
	svu.mutation.AddFirmwareVersionIDs(ids...)
	return svu
}

// AddFirmwareVersions adds the "firmware_versions" edges to the FirmwareVersion entity.
func (svu *SoftwareVersionUpdate) AddFirmwareVersions(f ...*FirmwareVersion) *SoftwareVersionUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return svu.AddFirmwareVersionIDs(ids...)
}

// SetProduct sets the "product" edge to the Product entity.
func (svu *SoftwareVersionUpdate) SetProduct(p *Product) *SoftwareVersionUpdate {
	return svu.SetProductID(p.ID)
}

// SetCreatorID sets the "creator" edge to the User entity by ID.
func (svu *SoftwareVersionUpdate) SetCreatorID(id int) *SoftwareVersionUpdate {
	svu.mutation.SetCreatorID(id)
	return svu
}

// SetCreator sets the "creator" edge to the User entity.
func (svu *SoftwareVersionUpdate) SetCreator(u *User) *SoftwareVersionUpdate {
	return svu.SetCreatorID(u.ID)
}

// Mutation returns the SoftwareVersionMutation object of the builder.
func (svu *SoftwareVersionUpdate) Mutation() *SoftwareVersionMutation {
	return svu.mutation
}

// ClearFeatures clears all "features" edges to the ProductFeature entity.
func (svu *SoftwareVersionUpdate) ClearFeatures() *SoftwareVersionUpdate {
	svu.mutation.ClearFeatures()
	return svu
}

// RemoveFeatureIDs removes the "features" edge to ProductFeature entities by IDs.
func (svu *SoftwareVersionUpdate) RemoveFeatureIDs(ids ...int) *SoftwareVersionUpdate {
	svu.mutation.RemoveFeatureIDs(ids...)
	return svu
}

// RemoveFeatures removes "features" edges to ProductFeature entities.
func (svu *SoftwareVersionUpdate) RemoveFeatures(p ...*ProductFeature) *SoftwareVersionUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return svu.RemoveFeatureIDs(ids...)
}

// ClearFirmwareVersions clears all "firmware_versions" edges to the FirmwareVersion entity.
func (svu *SoftwareVersionUpdate) ClearFirmwareVersions() *SoftwareVersionUpdate {
	svu.mutation.ClearFirmwareVersions()
	return svu
}

// RemoveFirmwareVersionIDs removes the "firmware_versions" edge to FirmwareVersion entities by IDs.
func (svu *SoftwareVersionUpdate) RemoveFirmwareVersionIDs(ids ...int) *SoftwareVersionUpdate {
	svu.mutation.RemoveFirmwareVersionIDs(ids...)
	return svu
}

// RemoveFirmwareVersions removes "firmware_versions" edges to FirmwareVersion entities.
func (svu *SoftwareVersionUpdate) RemoveFirmwareVersions(f ...*FirmwareVersion) *SoftwareVersionUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return svu.RemoveFirmwareVersionIDs(ids...)
}

// ClearProduct clears the "product" edge to the Product entity.
func (svu *SoftwareVersionUpdate) ClearProduct() *SoftwareVersionUpdate {
	svu.mutation.ClearProduct()
	return svu
}

// ClearCreator clears the "creator" edge to the User entity.
func (svu *SoftwareVersionUpdate) ClearCreator() *SoftwareVersionUpdate {
	svu.mutation.ClearCreator()
	return svu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (svu *SoftwareVersionUpdate) Save(ctx context.Context) (int, error) {
	svu.defaults()
	return withHooks(ctx, svu.sqlSave, svu.mutation, svu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (svu *SoftwareVersionUpdate) SaveX(ctx context.Context) int {
	affected, err := svu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (svu *SoftwareVersionUpdate) Exec(ctx context.Context) error {
	_, err := svu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (svu *SoftwareVersionUpdate) ExecX(ctx context.Context) {
	if err := svu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (svu *SoftwareVersionUpdate) defaults() {
	if _, ok := svu.mutation.UpdatedAt(); !ok {
		v := softwareversion.UpdateDefaultUpdatedAt()
		svu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (svu *SoftwareVersionUpdate) check() error {
	if v, ok := svu.mutation.Version(); ok {
		if err := softwareversion.VersionValidator(v); err != nil {
			return &ValidationError{Name: "version", err: fmt.Errorf(`ent: validator failed for field "SoftwareVersion.version": %w`, err)}
		}
	}
	if _, ok := svu.mutation.ProductID(); svu.mutation.ProductCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "SoftwareVersion.product"`)
	}
	if _, ok := svu.mutation.CreatorID(); svu.mutation.CreatorCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "SoftwareVersion.creator"`)
	}
	return nil
}

func (svu *SoftwareVersionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := svu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(softwareversion.Table, softwareversion.Columns, sqlgraph.NewFieldSpec(softwareversion.FieldID, field.TypeInt))
	if ps := svu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := svu.mutation.Version(); ok {
		_spec.SetField(softwareversion.FieldVersion, field.TypeString, value)
	}
	if value, ok := svu.mutation.ReleaseDate(); ok {
		_spec.SetField(softwareversion.FieldReleaseDate, field.TypeTime, value)
	}
	if value, ok := svu.mutation.UpdateLog(); ok {
		_spec.SetField(softwareversion.FieldUpdateLog, field.TypeString, value)
	}
	if svu.mutation.UpdateLogCleared() {
		_spec.ClearField(softwareversion.FieldUpdateLog, field.TypeString)
	}
	if value, ok := svu.mutation.Remark(); ok {
		_spec.SetField(softwareversion.FieldRemark, field.TypeString, value)
	}
	if svu.mutation.RemarkCleared() {
		_spec.ClearField(softwareversion.FieldRemark, field.TypeString)
	}
	if value, ok := svu.mutation.CreatedAt(); ok {
		_spec.SetField(softwareversion.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := svu.mutation.UpdatedAt(); ok {
		_spec.SetField(softwareversion.FieldUpdatedAt, field.TypeTime, value)
	}
	if svu.mutation.FeaturesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   softwareversion.FeaturesTable,
			Columns: softwareversion.FeaturesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productfeature.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := svu.mutation.RemovedFeaturesIDs(); len(nodes) > 0 && !svu.mutation.FeaturesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   softwareversion.FeaturesTable,
			Columns: softwareversion.FeaturesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productfeature.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := svu.mutation.FeaturesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   softwareversion.FeaturesTable,
			Columns: softwareversion.FeaturesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productfeature.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if svu.mutation.FirmwareVersionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   softwareversion.FirmwareVersionsTable,
			Columns: softwareversion.FirmwareVersionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(firmwareversion.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := svu.mutation.RemovedFirmwareVersionsIDs(); len(nodes) > 0 && !svu.mutation.FirmwareVersionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   softwareversion.FirmwareVersionsTable,
			Columns: softwareversion.FirmwareVersionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(firmwareversion.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := svu.mutation.FirmwareVersionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   softwareversion.FirmwareVersionsTable,
			Columns: softwareversion.FirmwareVersionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(firmwareversion.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if svu.mutation.ProductCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   softwareversion.ProductTable,
			Columns: []string{softwareversion.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := svu.mutation.ProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   softwareversion.ProductTable,
			Columns: []string{softwareversion.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if svu.mutation.CreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   softwareversion.CreatorTable,
			Columns: []string{softwareversion.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := svu.mutation.CreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   softwareversion.CreatorTable,
			Columns: []string{softwareversion.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, svu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{softwareversion.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	svu.mutation.done = true
	return n, nil
}

// SoftwareVersionUpdateOne is the builder for updating a single SoftwareVersion entity.
type SoftwareVersionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SoftwareVersionMutation
}

// SetProductID sets the "product_id" field.
func (svuo *SoftwareVersionUpdateOne) SetProductID(i int) *SoftwareVersionUpdateOne {
	svuo.mutation.SetProductID(i)
	return svuo
}

// SetVersion sets the "version" field.
func (svuo *SoftwareVersionUpdateOne) SetVersion(s string) *SoftwareVersionUpdateOne {
	svuo.mutation.SetVersion(s)
	return svuo
}

// SetReleaseDate sets the "release_date" field.
func (svuo *SoftwareVersionUpdateOne) SetReleaseDate(t time.Time) *SoftwareVersionUpdateOne {
	svuo.mutation.SetReleaseDate(t)
	return svuo
}

// SetUpdateLog sets the "update_log" field.
func (svuo *SoftwareVersionUpdateOne) SetUpdateLog(s string) *SoftwareVersionUpdateOne {
	svuo.mutation.SetUpdateLog(s)
	return svuo
}

// SetNillableUpdateLog sets the "update_log" field if the given value is not nil.
func (svuo *SoftwareVersionUpdateOne) SetNillableUpdateLog(s *string) *SoftwareVersionUpdateOne {
	if s != nil {
		svuo.SetUpdateLog(*s)
	}
	return svuo
}

// ClearUpdateLog clears the value of the "update_log" field.
func (svuo *SoftwareVersionUpdateOne) ClearUpdateLog() *SoftwareVersionUpdateOne {
	svuo.mutation.ClearUpdateLog()
	return svuo
}

// SetRemark sets the "remark" field.
func (svuo *SoftwareVersionUpdateOne) SetRemark(s string) *SoftwareVersionUpdateOne {
	svuo.mutation.SetRemark(s)
	return svuo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (svuo *SoftwareVersionUpdateOne) SetNillableRemark(s *string) *SoftwareVersionUpdateOne {
	if s != nil {
		svuo.SetRemark(*s)
	}
	return svuo
}

// ClearRemark clears the value of the "remark" field.
func (svuo *SoftwareVersionUpdateOne) ClearRemark() *SoftwareVersionUpdateOne {
	svuo.mutation.ClearRemark()
	return svuo
}

// SetCreatedBy sets the "created_by" field.
func (svuo *SoftwareVersionUpdateOne) SetCreatedBy(i int) *SoftwareVersionUpdateOne {
	svuo.mutation.SetCreatedBy(i)
	return svuo
}

// SetCreatedAt sets the "created_at" field.
func (svuo *SoftwareVersionUpdateOne) SetCreatedAt(t time.Time) *SoftwareVersionUpdateOne {
	svuo.mutation.SetCreatedAt(t)
	return svuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (svuo *SoftwareVersionUpdateOne) SetNillableCreatedAt(t *time.Time) *SoftwareVersionUpdateOne {
	if t != nil {
		svuo.SetCreatedAt(*t)
	}
	return svuo
}

// SetUpdatedAt sets the "updated_at" field.
func (svuo *SoftwareVersionUpdateOne) SetUpdatedAt(t time.Time) *SoftwareVersionUpdateOne {
	svuo.mutation.SetUpdatedAt(t)
	return svuo
}

// AddFeatureIDs adds the "features" edge to the ProductFeature entity by IDs.
func (svuo *SoftwareVersionUpdateOne) AddFeatureIDs(ids ...int) *SoftwareVersionUpdateOne {
	svuo.mutation.AddFeatureIDs(ids...)
	return svuo
}

// AddFeatures adds the "features" edges to the ProductFeature entity.
func (svuo *SoftwareVersionUpdateOne) AddFeatures(p ...*ProductFeature) *SoftwareVersionUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return svuo.AddFeatureIDs(ids...)
}

// AddFirmwareVersionIDs adds the "firmware_versions" edge to the FirmwareVersion entity by IDs.
func (svuo *SoftwareVersionUpdateOne) AddFirmwareVersionIDs(ids ...int) *SoftwareVersionUpdateOne {
	svuo.mutation.AddFirmwareVersionIDs(ids...)
	return svuo
}

// AddFirmwareVersions adds the "firmware_versions" edges to the FirmwareVersion entity.
func (svuo *SoftwareVersionUpdateOne) AddFirmwareVersions(f ...*FirmwareVersion) *SoftwareVersionUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return svuo.AddFirmwareVersionIDs(ids...)
}

// SetProduct sets the "product" edge to the Product entity.
func (svuo *SoftwareVersionUpdateOne) SetProduct(p *Product) *SoftwareVersionUpdateOne {
	return svuo.SetProductID(p.ID)
}

// SetCreatorID sets the "creator" edge to the User entity by ID.
func (svuo *SoftwareVersionUpdateOne) SetCreatorID(id int) *SoftwareVersionUpdateOne {
	svuo.mutation.SetCreatorID(id)
	return svuo
}

// SetCreator sets the "creator" edge to the User entity.
func (svuo *SoftwareVersionUpdateOne) SetCreator(u *User) *SoftwareVersionUpdateOne {
	return svuo.SetCreatorID(u.ID)
}

// Mutation returns the SoftwareVersionMutation object of the builder.
func (svuo *SoftwareVersionUpdateOne) Mutation() *SoftwareVersionMutation {
	return svuo.mutation
}

// ClearFeatures clears all "features" edges to the ProductFeature entity.
func (svuo *SoftwareVersionUpdateOne) ClearFeatures() *SoftwareVersionUpdateOne {
	svuo.mutation.ClearFeatures()
	return svuo
}

// RemoveFeatureIDs removes the "features" edge to ProductFeature entities by IDs.
func (svuo *SoftwareVersionUpdateOne) RemoveFeatureIDs(ids ...int) *SoftwareVersionUpdateOne {
	svuo.mutation.RemoveFeatureIDs(ids...)
	return svuo
}

// RemoveFeatures removes "features" edges to ProductFeature entities.
func (svuo *SoftwareVersionUpdateOne) RemoveFeatures(p ...*ProductFeature) *SoftwareVersionUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return svuo.RemoveFeatureIDs(ids...)
}

// ClearFirmwareVersions clears all "firmware_versions" edges to the FirmwareVersion entity.
func (svuo *SoftwareVersionUpdateOne) ClearFirmwareVersions() *SoftwareVersionUpdateOne {
	svuo.mutation.ClearFirmwareVersions()
	return svuo
}

// RemoveFirmwareVersionIDs removes the "firmware_versions" edge to FirmwareVersion entities by IDs.
func (svuo *SoftwareVersionUpdateOne) RemoveFirmwareVersionIDs(ids ...int) *SoftwareVersionUpdateOne {
	svuo.mutation.RemoveFirmwareVersionIDs(ids...)
	return svuo
}

// RemoveFirmwareVersions removes "firmware_versions" edges to FirmwareVersion entities.
func (svuo *SoftwareVersionUpdateOne) RemoveFirmwareVersions(f ...*FirmwareVersion) *SoftwareVersionUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return svuo.RemoveFirmwareVersionIDs(ids...)
}

// ClearProduct clears the "product" edge to the Product entity.
func (svuo *SoftwareVersionUpdateOne) ClearProduct() *SoftwareVersionUpdateOne {
	svuo.mutation.ClearProduct()
	return svuo
}

// ClearCreator clears the "creator" edge to the User entity.
func (svuo *SoftwareVersionUpdateOne) ClearCreator() *SoftwareVersionUpdateOne {
	svuo.mutation.ClearCreator()
	return svuo
}

// Where appends a list predicates to the SoftwareVersionUpdate builder.
func (svuo *SoftwareVersionUpdateOne) Where(ps ...predicate.SoftwareVersion) *SoftwareVersionUpdateOne {
	svuo.mutation.Where(ps...)
	return svuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (svuo *SoftwareVersionUpdateOne) Select(field string, fields ...string) *SoftwareVersionUpdateOne {
	svuo.fields = append([]string{field}, fields...)
	return svuo
}

// Save executes the query and returns the updated SoftwareVersion entity.
func (svuo *SoftwareVersionUpdateOne) Save(ctx context.Context) (*SoftwareVersion, error) {
	svuo.defaults()
	return withHooks(ctx, svuo.sqlSave, svuo.mutation, svuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (svuo *SoftwareVersionUpdateOne) SaveX(ctx context.Context) *SoftwareVersion {
	node, err := svuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (svuo *SoftwareVersionUpdateOne) Exec(ctx context.Context) error {
	_, err := svuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (svuo *SoftwareVersionUpdateOne) ExecX(ctx context.Context) {
	if err := svuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (svuo *SoftwareVersionUpdateOne) defaults() {
	if _, ok := svuo.mutation.UpdatedAt(); !ok {
		v := softwareversion.UpdateDefaultUpdatedAt()
		svuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (svuo *SoftwareVersionUpdateOne) check() error {
	if v, ok := svuo.mutation.Version(); ok {
		if err := softwareversion.VersionValidator(v); err != nil {
			return &ValidationError{Name: "version", err: fmt.Errorf(`ent: validator failed for field "SoftwareVersion.version": %w`, err)}
		}
	}
	if _, ok := svuo.mutation.ProductID(); svuo.mutation.ProductCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "SoftwareVersion.product"`)
	}
	if _, ok := svuo.mutation.CreatorID(); svuo.mutation.CreatorCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "SoftwareVersion.creator"`)
	}
	return nil
}

func (svuo *SoftwareVersionUpdateOne) sqlSave(ctx context.Context) (_node *SoftwareVersion, err error) {
	if err := svuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(softwareversion.Table, softwareversion.Columns, sqlgraph.NewFieldSpec(softwareversion.FieldID, field.TypeInt))
	id, ok := svuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SoftwareVersion.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := svuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, softwareversion.FieldID)
		for _, f := range fields {
			if !softwareversion.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != softwareversion.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := svuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := svuo.mutation.Version(); ok {
		_spec.SetField(softwareversion.FieldVersion, field.TypeString, value)
	}
	if value, ok := svuo.mutation.ReleaseDate(); ok {
		_spec.SetField(softwareversion.FieldReleaseDate, field.TypeTime, value)
	}
	if value, ok := svuo.mutation.UpdateLog(); ok {
		_spec.SetField(softwareversion.FieldUpdateLog, field.TypeString, value)
	}
	if svuo.mutation.UpdateLogCleared() {
		_spec.ClearField(softwareversion.FieldUpdateLog, field.TypeString)
	}
	if value, ok := svuo.mutation.Remark(); ok {
		_spec.SetField(softwareversion.FieldRemark, field.TypeString, value)
	}
	if svuo.mutation.RemarkCleared() {
		_spec.ClearField(softwareversion.FieldRemark, field.TypeString)
	}
	if value, ok := svuo.mutation.CreatedAt(); ok {
		_spec.SetField(softwareversion.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := svuo.mutation.UpdatedAt(); ok {
		_spec.SetField(softwareversion.FieldUpdatedAt, field.TypeTime, value)
	}
	if svuo.mutation.FeaturesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   softwareversion.FeaturesTable,
			Columns: softwareversion.FeaturesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productfeature.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := svuo.mutation.RemovedFeaturesIDs(); len(nodes) > 0 && !svuo.mutation.FeaturesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   softwareversion.FeaturesTable,
			Columns: softwareversion.FeaturesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productfeature.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := svuo.mutation.FeaturesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   softwareversion.FeaturesTable,
			Columns: softwareversion.FeaturesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productfeature.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if svuo.mutation.FirmwareVersionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   softwareversion.FirmwareVersionsTable,
			Columns: softwareversion.FirmwareVersionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(firmwareversion.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := svuo.mutation.RemovedFirmwareVersionsIDs(); len(nodes) > 0 && !svuo.mutation.FirmwareVersionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   softwareversion.FirmwareVersionsTable,
			Columns: softwareversion.FirmwareVersionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(firmwareversion.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := svuo.mutation.FirmwareVersionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   softwareversion.FirmwareVersionsTable,
			Columns: softwareversion.FirmwareVersionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(firmwareversion.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if svuo.mutation.ProductCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   softwareversion.ProductTable,
			Columns: []string{softwareversion.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := svuo.mutation.ProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   softwareversion.ProductTable,
			Columns: []string{softwareversion.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if svuo.mutation.CreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   softwareversion.CreatorTable,
			Columns: []string{softwareversion.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := svuo.mutation.CreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   softwareversion.CreatorTable,
			Columns: []string{softwareversion.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &SoftwareVersion{config: svuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, svuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{softwareversion.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	svuo.mutation.done = true
	return _node, nil
}
